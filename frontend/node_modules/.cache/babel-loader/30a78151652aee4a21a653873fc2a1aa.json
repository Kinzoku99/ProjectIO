{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FontCache = void 0;\n\nvar FontCache = function () {\n  function FontCache(jax) {\n    this.cache = new Map();\n    this.defs = null;\n    this.localID = '';\n    this.nextID = 0;\n    this.jax = jax;\n  }\n\n  FontCache.prototype.cachePath = function (variant, C, path) {\n    var id = 'MJX-' + this.localID + (this.jax.font.getVariant(variant).cacheID || '') + '-' + C;\n\n    if (!this.cache.has(id)) {\n      this.cache.set(id, path);\n      this.jax.adaptor.append(this.defs, this.jax.svg('path', {\n        id: id,\n        d: path\n      }));\n    }\n\n    return id;\n  };\n\n  FontCache.prototype.clearLocalID = function () {\n    this.localID = '';\n  };\n\n  FontCache.prototype.useLocalID = function (id) {\n    if (id === void 0) {\n      id = null;\n    }\n\n    this.localID = (id == null ? ++this.nextID : id) + (id === '' ? '' : '-');\n  };\n\n  FontCache.prototype.clearCache = function () {\n    this.cache = new Map();\n    this.defs = this.jax.svg('defs');\n  };\n\n  FontCache.prototype.getCache = function () {\n    return this.defs;\n  };\n\n  return FontCache;\n}();\n\nexports.FontCache = FontCache;","map":{"version":3,"mappings":";;;;;;;AAyBA;AA8BE,qBAAYA,GAAZ,EAA6B;AApBnB,iBAA6B,IAAIC,GAAJ,EAA7B;AAKA,gBAAU,IAAV;AAKA,mBAAkB,EAAlB;AAKA,kBAAiB,CAAjB;AAMR,SAAKD,GAAL,GAAWA,GAAX;AACD;;AAUME,kCAAP,UAAiBC,OAAjB,EAAkCC,CAAlC,EAA6CC,IAA7C,EAAyD;AACvD,QAAMC,EAAE,GAAG,SAAS,KAAKC,OAAd,IAAyB,KAAKP,GAAL,CAASQ,IAAT,CAAcC,UAAd,CAAyBN,OAAzB,EAAkCO,OAAlC,IAA6C,EAAtE,IAA4E,GAA5E,GAAkFN,CAA7F;;AACA,QAAI,CAAC,KAAKO,KAAL,CAAWC,GAAX,CAAeN,EAAf,CAAL,EAAyB;AACvB,WAAKK,KAAL,CAAWE,GAAX,CAAeP,EAAf,EAAmBD,IAAnB;AACA,WAAKL,GAAL,CAASc,OAAT,CAAiBC,MAAjB,CAAwB,KAAKC,IAA7B,EAAmC,KAAKhB,GAAL,CAASiB,GAAT,CAAa,MAAb,EAAqB;AAACX,UAAE,EAAEA,EAAL;AAASY,SAAC,EAAEb;AAAZ,OAArB,CAAnC;AACD;;AACD,WAAOC,EAAP;AACD,GAPM;;AAYAJ,qCAAP;AACE,SAAKK,OAAL,GAAe,EAAf;AACD,GAFM;;AAQAL,mCAAP,UAAkBI,EAAlB,EAAmC;AAAjB;AAAAA;AAAiB;;AACjC,SAAKC,OAAL,GAAe,CAACD,EAAE,IAAI,IAAN,GAAa,EAAE,KAAKa,MAApB,GAA6Bb,EAA9B,KAAqCA,EAAE,KAAK,EAAP,GAAY,EAAZ,GAAiB,GAAtD,CAAf;AACD,GAFM;;AAOAJ,mCAAP;AACE,SAAKS,KAAL,GAAa,IAAIV,GAAJ,EAAb;AACA,SAAKe,IAAL,GAAY,KAAKhB,GAAL,CAASiB,GAAT,CAAa,MAAb,CAAZ;AACD,GAHM;;AAQAf,iCAAP;AACE,WAAO,KAAKc,IAAZ;AACD,GAFM;;AAIT;AAAC,CAjFD;;AAAaI","names":["jax","Map","FontCache","variant","C","path","id","localID","font","getVariant","cacheID","cache","has","set","adaptor","append","defs","svg","d","nextID","exports"],"sources":["/home/kinzoku99/Desktop/ProjectIO/frontend/node_modules/mathjax-full/ts/output/svg/FontCache.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2019-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the FontCache object for SVG output\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {SVG} from '../svg.js';\n\nexport class FontCache<N, T, D> {\n\n  /**\n   * The SVG jax that owsn this cache\n   */\n  protected jax: SVG<N, T, D>;\n\n  /**\n   * The cache of font character IDs to their paths\n   */\n  protected cache: Map<string, string> = new Map();\n\n  /**\n   * The SVG <defs> element for storing the cache\n   */\n  protected defs: N = null;\n\n  /**\n   * A string to use to make per-equation cache IDs unique\n   */\n  protected localID: string = '';\n\n  /**\n   * A number used to make localID values to use for each equation\n   */\n  protected nextID: number = 0;\n\n  /**\n   * @param {SVG} jax  The SVG jax owning this font cache\n   */\n  constructor(jax: SVG<N, T, D>) {\n    this.jax = jax;\n  }\n\n  /**\n   * Cache a character from a particular variant and return the cache ID\n   *\n   * @param {string} variant   The variant name for the character\n   * @param {string} C         The character to be cached\n   * @param {string} path      The SVG path data for the character\n   * @return {string}          The id for the cached <path> element\n   */\n  public cachePath(variant: string, C: string, path: string): string {\n    const id = 'MJX-' + this.localID + (this.jax.font.getVariant(variant).cacheID || '') + '-' + C;\n    if (!this.cache.has(id)) {\n      this.cache.set(id, path);\n      this.jax.adaptor.append(this.defs, this.jax.svg('path', {id: id, d: path}));\n    }\n    return id;\n  }\n\n  /**\n   * Clear the localID value\n   */\n  public clearLocalID() {\n    this.localID = '';\n  }\n\n  /**\n   * Use a localID (for font-specific caching), either with a specific string,\n   * or from the nextID number.\n   */\n  public useLocalID(id: string = null) {\n    this.localID = (id == null ? ++this.nextID : id) + (id === '' ? '' : '-');\n  }\n\n  /**\n   * Clear the cache\n   */\n  public clearCache() {\n    this.cache = new Map();\n    this.defs = this.jax.svg('defs');\n  }\n\n  /**\n   * Return the font cache <defs> element\n   */\n  public getCache() {\n    return this.defs;\n  }\n\n}\n"]},"metadata":{},"sourceType":"script"}