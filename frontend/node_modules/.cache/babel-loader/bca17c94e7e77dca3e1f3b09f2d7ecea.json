{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n  return to;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CommonTeXFontMixin = void 0;\n\nfunction CommonTeXFontMixin(Base) {\n  var _a;\n\n  return _a = function (_super) {\n    __extends(class_1, _super);\n\n    function class_1() {\n      return _super !== null && _super.apply(this, arguments) || this;\n    }\n\n    class_1.prototype.getDelimiterData = function (n) {\n      return this.getChar('-smallop', n) || this.getChar('-size4', n);\n    };\n\n    return class_1;\n  }(Base), _a.defaultVariants = __spreadArray(__spreadArray([], __read(Base.defaultVariants)), [['-smallop', 'normal'], ['-largeop', 'normal'], ['-size3', 'normal'], ['-size4', 'normal'], ['-tex-calligraphic', 'italic'], ['-tex-bold-calligraphic', 'bold-italic'], ['-tex-oldstyle', 'normal'], ['-tex-bold-oldstyle', 'bold'], ['-tex-mathit', 'italic'], ['-tex-variant', 'normal']]), _a.defaultCssFonts = __assign(__assign({}, Base.defaultCssFonts), {\n    '-smallop': ['serif', false, false],\n    '-largeop': ['serif', false, false],\n    '-size3': ['serif', false, false],\n    '-size4': ['serif', false, false],\n    '-tex-calligraphic': ['cursive', true, false],\n    '-tex-bold-calligraphic': ['cursive', true, true],\n    '-tex-oldstyle': ['serif', false, false],\n    '-tex-bold-oldstyle': ['serif', false, true],\n    '-tex-mathit': ['serif', true, false]\n  }), _a.defaultSizeVariants = ['normal', '-smallop', '-largeop', '-size3', '-size4', '-tex-variant'], _a.defaultStretchVariants = ['-size4'], _a;\n}\n\nexports.CommonTeXFontMixin = CommonTeXFontMixin;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA,SAAgBA,kBAAhB,CAKEC,IALF,EAKS;;;AAEP;AAAqBC;;AAAd;;AAoDN;;AAJWC,yCAAV,UAA2BC,CAA3B,EAAoC;AAClC,aAAO,KAAKC,OAAL,CAAa,UAAb,EAAyBD,CAAzB,KAA+B,KAAKC,OAAL,CAAa,QAAb,EAAuBD,CAAvB,CAAtC;AACD,KAFS;;AAIZ;AApDO,GAAP,CAAqBH,IAArB,GAKmBK,qBAAeC,uCAC3BN,IAAI,CAACO,eADsB,IACP,CACvB,CAAC,UAAD,EAAa,QAAb,CADuB,EAEvB,CAAC,UAAD,EAAa,QAAb,CAFuB,EAGvB,CAAC,QAAD,EAAW,QAAX,CAHuB,EAIvB,CAAC,QAAD,EAAW,QAAX,CAJuB,EAKvB,CAAC,mBAAD,EAAsB,QAAtB,CALuB,EAMvB,CAAC,wBAAD,EAA2B,aAA3B,CANuB,EAOvB,CAAC,eAAD,EAAkB,QAAlB,CAPuB,EAQvB,CAAC,oBAAD,EAAuB,MAAvB,CARuB,EASvB,CAAC,aAAD,EAAgB,QAAhB,CATuB,EAUvB,CAAC,cAAD,EAAiB,QAAjB,CAVuB,CADO,CALlC,EAsBmBF,qBAAeG,sBAC3BR,IAAI,CAACS,eADsB,GACP;AACvB,gBAAY,CAAC,OAAD,EAAU,KAAV,EAAiB,KAAjB,CADW;AAEvB,gBAAY,CAAC,OAAD,EAAU,KAAV,EAAiB,KAAjB,CAFW;AAGvB,cAAU,CAAC,OAAD,EAAU,KAAV,EAAiB,KAAjB,CAHa;AAIvB,cAAU,CAAC,OAAD,EAAU,KAAV,EAAiB,KAAjB,CAJa;AAKvB,yBAAqB,CAAC,SAAD,EAAY,IAAZ,EAAkB,KAAlB,CALE;AAMvB,8BAA0B,CAAC,SAAD,EAAY,IAAZ,EAAkB,IAAlB,CANH;AAOvB,qBAAiB,CAAC,OAAD,EAAU,KAAV,EAAiB,KAAjB,CAPM;AAQvB,0BAAsB,CAAC,OAAD,EAAU,KAAV,EAAiB,IAAjB,CARC;AASvB,mBAAe,CAAC,OAAD,EAAU,IAAV,EAAgB,KAAhB;AATQ,GADO,CAtBlC,EAsCmBJ,yBAAsB,CAAC,QAAD,EAAW,UAAX,EAAuB,UAAvB,EAAmC,QAAnC,EAA6C,QAA7C,EAAuD,cAAvD,CAtCzC,EA2CmBA,4BAAyB,CAAC,QAAD,CA3C5C;AAsDD;;AA7DDK","names":["CommonTeXFontMixin","Base","__extends","class_1","n","getChar","_a","__spreadArray","defaultVariants","__assign","defaultCssFonts","exports"],"sources":["/home/kinzoku99/Desktop/ProjectIO/frontend/node_modules/mathjax-full/ts/output/common/fonts/tex.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  The MathJax TeXFont object\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {FontDataClass, CharOptions, VariantData, DelimiterData, CssFontMap} from '../FontData.js';\n\n/*****************************************************************/\n/**\n *  The CommonTeXFont mixin for the CommonTeXFont object\n *\n * @template C  The CharOptions class for this font\n * @template V  The VariantData class for this font\n * @template B  The FontData class to extend\n */\nexport function CommonTeXFontMixin<\n  C extends CharOptions,\n  V extends VariantData<C>,\n  D extends DelimiterData,\n  B extends FontDataClass<C, V, D>\n>(Base: B): FontDataClass<C, V, D> & B {\n\n  return class extends Base {\n\n    /**\n     *  Add the extra variants for the TeX fonts\n     */\n    protected static defaultVariants = [\n      ...Base.defaultVariants,\n      ['-smallop', 'normal'],\n      ['-largeop', 'normal'],\n      ['-size3', 'normal'],\n      ['-size4', 'normal'],\n      ['-tex-calligraphic', 'italic'],\n      ['-tex-bold-calligraphic', 'bold-italic'],\n      ['-tex-oldstyle', 'normal'],\n      ['-tex-bold-oldstyle', 'bold'],\n      ['-tex-mathit', 'italic'],\n      ['-tex-variant', 'normal']\n    ];\n\n    /**\n     * The data used for CSS for undefined characters for each variant\n     */\n    protected static defaultCssFonts: CssFontMap = {\n      ...Base.defaultCssFonts,\n      '-smallop': ['serif', false, false],\n      '-largeop': ['serif', false, false],\n      '-size3': ['serif', false, false],\n      '-size4': ['serif', false, false],\n      '-tex-calligraphic': ['cursive', true, false],\n      '-tex-bold-calligraphic': ['cursive', true, true],\n      '-tex-oldstyle': ['serif', false, false],\n      '-tex-bold-oldstyle': ['serif', false, true],\n      '-tex-mathit': ['serif', true, false]\n    };\n\n    /**\n     *  The default variants for the standard stretchy sizes\n     */\n    protected static defaultSizeVariants = ['normal', '-smallop', '-largeop', '-size3', '-size4', '-tex-variant'];\n\n    /**\n     *  The default variants for the standard stretchy assmebly parts\n     */\n    protected static defaultStretchVariants = ['-size4'];\n\n    /**\n     * @override\n     */\n    protected getDelimiterData(n: number) {\n      return this.getChar('-smallop', n) || this.getChar('-size4', n);\n    }\n\n  };\n\n}\n\n"]},"metadata":{},"sourceType":"script"}