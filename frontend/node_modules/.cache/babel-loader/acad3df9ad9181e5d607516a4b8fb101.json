{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MmlMfenced = void 0;\n\nvar MmlNode_js_1 = require(\"../MmlNode.js\");\n\nvar MmlMfenced = function (_super) {\n  __extends(MmlMfenced, _super);\n\n  function MmlMfenced() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.texclass = MmlNode_js_1.TEXCLASS.INNER;\n    _this.separators = [];\n    _this.open = null;\n    _this.close = null;\n    return _this;\n  }\n\n  Object.defineProperty(MmlMfenced.prototype, \"kind\", {\n    get: function () {\n      return 'mfenced';\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  MmlMfenced.prototype.setTeXclass = function (prev) {\n    this.getPrevClass(prev);\n\n    if (this.open) {\n      prev = this.open.setTeXclass(prev);\n    }\n\n    if (this.childNodes[0]) {\n      prev = this.childNodes[0].setTeXclass(prev);\n    }\n\n    for (var i = 1, m = this.childNodes.length; i < m; i++) {\n      if (this.separators[i - 1]) {\n        prev = this.separators[i - 1].setTeXclass(prev);\n      }\n\n      if (this.childNodes[i]) {\n        prev = this.childNodes[i].setTeXclass(prev);\n      }\n    }\n\n    if (this.close) {\n      prev = this.close.setTeXclass(prev);\n    }\n\n    this.updateTeXclass(this.open);\n    return prev;\n  };\n\n  MmlMfenced.prototype.setChildInheritedAttributes = function (attributes, display, level, prime) {\n    var e_1, _a;\n\n    this.addFakeNodes();\n\n    try {\n      for (var _b = __values([this.open, this.close].concat(this.separators)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var child = _c.value;\n\n        if (child) {\n          child.setInheritedAttributes(attributes, display, level, prime);\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    _super.prototype.setChildInheritedAttributes.call(this, attributes, display, level, prime);\n  };\n\n  MmlMfenced.prototype.addFakeNodes = function () {\n    var e_2, _a;\n\n    var _b = this.attributes.getList('open', 'close', 'separators'),\n        open = _b.open,\n        close = _b.close,\n        separators = _b.separators;\n\n    open = open.replace(/[ \\t\\n\\r]/g, '');\n    close = close.replace(/[ \\t\\n\\r]/g, '');\n    separators = separators.replace(/[ \\t\\n\\r]/g, '');\n\n    if (open) {\n      this.open = this.fakeNode(open, {\n        fence: true,\n        form: 'prefix'\n      }, MmlNode_js_1.TEXCLASS.OPEN);\n    }\n\n    if (separators) {\n      while (separators.length < this.childNodes.length - 1) {\n        separators += separators.charAt(separators.length - 1);\n      }\n\n      var i = 0;\n\n      try {\n        for (var _c = __values(this.childNodes.slice(1)), _d = _c.next(); !_d.done; _d = _c.next()) {\n          var child = _d.value;\n\n          if (child) {\n            this.separators.push(this.fakeNode(separators.charAt(i++)));\n          }\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n    }\n\n    if (close) {\n      this.close = this.fakeNode(close, {\n        fence: true,\n        form: 'postfix'\n      }, MmlNode_js_1.TEXCLASS.CLOSE);\n    }\n  };\n\n  MmlMfenced.prototype.fakeNode = function (c, properties, texClass) {\n    if (properties === void 0) {\n      properties = {};\n    }\n\n    if (texClass === void 0) {\n      texClass = null;\n    }\n\n    var text = this.factory.create('text').setText(c);\n    var node = this.factory.create('mo', properties, [text]);\n    node.texClass = texClass;\n    node.parent = this;\n    return node;\n  };\n\n  MmlMfenced.defaults = __assign(__assign({}, MmlNode_js_1.AbstractMmlNode.defaults), {\n    open: '(',\n    close: ')',\n    separators: ','\n  });\n  return MmlMfenced;\n}(MmlNode_js_1.AbstractMmlNode);\n\nexports.MmlMfenced = MmlMfenced;","map":{"version":3,"mappings":"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","names":["__extends","_this","MmlNode_js_1","INNER","Object","MmlMfenced","prev","getPrevClass","open","setTeXclass","childNodes","i","m","length","separators","close","updateTeXclass","attributes","display","level","prime","addFakeNodes","concat","_c","child","setInheritedAttributes","_super","setChildInheritedAttributes","call","getList","replace","fakeNode","fence","form","OPEN","charAt","slice","_d","push","CLOSE","c","properties","texClass","text","factory","create","setText","node","parent","__assign","defaults","exports"],"sources":["/home/kinzoku99/Desktop/ProjectIO/frontend/node_modules/mathjax-full/ts/core/MmlTree/MmlNodes/mfenced.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the MmlMfenced node\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {PropertyList} from '../../Tree/Node.js';\nimport {MmlNode, TextNode, AbstractMmlNode, AttributeList, TEXCLASS} from '../MmlNode.js';\n\n/*****************************************************************/\n/**\n *  Implements the MmlMfenced node class (subclass of AbstractMmlNode)\n */\n\nexport class MmlMfenced extends AbstractMmlNode {\n\n  /**\n   * @overeride\n   */\n  public static defaults: PropertyList = {\n    ...AbstractMmlNode.defaults,\n    open: '(',\n    close: ')',\n    separators: ','\n  };\n\n  /**\n   * TeX class is INNER\n   */\n  protected texclass = TEXCLASS.INNER;\n\n  /**\n   * Storage for \"fake\" nodes for the separators\n   */\n  public separators: MmlNode[] = [];\n  /**\n   * Storage for \"fake\" open node\n   */\n  public open: MmlNode = null;\n  /**\n   * Storage for \"fake\" close node\n   */\n  public close: MmlNode = null;\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'mfenced';\n  }\n\n  /**\n   * Include the fake nodes in the process, since they will be used\n   *  to produce the output.\n   *\n   * @override\n   */\n  public setTeXclass(prev: MmlNode) {\n    this.getPrevClass(prev);\n    if (this.open) {\n      prev = this.open.setTeXclass(prev);\n    }\n    if (this.childNodes[0]) {\n      prev = this.childNodes[0].setTeXclass(prev);\n    }\n    for (let i = 1, m = this.childNodes.length; i < m; i++) {\n      if (this.separators[i - 1]) {\n        prev = this.separators[i - 1].setTeXclass(prev);\n      }\n      if (this.childNodes[i]) {\n        prev = this.childNodes[i].setTeXclass(prev);\n      }\n    }\n    if (this.close) {\n      prev = this.close.setTeXclass(prev);\n    }\n    this.updateTeXclass(this.open);\n    return prev;\n  }\n\n  /**\n   * Create the fake nodes and do their inheritance\n   * Then do inheridence of usual children\n   *\n   * @override\n   */\n  protected setChildInheritedAttributes(attributes: AttributeList, display: boolean, level: number, prime: boolean) {\n    this.addFakeNodes();\n    for (const child of [this.open, this.close].concat(this.separators)) {\n      if (child) {\n        child.setInheritedAttributes(attributes, display, level, prime);\n      }\n    }\n    super.setChildInheritedAttributes(attributes, display, level, prime);\n  }\n\n  /**\n   * Create <mo> elements for the open and close delimiters, and for the separators (if any)\n   */\n  protected addFakeNodes() {\n    let {open, close, separators} = this.attributes.getList('open', 'close', 'separators') as\n    {open: string, close: string, separators: string};\n    open = open.replace(/[ \\t\\n\\r]/g, '');\n    close = close.replace(/[ \\t\\n\\r]/g, '');\n    separators = separators.replace(/[ \\t\\n\\r]/g, '');\n    //\n    // Create open node\n    //\n    if (open) {\n      this.open = this.fakeNode(open, {fence: true, form: 'prefix'}, TEXCLASS.OPEN);\n    }\n    //\n    // Create nodes for the separators\n    //\n    if (separators) {\n      while (separators.length < this.childNodes.length - 1) {\n        separators += separators.charAt(separators.length - 1);\n      }\n      let i = 0;\n      for (const child of this.childNodes.slice(1)) {\n        if (child) {\n          this.separators.push(this.fakeNode(separators.charAt(i++)));\n        }\n      }\n    }\n    //\n    //  Create close node\n    //\n    if (close) {\n      this.close = this.fakeNode(close, {fence: true, form: 'postfix'}, TEXCLASS.CLOSE);\n    }\n  }\n\n  /**\n   * @param {string} c                 The character for the text of the node\n   * @param {PropertyList} properties  The attributes for the node\n   * @param {number} texClass          The TeX class for the node\n   * @return {MmlNode}                 The generated <mo> node\n   */\n  protected fakeNode(c: string, properties: PropertyList = {}, texClass: number = null): MmlNode {\n    let text = (this.factory.create('text') as TextNode).setText(c);\n    let node = this.factory.create('mo', properties, [text]);\n    node.texClass = texClass;\n    node.parent = this;\n    return node;\n  }\n\n}\n"]},"metadata":{},"sourceType":"script"}