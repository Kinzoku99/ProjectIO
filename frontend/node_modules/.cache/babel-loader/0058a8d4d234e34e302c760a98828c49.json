{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n  return to;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AbstractMathDocument = exports.resetAllOptions = exports.resetOptions = exports.RenderList = void 0;\n\nvar Options_js_1 = require(\"../util/Options.js\");\n\nvar InputJax_js_1 = require(\"./InputJax.js\");\n\nvar OutputJax_js_1 = require(\"./OutputJax.js\");\n\nvar MathList_js_1 = require(\"./MathList.js\");\n\nvar MathItem_js_1 = require(\"./MathItem.js\");\n\nvar MmlFactory_js_1 = require(\"../core/MmlTree/MmlFactory.js\");\n\nvar BitField_js_1 = require(\"../util/BitField.js\");\n\nvar PrioritizedList_js_1 = require(\"../util/PrioritizedList.js\");\n\nvar RenderList = function (_super) {\n  __extends(RenderList, _super);\n\n  function RenderList() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  RenderList.create = function (actions) {\n    var e_1, _a;\n\n    var list = new this();\n\n    try {\n      for (var _b = __values(Object.keys(actions)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var id = _c.value;\n\n        var _d = __read(this.action(id, actions[id]), 2),\n            action = _d[0],\n            priority = _d[1];\n\n        if (priority) {\n          list.add(action, priority);\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    return list;\n  };\n\n  RenderList.action = function (id, action) {\n    var _a, _b, _c, _d;\n\n    var renderDoc, renderMath;\n    var convert = true;\n    var priority = action[0];\n\n    if (action.length === 1 || typeof action[1] === 'boolean') {\n      action.length === 2 && (convert = action[1]);\n      _a = __read(this.methodActions(id), 2), renderDoc = _a[0], renderMath = _a[1];\n    } else if (typeof action[1] === 'string') {\n      if (typeof action[2] === 'string') {\n        action.length === 4 && (convert = action[3]);\n\n        var _e = __read(action.slice(1), 2),\n            method1 = _e[0],\n            method2 = _e[1];\n\n        _b = __read(this.methodActions(method1, method2), 2), renderDoc = _b[0], renderMath = _b[1];\n      } else {\n        action.length === 3 && (convert = action[2]);\n        _c = __read(this.methodActions(action[1]), 2), renderDoc = _c[0], renderMath = _c[1];\n      }\n    } else {\n      action.length === 4 && (convert = action[3]);\n      _d = __read(action.slice(1), 2), renderDoc = _d[0], renderMath = _d[1];\n    }\n\n    return [{\n      id: id,\n      renderDoc: renderDoc,\n      renderMath: renderMath,\n      convert: convert\n    }, priority];\n  };\n\n  RenderList.methodActions = function (method1, method2) {\n    if (method2 === void 0) {\n      method2 = method1;\n    }\n\n    return [function (document) {\n      method1 && document[method1]();\n      return false;\n    }, function (math, document) {\n      method2 && math[method2](document);\n      return false;\n    }];\n  };\n\n  RenderList.prototype.renderDoc = function (document, start) {\n    var e_2, _a;\n\n    if (start === void 0) {\n      start = MathItem_js_1.STATE.UNPROCESSED;\n    }\n\n    try {\n      for (var _b = __values(this.items), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var item = _c.value;\n\n        if (item.priority >= start) {\n          if (item.item.renderDoc(document)) return;\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n  };\n\n  RenderList.prototype.renderMath = function (math, document, start) {\n    var e_3, _a;\n\n    if (start === void 0) {\n      start = MathItem_js_1.STATE.UNPROCESSED;\n    }\n\n    try {\n      for (var _b = __values(this.items), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var item = _c.value;\n\n        if (item.priority >= start) {\n          if (item.item.renderMath(math, document)) return;\n        }\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n  };\n\n  RenderList.prototype.renderConvert = function (math, document, end) {\n    var e_4, _a;\n\n    if (end === void 0) {\n      end = MathItem_js_1.STATE.LAST;\n    }\n\n    try {\n      for (var _b = __values(this.items), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var item = _c.value;\n        if (item.priority > end) return;\n\n        if (item.item.convert) {\n          if (item.item.renderMath(math, document)) return;\n        }\n      }\n    } catch (e_4_1) {\n      e_4 = {\n        error: e_4_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_4) throw e_4.error;\n      }\n    }\n  };\n\n  RenderList.prototype.findID = function (id) {\n    var e_5, _a;\n\n    try {\n      for (var _b = __values(this.items), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var item = _c.value;\n\n        if (item.item.id === id) {\n          return item.item;\n        }\n      }\n    } catch (e_5_1) {\n      e_5 = {\n        error: e_5_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_5) throw e_5.error;\n      }\n    }\n\n    return null;\n  };\n\n  return RenderList;\n}(PrioritizedList_js_1.PrioritizedList);\n\nexports.RenderList = RenderList;\nexports.resetOptions = {\n  all: false,\n  processed: false,\n  inputJax: null,\n  outputJax: null\n};\nexports.resetAllOptions = {\n  all: true,\n  processed: true,\n  inputJax: [],\n  outputJax: []\n};\n\nvar DefaultInputJax = function (_super) {\n  __extends(DefaultInputJax, _super);\n\n  function DefaultInputJax() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  DefaultInputJax.prototype.compile = function (_math) {\n    return null;\n  };\n\n  return DefaultInputJax;\n}(InputJax_js_1.AbstractInputJax);\n\nvar DefaultOutputJax = function (_super) {\n  __extends(DefaultOutputJax, _super);\n\n  function DefaultOutputJax() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  DefaultOutputJax.prototype.typeset = function (_math, _document) {\n    if (_document === void 0) {\n      _document = null;\n    }\n\n    return null;\n  };\n\n  DefaultOutputJax.prototype.escaped = function (_math, _document) {\n    return null;\n  };\n\n  return DefaultOutputJax;\n}(OutputJax_js_1.AbstractOutputJax);\n\nvar DefaultMathList = function (_super) {\n  __extends(DefaultMathList, _super);\n\n  function DefaultMathList() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  return DefaultMathList;\n}(MathList_js_1.AbstractMathList);\n\nvar DefaultMathItem = function (_super) {\n  __extends(DefaultMathItem, _super);\n\n  function DefaultMathItem() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  return DefaultMathItem;\n}(MathItem_js_1.AbstractMathItem);\n\nvar AbstractMathDocument = function () {\n  function AbstractMathDocument(document, adaptor, options) {\n    var _this = this;\n\n    var CLASS = this.constructor;\n    this.document = document;\n    this.options = Options_js_1.userOptions(Options_js_1.defaultOptions({}, CLASS.OPTIONS), options);\n    this.math = new (this.options['MathList'] || DefaultMathList)();\n    this.renderActions = RenderList.create(this.options['renderActions']);\n    this.processed = new AbstractMathDocument.ProcessBits();\n    this.outputJax = this.options['OutputJax'] || new DefaultOutputJax();\n    var inputJax = this.options['InputJax'] || [new DefaultInputJax()];\n\n    if (!Array.isArray(inputJax)) {\n      inputJax = [inputJax];\n    }\n\n    this.inputJax = inputJax;\n    this.adaptor = adaptor;\n    this.outputJax.setAdaptor(adaptor);\n    this.inputJax.map(function (jax) {\n      return jax.setAdaptor(adaptor);\n    });\n    this.mmlFactory = this.options['MmlFactory'] || new MmlFactory_js_1.MmlFactory();\n    this.inputJax.map(function (jax) {\n      return jax.setMmlFactory(_this.mmlFactory);\n    });\n    this.outputJax.initialize();\n    this.inputJax.map(function (jax) {\n      return jax.initialize();\n    });\n  }\n\n  Object.defineProperty(AbstractMathDocument.prototype, \"kind\", {\n    get: function () {\n      return this.constructor.KIND;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  AbstractMathDocument.prototype.addRenderAction = function (id) {\n    var action = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      action[_i - 1] = arguments[_i];\n    }\n\n    var _a = __read(RenderList.action(id, action), 2),\n        fn = _a[0],\n        p = _a[1];\n\n    this.renderActions.add(fn, p);\n  };\n\n  AbstractMathDocument.prototype.removeRenderAction = function (id) {\n    var action = this.renderActions.findID(id);\n\n    if (action) {\n      this.renderActions.remove(action);\n    }\n  };\n\n  AbstractMathDocument.prototype.render = function () {\n    this.renderActions.renderDoc(this);\n    return this;\n  };\n\n  AbstractMathDocument.prototype.rerender = function (start) {\n    if (start === void 0) {\n      start = MathItem_js_1.STATE.RERENDER;\n    }\n\n    this.state(start - 1);\n    this.render();\n    return this;\n  };\n\n  AbstractMathDocument.prototype.convert = function (math, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var _a = Options_js_1.userOptions({\n      format: this.inputJax[0].name,\n      display: true,\n      end: MathItem_js_1.STATE.LAST,\n      em: 16,\n      ex: 8,\n      containerWidth: null,\n      lineWidth: 1000000,\n      scale: 1,\n      family: ''\n    }, options),\n        format = _a.format,\n        display = _a.display,\n        end = _a.end,\n        ex = _a.ex,\n        em = _a.em,\n        containerWidth = _a.containerWidth,\n        lineWidth = _a.lineWidth,\n        scale = _a.scale,\n        family = _a.family;\n\n    if (containerWidth === null) {\n      containerWidth = 80 * ex;\n    }\n\n    var jax = this.inputJax.reduce(function (jax, ijax) {\n      return ijax.name === format ? ijax : jax;\n    }, null);\n    var mitem = new this.options.MathItem(math, jax, display);\n    mitem.start.node = this.adaptor.body(this.document);\n    mitem.setMetrics(em, ex, containerWidth, lineWidth, scale);\n\n    if (this.outputJax.options.mtextInheritFont) {\n      mitem.outputData.mtextFamily = family;\n    }\n\n    if (this.outputJax.options.merrorInheritFont) {\n      mitem.outputData.merrorFamily = family;\n    }\n\n    mitem.convert(this, end);\n    return mitem.typesetRoot || mitem.root;\n  };\n\n  AbstractMathDocument.prototype.findMath = function (_options) {\n    if (_options === void 0) {\n      _options = null;\n    }\n\n    this.processed.set('findMath');\n    return this;\n  };\n\n  AbstractMathDocument.prototype.compile = function () {\n    var e_6, _a, e_7, _b;\n\n    if (!this.processed.isSet('compile')) {\n      var recompile = [];\n\n      try {\n        for (var _c = __values(this.math), _d = _c.next(); !_d.done; _d = _c.next()) {\n          var math = _d.value;\n          this.compileMath(math);\n\n          if (math.inputData.recompile !== undefined) {\n            recompile.push(math);\n          }\n        }\n      } catch (e_6_1) {\n        e_6 = {\n          error: e_6_1\n        };\n      } finally {\n        try {\n          if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n        } finally {\n          if (e_6) throw e_6.error;\n        }\n      }\n\n      try {\n        for (var recompile_1 = __values(recompile), recompile_1_1 = recompile_1.next(); !recompile_1_1.done; recompile_1_1 = recompile_1.next()) {\n          var math = recompile_1_1.value;\n          var data = math.inputData.recompile;\n          math.state(data.state);\n          math.inputData.recompile = data;\n          this.compileMath(math);\n        }\n      } catch (e_7_1) {\n        e_7 = {\n          error: e_7_1\n        };\n      } finally {\n        try {\n          if (recompile_1_1 && !recompile_1_1.done && (_b = recompile_1.return)) _b.call(recompile_1);\n        } finally {\n          if (e_7) throw e_7.error;\n        }\n      }\n\n      this.processed.set('compile');\n    }\n\n    return this;\n  };\n\n  AbstractMathDocument.prototype.compileMath = function (math) {\n    try {\n      math.compile(this);\n    } catch (err) {\n      if (err.retry || err.restart) {\n        throw err;\n      }\n\n      this.options['compileError'](this, math, err);\n      math.inputData['error'] = err;\n    }\n  };\n\n  AbstractMathDocument.prototype.compileError = function (math, err) {\n    math.root = this.mmlFactory.create('math', null, [this.mmlFactory.create('merror', {\n      'data-mjx-error': err.message,\n      title: err.message\n    }, [this.mmlFactory.create('mtext', null, [this.mmlFactory.create('text').setText('Math input error')])])]);\n\n    if (math.display) {\n      math.root.attributes.set('display', 'block');\n    }\n\n    math.inputData.error = err.message;\n  };\n\n  AbstractMathDocument.prototype.typeset = function () {\n    var e_8, _a;\n\n    if (!this.processed.isSet('typeset')) {\n      try {\n        for (var _b = __values(this.math), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var math = _c.value;\n\n          try {\n            math.typeset(this);\n          } catch (err) {\n            if (err.retry || err.restart) {\n              throw err;\n            }\n\n            this.options['typesetError'](this, math, err);\n            math.outputData['error'] = err;\n          }\n        }\n      } catch (e_8_1) {\n        e_8 = {\n          error: e_8_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_8) throw e_8.error;\n        }\n      }\n\n      this.processed.set('typeset');\n    }\n\n    return this;\n  };\n\n  AbstractMathDocument.prototype.typesetError = function (math, err) {\n    math.typesetRoot = this.adaptor.node('mjx-container', {\n      class: 'MathJax mjx-output-error',\n      jax: this.outputJax.name\n    }, [this.adaptor.node('span', {\n      'data-mjx-error': err.message,\n      title: err.message,\n      style: {\n        color: 'red',\n        'background-color': 'yellow',\n        'line-height': 'normal'\n      }\n    }, [this.adaptor.text('Math output error')])]);\n\n    if (math.display) {\n      this.adaptor.setAttributes(math.typesetRoot, {\n        style: {\n          display: 'block',\n          margin: '1em 0',\n          'text-align': 'center'\n        }\n      });\n    }\n\n    math.outputData.error = err.message;\n  };\n\n  AbstractMathDocument.prototype.getMetrics = function () {\n    if (!this.processed.isSet('getMetrics')) {\n      this.outputJax.getMetrics(this);\n      this.processed.set('getMetrics');\n    }\n\n    return this;\n  };\n\n  AbstractMathDocument.prototype.updateDocument = function () {\n    var e_9, _a;\n\n    if (!this.processed.isSet('updateDocument')) {\n      try {\n        for (var _b = __values(this.math.reversed()), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var math = _c.value;\n          math.updateDocument(this);\n        }\n      } catch (e_9_1) {\n        e_9 = {\n          error: e_9_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_9) throw e_9.error;\n        }\n      }\n\n      this.processed.set('updateDocument');\n    }\n\n    return this;\n  };\n\n  AbstractMathDocument.prototype.removeFromDocument = function (_restore) {\n    if (_restore === void 0) {\n      _restore = false;\n    }\n\n    return this;\n  };\n\n  AbstractMathDocument.prototype.state = function (state, restore) {\n    var e_10, _a;\n\n    if (restore === void 0) {\n      restore = false;\n    }\n\n    try {\n      for (var _b = __values(this.math), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var math = _c.value;\n        math.state(state, restore);\n      }\n    } catch (e_10_1) {\n      e_10 = {\n        error: e_10_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_10) throw e_10.error;\n      }\n    }\n\n    if (state < MathItem_js_1.STATE.INSERTED) {\n      this.processed.clear('updateDocument');\n    }\n\n    if (state < MathItem_js_1.STATE.TYPESET) {\n      this.processed.clear('typeset');\n      this.processed.clear('getMetrics');\n    }\n\n    if (state < MathItem_js_1.STATE.COMPILED) {\n      this.processed.clear('compile');\n    }\n\n    return this;\n  };\n\n  AbstractMathDocument.prototype.reset = function (options) {\n    var _a;\n\n    if (options === void 0) {\n      options = {\n        processed: true\n      };\n    }\n\n    options = Options_js_1.userOptions(Object.assign({}, exports.resetOptions), options);\n    options.all && Object.assign(options, exports.resetAllOptions);\n    options.processed && this.processed.reset();\n    options.inputJax && this.inputJax.forEach(function (jax) {\n      return jax.reset.apply(jax, __spreadArray([], __read(options.inputJax)));\n    });\n    options.outputJax && (_a = this.outputJax).reset.apply(_a, __spreadArray([], __read(options.outputJax)));\n    return this;\n  };\n\n  AbstractMathDocument.prototype.clear = function () {\n    this.reset();\n    this.math.clear();\n    return this;\n  };\n\n  AbstractMathDocument.prototype.concat = function (list) {\n    this.math.merge(list);\n    return this;\n  };\n\n  AbstractMathDocument.prototype.clearMathItemsWithin = function (containers) {\n    var _a;\n\n    var items = this.getMathItemsWithin(containers);\n\n    (_a = this.math).remove.apply(_a, __spreadArray([], __read(items)));\n\n    return items;\n  };\n\n  AbstractMathDocument.prototype.getMathItemsWithin = function (elements) {\n    var e_11, _a, e_12, _b;\n\n    if (!Array.isArray(elements)) {\n      elements = [elements];\n    }\n\n    var adaptor = this.adaptor;\n    var items = [];\n    var containers = adaptor.getElements(elements, this.document);\n\n    try {\n      ITEMS: for (var _c = __values(this.math), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var item = _d.value;\n\n        try {\n          for (var containers_1 = (e_12 = void 0, __values(containers)), containers_1_1 = containers_1.next(); !containers_1_1.done; containers_1_1 = containers_1.next()) {\n            var container = containers_1_1.value;\n\n            if (item.start.node && adaptor.contains(container, item.start.node)) {\n              items.push(item);\n              continue ITEMS;\n            }\n          }\n        } catch (e_12_1) {\n          e_12 = {\n            error: e_12_1\n          };\n        } finally {\n          try {\n            if (containers_1_1 && !containers_1_1.done && (_b = containers_1.return)) _b.call(containers_1);\n          } finally {\n            if (e_12) throw e_12.error;\n          }\n        }\n      }\n    } catch (e_11_1) {\n      e_11 = {\n        error: e_11_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n      } finally {\n        if (e_11) throw e_11.error;\n      }\n    }\n\n    return items;\n  };\n\n  AbstractMathDocument.KIND = 'MathDocument';\n  AbstractMathDocument.OPTIONS = {\n    OutputJax: null,\n    InputJax: null,\n    MmlFactory: null,\n    MathList: DefaultMathList,\n    MathItem: DefaultMathItem,\n    compileError: function (doc, math, err) {\n      doc.compileError(math, err);\n    },\n    typesetError: function (doc, math, err) {\n      doc.typesetError(math, err);\n    },\n    renderActions: Options_js_1.expandable({\n      find: [MathItem_js_1.STATE.FINDMATH, 'findMath', '', false],\n      compile: [MathItem_js_1.STATE.COMPILED],\n      metrics: [MathItem_js_1.STATE.METRICS, 'getMetrics', '', false],\n      typeset: [MathItem_js_1.STATE.TYPESET],\n      update: [MathItem_js_1.STATE.INSERTED, 'updateDocument', false]\n    })\n  };\n  AbstractMathDocument.ProcessBits = BitField_js_1.BitFieldClass('findMath', 'compile', 'getMetrics', 'typeset', 'updateDocument');\n  return AbstractMathDocument;\n}();\n\nexports.AbstractMathDocument = AbstractMathDocument;","map":{"version":3,"mappings":"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","names":["__extends","RenderList","actions","list","keys","_c","id","action","priority","add","renderDoc","renderMath","convert","length","_a","methodActions","slice","method1","method2","_b","_d","document","math","start","MathItem_js_1","UNPROCESSED","items","item","end","LAST","PrioritizedList_js_1","exports","all","processed","inputJax","outputJax","DefaultInputJax","_math","InputJax_js_1","DefaultOutputJax","_document","OutputJax_js_1","MathList_js_1","adaptor","options","CLASS","constructor","Options_js_1","OPTIONS","DefaultMathList","renderActions","create","AbstractMathDocument","ProcessBits","Array","isArray","setAdaptor","map","mmlFactory","MmlFactory_js_1","setMmlFactory","_this","initialize","Object","KIND","fn","p","findID","remove","RERENDER","state","render","format","name","display","em","ex","containerWidth","lineWidth","scale","family","jax","reduce","ijax","mitem","MathItem","node","body","setMetrics","mtextInheritFont","outputData","mtextFamily","merrorInheritFont","merrorFamily","typesetRoot","root","_options","set","isSet","recompile","compileMath","inputData","undefined","push","recompile_1_1","data","compile","err","retry","restart","message","title","setText","attributes","error","typeset","class","style","color","text","setAttributes","margin","getMetrics","reversed","updateDocument","_restore","restore","INSERTED","clear","TYPESET","COMPILED","assign","reset","forEach","apply","__spreadArray","merge","containers","getMathItemsWithin","elements","getElements","ITEMS","containers_1_1","container","contains","OutputJax","InputJax","MmlFactory","MathList","DefaultMathItem","compileError","doc","typesetError","find","FINDMATH","metrics","METRICS","update","BitField_js_1"],"sources":["/home/kinzoku99/Desktop/ProjectIO/frontend/node_modules/mathjax-full/ts/core/MathDocument.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the interface and abstract class for MathDocument objects\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {userOptions, defaultOptions, OptionList, expandable} from '../util/Options.js';\nimport {InputJax, AbstractInputJax} from './InputJax.js';\nimport {OutputJax, AbstractOutputJax} from './OutputJax.js';\nimport {MathList, AbstractMathList} from './MathList.js';\nimport {MathItem, AbstractMathItem, STATE} from './MathItem.js';\nimport {MmlNode, TextNode} from './MmlTree/MmlNode.js';\nimport {MmlFactory} from '../core/MmlTree/MmlFactory.js';\nimport {DOMAdaptor} from '../core/DOMAdaptor.js';\nimport {BitField, BitFieldClass} from '../util/BitField.js';\n\nimport {PrioritizedList} from '../util/PrioritizedList.js';\n\n/*****************************************************************/\n\n/**\n * A function to call while rendering a document (usually calls a MathDocument method)\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport type RenderDoc<N, T, D> = (document: MathDocument<N, T, D>) => boolean;\n\n/**\n * A function to call while rendering a MathItem (usually calls one of its methods)\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport type RenderMath<N, T, D> = (math: MathItem<N, T, D>, document: MathDocument<N, T, D>) => boolean;\n\n/**\n * The data for an action to perform during rendering or conversion\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport type RenderData<N, T, D> = {\n  id: string,                           //  The name for the action\n  renderDoc: RenderDoc<N, T, D>,        //  The action to take during a render() call\n  renderMath: RenderMath<N, T, D>,      //  The action to take during a rerender() or convert() call\n  convert: boolean                      //  Whether the action is to be used during convert()\n};\n\n/**\n * The data used to define a render action in configurations and options objects\n *   (the key is used as the id, the number in the data below is the priority, and\n *    the remainind data is as described below; if no boolean is given, convert = true\n *    by default)\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport type RenderAction<N, T, D> =\n  [number] |                                                     // id (i.e., key) is method name to use\n  [number, string] |                                             // string is method to call\n  [number, string, string] |                                     // the strings are methods names for doc and math\n  [number, RenderDoc<N, T, D>, RenderMath<N, T, D>] |            // explicit functions for doc and math\n  [number, boolean] |                                            // same as first above, with boolean for convert\n  [number, string, boolean] |                                    // same as second above, with boolean for convert\n  [number, string, string, boolean] |                            // same as third above, with boolean for convert\n  [number, RenderDoc<N, T, D>, RenderMath<N, T, D>, boolean];    // same as forth above, with boolean for convert\n\n/**\n * An object representing a collection of rendering actions (id's tied to priority-and-method data)\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport type RenderActions<N, T, D> = {[id: string]: RenderAction<N, T, D>};\n\n/**\n * Implements a prioritized list of render actions.  Extensions can add actions to the list\n *   to make it easy to extend the normal typesetting and conversion operations.\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport class RenderList<N, T, D> extends PrioritizedList<RenderData<N, T, D>> {\n\n  /**\n   * Creates a new RenderList from an initial list of rendering actions\n   *\n   * @param {RenderActions} actions The list of actions to take during render(), rerender(), and convert() calls\n   * @returns {RenderList}    The newly created prioritied list\n   */\n  public static create<N, T, D>(actions: RenderActions<N, T, D>): RenderList<N, T, D> {\n    const list = new this<N, T, D>();\n    for (const id of Object.keys(actions)) {\n      const [action, priority] = this.action<N, T, D>(id, actions[id]);\n      if (priority) {\n        list.add(action, priority);\n      }\n    }\n    return list;\n  }\n\n  /**\n   * Parses a RenderAction to produce the correspinding RenderData item\n   *  (e.g., turn method names into actual functions that call the method)\n   *\n   * @param {string} id               The id of the action\n   * @param {RenderAction} action     The RenderAction defining the action\n   * @returns {[RenderData,number]}   The corresponding RenderData definition for the action and its priority\n   */\n  public static action<N, T, D>(id: string, action: RenderAction<N, T, D>): [RenderData<N, T, D>, number] {\n    let renderDoc, renderMath;\n    let convert = true;\n    let priority = action[0];\n    if (action.length === 1 || typeof action[1] === 'boolean') {\n      action.length === 2 && (convert = action[1] as boolean);\n      [renderDoc, renderMath] = this.methodActions(id);\n    } else if (typeof action[1] === 'string') {\n      if (typeof action[2] === 'string') {\n        action.length === 4 && (convert = action[3] as boolean);\n        const [method1, method2] = action.slice(1) as [string, string];\n        [renderDoc, renderMath] = this.methodActions(method1, method2);\n      } else {\n        action.length === 3 && (convert = action[2] as boolean);\n        [renderDoc, renderMath] = this.methodActions(action[1] as string);\n      }\n    } else {\n      action.length === 4 && (convert = action[3] as boolean);\n      [renderDoc, renderMath] = action.slice(1) as [RenderDoc<N, T, D>, RenderMath<N, T, D>];\n    }\n    return [{id, renderDoc, renderMath, convert} as RenderData<N, T, D>, priority];\n  }\n\n  /**\n   * Produces the doc and math actions for the given method name(s)\n   *   (a blank name is a no-op)\n   *\n   * @param {string} method1    The method to use for the render() call\n   * @param {string} method1    The method to use for the rerender() and convert() calls\n   */\n  protected static methodActions(method1: string, method2: string = method1) {\n    return [\n      (document: any) => {method1 && document[method1](); return false; },\n      (math: any, document: any) => {method2 && math[method2](document); return false; }\n    ];\n  }\n\n  /**\n   * Perform the document-level rendering functions\n   *\n   * @param {MathDocument} document   The MathDocument whose methods are to be called\n   * @param {number=} start           The state at which to start rendering (default is UNPROCESSED)\n   */\n  public renderDoc(document: MathDocument<N, T, D>, start: number = STATE.UNPROCESSED) {\n    for (const item of this.items) {\n      if (item.priority >= start) {\n        if (item.item.renderDoc(document)) return;\n      }\n    }\n  }\n\n  /**\n   * Perform the MathItem-level rendering functions\n   *\n   * @param {MathItem} math           The MathItem whose methods are to be called\n   * @param {MathDocument} document   The MathDocument to pass to the MathItem methods\n   * @param {number=} start           The state at which to start rendering (default is UNPROCESSED)\n   */\n  public renderMath(math: MathItem<N, T, D>, document: MathDocument<N, T, D>, start: number = STATE.UNPROCESSED) {\n    for (const item of this.items) {\n      if (item.priority >= start) {\n        if (item.item.renderMath(math, document)) return;\n      }\n    }\n  }\n\n  /**\n   * Perform the MathItem-level conversion functions\n   *\n   * @param {MathItem} math           The MathItem whose methods are to be called\n   * @param {MathDocument} document   The MathDocument to pass to the MathItem methods\n   * @param {number=} end             The state at which to end rendering (default is LAST)\n   */\n  public renderConvert(math: MathItem<N, T, D>, document: MathDocument<N, T, D>, end: number = STATE.LAST) {\n    for (const item of this.items) {\n      if (item.priority > end) return;\n      if (item.item.convert) {\n        if (item.item.renderMath(math, document)) return;\n      }\n    }\n  }\n\n  /**\n   * Find an entry in the list with a given ID\n   *\n   * @param {string} id            The id to search for\n   * @returns {RenderData|null}   The data for the given id, if found, or null\n   */\n  public findID(id: string): RenderData<N, T, D> | null {\n    for (const item of this.items) {\n      if (item.item.id === id) {\n        return item.item;\n      }\n    }\n    return null;\n  }\n\n}\n\n/*****************************************************************/\n\n/**\n * The ways of specifying a container (a selector string, an actual node,\n * or an array of those (e.g., the result of document.getElementsByTagName())\n *\n * @template N  The HTMLElement node class\n */\nexport type ContainerList<N> = string | N | (string | N | N[])[];\n\n/**\n * The options allowed for the reset() method\n */\nexport type ResetList = {\n  all?: boolean,\n  processed?: boolean,\n  inputJax?: any[],\n  outputJax?: any[]\n};\n\n/**\n * The default option list for the reset() method\n */\nexport const resetOptions: ResetList = {\n  all: false,\n  processed: false,\n  inputJax: null,\n  outputJax: null\n};\n\n/**\n * The option list for when all options are to be reset\n */\nexport const resetAllOptions: ResetList = {\n  all: true,\n  processed: true,\n  inputJax: [],\n  outputJax: []\n};\n\n/*****************************************************************/\n/**\n *  The MathDocument interface\n *\n *  The MathDocument is created by MathJax.Document() and holds the\n *  document, the math found in it, and so on.  The methods of the\n *  MathDocument all return the MathDocument itself, so you can\n *  chain the method calls.  E.g.,\n *\n *    const html = MathJax.Document('<html>...</html>');\n *    html.findMath()\n *        .compile()\n *        .getMetrics()\n *        .typeset()\n *        .updateDocument();\n *\n *  The MathDocument is the main interface for page authors to\n *  interact with MathJax.\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport interface MathDocument<N, T, D> {\n  /**\n   * The document being processed (e.g., DOM document, or Markdown string)\n   */\n  document: D;\n\n  /**\n   * The kind of MathDocument (e.g., \"HTML\")\n   */\n  kind: string;\n\n  /**\n   * The options for the document\n   */\n  options: OptionList;\n\n  /**\n   * The list of MathItems found in this page\n   */\n  math: MathList<N, T, D>;\n\n  /**\n   * The list of actions to take during a render() or convert() call\n   */\n  renderActions: RenderList<N, T, D>;\n\n  /**\n   * This object tracks what operations have been performed, so that (when\n   *  asynchronous operations are used), the ones that have already been\n   *  completed won't be performed again.\n   */\n  processed: BitField;\n\n  /**\n   * An array of input jax to run on the document\n   */\n  inputJax: InputJax<N, T, D>[];\n\n  /**\n   * The output jax to use for the document\n   */\n  outputJax: OutputJax<N, T, D>;\n\n  /**\n   * The DOM adaptor to use for input and output\n   */\n  adaptor: DOMAdaptor<N, T, D>;\n\n  /**\n   * The MmlFactory to be used for input jax and error processing\n   */\n  mmlFactory: MmlFactory;\n\n  /**\n   * @param {string} id      The id of the action to add\n   * @param {any[]} action   The RenderAction to take\n   */\n  addRenderAction(id: string, ...action: any[]): void;\n\n  /**\n   * @param {string} id   The id of the action to remove\n   */\n  removeRenderAction(id: string): void;\n\n  /**\n   * Perform the renderActions on the document\n   */\n  render(): MathDocument<N, T, D>;\n\n  /**\n   * Rerender the MathItems on the page\n   *\n   * @param {number=} start    The state to start rerendering at\n   * @return {MathDocument}    The math document instance\n   */\n  rerender(start?: number): MathDocument<N, T, D>;\n\n  /**\n   * Convert a math string to the document's output format\n   *\n   * @param {string} math           The math string to convert\n   * @params {OptionList} options   The options for the conversion (e.g., format, ex, em, etc.)\n   * @return {MmlNode|N}            The MmlNode or N node for the converted content\n   */\n  convert(math: string, options?: OptionList): MmlNode | N;\n\n  /**\n   * Locates the math in the document and constructs the MathList\n   *  for the document.\n   *\n   * @param {OptionList} options  The options for locating the math\n   * @return {MathDocument}       The math document instance\n   */\n  findMath(options?: OptionList): MathDocument<N, T, D>;\n\n  /**\n   * Calls the input jax to process the MathItems in the MathList\n   *\n   * @return {MathDocument}  The math document instance\n   */\n  compile(): MathDocument<N, T, D>;\n\n  /**\n   * Gets the metric information for the MathItems\n   *\n   * @return {MathDocument}  The math document instance\n   */\n  getMetrics(): MathDocument<N, T, D>;\n\n  /**\n   * Calls the output jax to process the compiled math in the MathList\n   *\n   * @return {MathDocument}  The math document instance\n   */\n  typeset(): MathDocument<N, T, D>;\n\n  /**\n   * Updates the document to include the typeset math\n   *\n   * @return {MathDocument}  The math document instance\n   */\n  updateDocument(): MathDocument<N, T, D>;\n\n  /**\n   * Removes the typeset math from the document\n   *\n   * @param {boolean} restore  True if the original math should be put\n   *                            back into the document as well\n   * @return {MathDocument}    The math document instance\n   */\n  removeFromDocument(restore?: boolean): MathDocument<N, T, D>;\n\n  /**\n   * Set the state of the document (allowing you to roll back\n   *  the state to a previous one, if needed).\n   *\n   * @param {number} state     The new state of the document\n   * @param {boolean} restore  True if the original math should be put\n   *                            back into the document during the rollback\n   * @return {MathDocument}    The math document instance\n   */\n  state(state: number, restore?: boolean): MathDocument<N, T, D>;\n\n  /**\n   * Rerender the MathItems on the page\n   *\n   * @param {number=} start    The state to start rerendering at\n   * @param {number=} end      The state to end rerendering at\n   * @return {MathDocument}    The math document instance\n   */\n  rerender(start?: number, end?: number): MathDocument<N, T, D>;\n\n  /**\n   * Clear the processed values so that the document can be reprocessed\n   *\n   * @param {ResetList} options   The things to be reset\n   * @return {MathDocument}       The math document instance\n   */\n  reset(options?: ResetList): MathDocument<N, T, D>;\n\n  /**\n   * Reset the processed values and clear the MathList (so that new math\n   * can be processed in the document).\n   *\n   * @return {MathDocument}  The math document instance\n   */\n  clear(): MathDocument<N, T, D>;\n\n  /**\n   * Merges a MathList into the list for this document.\n   *\n   * @param {MathList} list   The MathList to be merged into this document's list\n   * @return {MathDocument}   The math document instance\n   */\n  concat(list: MathList<N, T, D>): MathDocument<N, T, D>;\n\n  /**\n   * Clear the typeset MathItems that are within the given container\n   *   from the document's MathList.  (E.g., when the content of the\n   *   container has been updated and you want to remove the\n   *   associated MathItems)\n   *\n   * @param {ContainerList<N>} elements   The container DOM elements whose math items are to be removed\n   * @return {MathItem<N,T,D>[]}          The removed MathItems\n   */\n  clearMathItemsWithin(containers: ContainerList<N>): MathItem<N, T, D>[];\n\n  /**\n   * Get the typeset MathItems that are within a given container.\n   *\n   * @param {ContainerList<N>} elements   The container DOM elements whose math items are to be found\n   * @return {MathItem<N,T,D>[]}          The list of MathItems within that container\n   */\n  getMathItemsWithin(elements: ContainerList<N>): MathItem<N, T, D>[];\n\n}\n\n/*****************************************************************/\n\n/**\n * Defaults used when input jax isn't specified\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nclass DefaultInputJax<N, T, D> extends AbstractInputJax<N, T, D> {\n  /**\n   * @override\n   */\n  public compile(_math: MathItem<N, T, D>) {\n    return null as MmlNode;\n  }\n}\n\n/**\n * Defaults used when ouput jax isn't specified\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nclass DefaultOutputJax<N, T, D> extends AbstractOutputJax<N, T, D> {\n  /**\n   * @override\n   */\n  public typeset(_math: MathItem<N, T, D>, _document: MathDocument<N, T, D> = null) {\n    return null as N;\n  }\n  /**\n   * @override\n   */\n  public escaped(_math: MathItem<N, T, D>, _document?: MathDocument<N, T, D>) {\n    return null as N;\n  }\n}\n\n/**\n * Default for the MathList when one isn't specified\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nclass DefaultMathList<N, T, D> extends AbstractMathList<N, T, D> {}\n\n/**\n * Default for the Mathitem when one isn't specified\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nclass DefaultMathItem<N, T, D> extends AbstractMathItem<N, T, D> {}\n\n/*****************************************************************/\n/**\n *  Implements the abstract MathDocument class\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport abstract class AbstractMathDocument<N, T, D> implements MathDocument<N, T, D> {\n\n  /**\n   * The type of MathDocument\n   */\n  public static KIND: string = 'MathDocument';\n\n  /**\n   * The default options for the document\n   */\n  public static OPTIONS: OptionList = {\n    OutputJax: null,           // instance of an OutputJax for the document\n    InputJax: null,            // instance of an InputJax or an array of them\n    MmlFactory: null,          // instance of a MmlFactory for this document\n    MathList: DefaultMathList, // constructor for a MathList to use for the document\n    MathItem: DefaultMathItem, // constructor for a MathItem to use for the MathList\n    compileError: (doc: AbstractMathDocument<any, any, any>, math: MathItem<any, any, any>, err: Error) => {\n      doc.compileError(math, err);\n    },\n    typesetError: (doc: AbstractMathDocument<any, any, any>, math: MathItem<any, any, any>, err: Error) => {\n      doc.typesetError(math, err);\n    },\n    renderActions: expandable({\n      find:    [STATE.FINDMATH, 'findMath', '', false],\n      compile: [STATE.COMPILED],\n      metrics: [STATE.METRICS, 'getMetrics', '', false],\n      typeset: [STATE.TYPESET],\n      update:  [STATE.INSERTED, 'updateDocument', false]\n    }) as RenderActions<any, any, any>\n  };\n\n  /**\n   * A bit-field for the actions that have been processed\n   */\n  public static ProcessBits = BitFieldClass('findMath', 'compile', 'getMetrics', 'typeset', 'updateDocument');\n\n  /**\n   * The document managed by this MathDocument\n   */\n  public document: D;\n  /**\n   * The actual options for this document (with user-supplied ones merged in)\n   */\n  public options: OptionList;\n\n  /**\n   * The list of MathItems for this document\n   */\n  public math: MathList<N, T, D>;\n\n  /**\n   * The list of render actions\n   */\n  public renderActions: RenderList<N, T, D>;\n\n  /**\n   * The bit-field used to tell what steps have been taken on the document (for retries)\n   */\n  public processed: BitField;\n\n  /**\n   * The list of input jax for the document\n   */\n  public inputJax: InputJax<N, T, D>[];\n\n  /**\n   * The output jax for the document\n   */\n  public outputJax: OutputJax<N, T, D>;\n\n  /**\n   * The DOM adaptor for the document\n   */\n  public adaptor: DOMAdaptor<N, T, D>;\n\n  /**\n   * The MathML node factory for the internal MathML representation\n   */\n  public mmlFactory: MmlFactory;\n\n\n  /**\n   * @param {any} document           The document (HTML string, parsed DOM, etc.) to be processed\n   * @param {DOMAdaptor} adaptor     The DOM adaptor for this document\n   * @param {OptionList} options     The options for this document\n   * @constructor\n   */\n  constructor (document: D, adaptor: DOMAdaptor<N, T, D>, options: OptionList) {\n    let CLASS = this.constructor as typeof AbstractMathDocument;\n    this.document = document;\n    this.options = userOptions(defaultOptions({}, CLASS.OPTIONS), options);\n    this.math = new (this.options['MathList'] || DefaultMathList)();\n    this.renderActions = RenderList.create<N, T, D>(this.options['renderActions']);\n    this.processed = new AbstractMathDocument.ProcessBits();\n    this.outputJax = this.options['OutputJax'] || new DefaultOutputJax<N, T, D>();\n    let inputJax = this.options['InputJax'] || [new DefaultInputJax<N, T, D>()];\n    if (!Array.isArray(inputJax)) {\n      inputJax = [inputJax];\n    }\n    this.inputJax = inputJax;\n    //\n    // Pass the DOM adaptor to the jax\n    //\n    this.adaptor = adaptor;\n    this.outputJax.setAdaptor(adaptor);\n    this.inputJax.map(jax => jax.setAdaptor(adaptor));\n    //\n    // Pass the MmlFactory to the jax\n    //\n    this.mmlFactory = this.options['MmlFactory'] || new MmlFactory();\n    this.inputJax.map(jax => jax.setMmlFactory(this.mmlFactory));\n    //\n    // Do any initialization that requires adaptors or factories\n    //\n    this.outputJax.initialize();\n    this.inputJax.map(jax => jax.initialize());\n  }\n\n  /**\n   * @return {string}  The kind of document\n   */\n  public get kind(): string {\n    return (this.constructor as typeof AbstractMathDocument).KIND;\n  }\n\n  /**\n   * @override\n   */\n  public addRenderAction(id: string, ...action: any[]) {\n    const [fn, p] = RenderList.action<N, T, D>(id, action as RenderAction<N, T, D>);\n    this.renderActions.add(fn, p);\n  }\n\n  /**\n   * @override\n   */\n  public removeRenderAction(id: string) {\n    const action = this.renderActions.findID(id);\n    if (action) {\n      this.renderActions.remove(action);\n    }\n  }\n\n  /**\n   * @override\n   */\n  public render() {\n    this.renderActions.renderDoc(this);\n    return this;\n  }\n\n  /**\n   * @override\n   */\n  public rerender(start: number = STATE.RERENDER) {\n    this.state(start - 1);\n    this.render();\n    return this;\n  }\n\n  /**\n   * @override\n   */\n  public convert(math: string, options: OptionList = {}) {\n    let {format, display, end, ex, em, containerWidth, lineWidth, scale, family} = userOptions({\n      format: this.inputJax[0].name, display: true, end: STATE.LAST,\n      em: 16, ex: 8, containerWidth: null, lineWidth: 1000000, scale: 1, family: ''\n    }, options);\n    if (containerWidth === null) {\n      containerWidth = 80 * ex;\n    }\n    const jax = this.inputJax.reduce((jax, ijax) => (ijax.name === format ? ijax : jax), null);\n    const mitem = new this.options.MathItem(math, jax, display);\n    mitem.start.node = this.adaptor.body(this.document);\n    mitem.setMetrics(em, ex, containerWidth, lineWidth, scale);\n    if (this.outputJax.options.mtextInheritFont) {\n      mitem.outputData.mtextFamily = family;\n    }\n    if (this.outputJax.options.merrorInheritFont) {\n      mitem.outputData.merrorFamily = family;\n    }\n    mitem.convert(this, end);\n    return (mitem.typesetRoot || mitem.root);\n  }\n\n  /**\n   * @override\n   */\n  public findMath(_options: OptionList = null) {\n    this.processed.set('findMath');\n    return this;\n  }\n\n  /**\n   * @override\n   */\n  public compile() {\n    if (!this.processed.isSet('compile')) {\n      //\n      //  Compile all the math in the list\n      //\n      const recompile = [];\n      for (const math of this.math) {\n        this.compileMath(math);\n        if (math.inputData.recompile !== undefined) {\n          recompile.push(math);\n        }\n      }\n      //\n      //  If any were added to the recompile list,\n      //    compile them again\n      //\n      for (const math of recompile) {\n        const data = math.inputData.recompile;\n        math.state(data.state);\n        math.inputData.recompile = data;\n        this.compileMath(math);\n      }\n      this.processed.set('compile');\n    }\n    return this;\n  }\n\n  /**\n   * @param {MathItem} math   The item to compile\n   */\n  protected compileMath(math: MathItem<N, T, D>) {\n    try {\n      math.compile(this);\n    } catch (err) {\n      if (err.retry || err.restart) {\n        throw err;\n      }\n      this.options['compileError'](this, math, err);\n      math.inputData['error'] = err;\n    }\n  }\n\n  /**\n   * Produce an error using MmlNodes\n   *\n   * @param {MathItem} math  The MathItem producing the error\n   * @param {Error} err      The Error object for the error\n   */\n  public compileError(math: MathItem<N, T, D>, err: Error) {\n    math.root = this.mmlFactory.create('math', null, [\n      this.mmlFactory.create('merror', {'data-mjx-error': err.message, title: err.message}, [\n        this.mmlFactory.create('mtext', null, [\n          (this.mmlFactory.create('text') as TextNode).setText('Math input error')\n        ])\n      ])\n    ]);\n    if (math.display) {\n      math.root.attributes.set('display', 'block');\n    }\n    math.inputData.error = err.message;\n  }\n\n  /**\n   * @override\n   */\n  public typeset() {\n    if (!this.processed.isSet('typeset')) {\n      for (const math of this.math) {\n        try {\n          math.typeset(this);\n        } catch (err) {\n          if (err.retry || err.restart) {\n            throw err;\n          }\n          this.options['typesetError'](this, math, err);\n          math.outputData['error'] = err;\n        }\n      }\n      this.processed.set('typeset');\n    }\n    return this;\n  }\n\n  /**\n   * Produce an error using HTML\n   *\n   * @param {MathItem} math  The MathItem producing the error\n   * @param {Error} err      The Error object for the error\n   */\n  public typesetError(math: MathItem<N, T, D>, err: Error) {\n    math.typesetRoot = this.adaptor.node('mjx-container', {\n      class: 'MathJax mjx-output-error',\n      jax: this.outputJax.name,\n    }, [\n      this.adaptor.node('span', {\n        'data-mjx-error': err.message,\n        title: err.message,\n        style: {\n          color: 'red',\n          'background-color': 'yellow',\n          'line-height': 'normal'\n        }\n      }, [\n        this.adaptor.text('Math output error')\n      ])\n    ]);\n    if (math.display) {\n      this.adaptor.setAttributes(math.typesetRoot, {\n        style: {\n          display: 'block',\n          margin: '1em 0',\n          'text-align': 'center'\n        }\n      });\n    }\n    math.outputData.error = err.message;\n  }\n\n  /**\n   * @override\n   */\n  public getMetrics() {\n    if (!this.processed.isSet('getMetrics')) {\n      this.outputJax.getMetrics(this);\n      this.processed.set('getMetrics');\n    }\n    return this;\n  }\n\n  /**\n   * @override\n   */\n  public updateDocument() {\n    if (!this.processed.isSet('updateDocument')) {\n      for (const math of this.math.reversed()) {\n        math.updateDocument(this);\n      }\n      this.processed.set('updateDocument');\n    }\n    return this;\n  }\n\n  /**\n   * @override\n   */\n  public removeFromDocument(_restore: boolean = false) {\n    return this;\n  }\n\n  /**\n   * @override\n   */\n  public state(state: number, restore: boolean = false) {\n    for (const math of this.math) {\n      math.state(state, restore);\n    }\n    if (state < STATE.INSERTED) {\n      this.processed.clear('updateDocument');\n    }\n    if (state < STATE.TYPESET) {\n      this.processed.clear('typeset');\n      this.processed.clear('getMetrics');\n    }\n    if (state < STATE.COMPILED) {\n      this.processed.clear('compile');\n    }\n    return this;\n  }\n\n  /**\n   * @override\n   */\n  public reset(options: ResetList = {processed: true}) {\n    options = userOptions(Object.assign({}, resetOptions), options);\n    options.all && Object.assign(options, resetAllOptions);\n    options.processed && this.processed.reset();\n    options.inputJax && this.inputJax.forEach(jax => jax.reset(...options.inputJax));\n    options.outputJax && this.outputJax.reset(...options.outputJax);\n    return this;\n  }\n\n  /**\n   * @override\n   */\n  public clear() {\n    this.reset();\n    this.math.clear();\n    return this;\n  }\n\n  /**\n   * @override\n   */\n  public concat(list: MathList<N, T, D>) {\n    this.math.merge(list);\n    return this;\n  }\n\n  /**\n   * @override\n   */\n  public clearMathItemsWithin(containers: ContainerList<N>) {\n    const items = this.getMathItemsWithin(containers);\n    this.math.remove(...items);\n    return items;\n  }\n\n  /**\n   * @override\n   */\n  public getMathItemsWithin(elements: ContainerList<N>) {\n    if (!Array.isArray(elements)) {\n      elements = [elements];\n    }\n    const adaptor = this.adaptor;\n    const items = [] as MathItem<N, T, D>[];\n    const containers = adaptor.getElements(elements, this.document);\n    ITEMS:\n    for (const item of this.math) {\n      for (const container of containers) {\n        if (item.start.node && adaptor.contains(container, item.start.node)) {\n          items.push(item);\n          continue ITEMS;\n        }\n      }\n    }\n    return items;\n  }\n\n}\n\n/**\n * The constructor type for a MathDocument\n *\n * @template D    The MathDocument type this constructor is for\n */\nexport interface MathDocumentConstructor<D extends MathDocument<any, any, any>> {\n  KIND: string;\n  OPTIONS: OptionList;\n  ProcessBits: typeof BitField;\n  new (...args: any[]): D;\n}\n"]},"metadata":{},"sourceType":"script"}