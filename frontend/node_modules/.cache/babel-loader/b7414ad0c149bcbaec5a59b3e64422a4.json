{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n  return to;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SVGmtable = void 0;\n\nvar Wrapper_js_1 = require(\"../Wrapper.js\");\n\nvar mtable_js_1 = require(\"../../common/Wrappers/mtable.js\");\n\nvar mtable_js_2 = require(\"../../../core/MmlTree/MmlNodes/mtable.js\");\n\nvar CLASSPREFIX = 'mjx-';\n\nvar SVGmtable = function (_super) {\n  __extends(SVGmtable, _super);\n\n  function SVGmtable(factory, node, parent) {\n    if (parent === void 0) {\n      parent = null;\n    }\n\n    var _this = _super.call(this, factory, node, parent) || this;\n\n    var def = {\n      'data-labels': true\n    };\n\n    if (_this.isTop) {\n      def.transform = 'matrix(1 0 0 -1 0 0)';\n    }\n\n    _this.labels = _this.svg('g', def);\n    return _this;\n  }\n\n  SVGmtable.prototype.toSVG = function (parent) {\n    var svg = this.standardSVGnode(parent);\n    this.placeRows(svg);\n    this.handleColumnLines(svg);\n    this.handleRowLines(svg);\n    this.handleFrame(svg);\n    var dx = this.handlePWidth(svg);\n    this.handleLabels(svg, parent, dx);\n  };\n\n  SVGmtable.prototype.placeRows = function (svg) {\n    var _a, _b, _c;\n\n    var equal = this.node.attributes.get('equalrows');\n\n    var _d = this.getTableData(),\n        H = _d.H,\n        D = _d.D;\n\n    var HD = this.getEqualRowHeight();\n    var rSpace = this.getRowHalfSpacing();\n\n    var rLines = __spreadArray(__spreadArray([this.fLine], __read(this.rLines)), [this.fLine]);\n\n    var y = this.getBBox().h - rLines[0];\n\n    for (var i = 0; i < this.numRows; i++) {\n      var row = this.childNodes[i];\n      _a = __read(this.getRowHD(equal, HD, H[i], D[i]), 2), row.H = _a[0], row.D = _a[1];\n      _b = __read([rSpace[i], rSpace[i + 1]], 2), row.tSpace = _b[0], row.bSpace = _b[1];\n      _c = __read([rLines[i], rLines[i + 1]], 2), row.tLine = _c[0], row.bLine = _c[1];\n      row.toSVG(svg);\n      row.place(0, y - rSpace[i] - row.H);\n      y -= rSpace[i] + row.H + row.D + rSpace[i + 1] + rLines[i + 1];\n    }\n  };\n\n  SVGmtable.prototype.getRowHD = function (equal, HD, H, D) {\n    return equal ? [(HD + H - D) / 2, (HD - H + D) / 2] : [H, D];\n  };\n\n  SVGmtable.prototype.handleColor = function () {\n    _super.prototype.handleColor.call(this);\n\n    var rect = this.firstChild();\n\n    if (rect) {\n      this.adaptor.setAttribute(rect, 'width', this.fixed(this.getWidth()));\n    }\n  };\n\n  SVGmtable.prototype.handleColumnLines = function (svg) {\n    if (this.node.attributes.get('columnlines') === 'none') return;\n    var lines = this.getColumnAttributes('columnlines');\n    if (!lines) return;\n    var cSpace = this.getColumnHalfSpacing();\n    var cLines = this.cLines;\n    var cWidth = this.getComputedWidths();\n    var x = this.fLine;\n\n    for (var i = 0; i < lines.length; i++) {\n      x += cSpace[i] + cWidth[i] + cSpace[i + 1];\n\n      if (lines[i] !== 'none') {\n        this.adaptor.append(svg, this.makeVLine(x, lines[i], cLines[i]));\n      }\n\n      x += cLines[i];\n    }\n  };\n\n  SVGmtable.prototype.handleRowLines = function (svg) {\n    if (this.node.attributes.get('rowlines') === 'none') return;\n    var lines = this.getRowAttributes('rowlines');\n    if (!lines) return;\n    var equal = this.node.attributes.get('equalrows');\n\n    var _a = this.getTableData(),\n        H = _a.H,\n        D = _a.D;\n\n    var HD = this.getEqualRowHeight();\n    var rSpace = this.getRowHalfSpacing();\n    var rLines = this.rLines;\n    var y = this.getBBox().h - this.fLine;\n\n    for (var i = 0; i < lines.length; i++) {\n      var _b = __read(this.getRowHD(equal, HD, H[i], D[i]), 2),\n          rH = _b[0],\n          rD = _b[1];\n\n      y -= rSpace[i] + rH + rD + rSpace[i + 1];\n\n      if (lines[i] !== 'none') {\n        this.adaptor.append(svg, this.makeHLine(y, lines[i], rLines[i]));\n      }\n\n      y -= rLines[i];\n    }\n  };\n\n  SVGmtable.prototype.handleFrame = function (svg) {\n    if (this.frame && this.fLine) {\n      var _a = this.getBBox(),\n          h = _a.h,\n          d = _a.d,\n          w = _a.w;\n\n      var style = this.node.attributes.get('frame');\n      this.adaptor.append(svg, this.makeFrame(w, h, d, style));\n    }\n  };\n\n  SVGmtable.prototype.handlePWidth = function (svg) {\n    if (!this.pWidth) {\n      return 0;\n    }\n\n    var _a = this.getBBox(),\n        w = _a.w,\n        L = _a.L,\n        R = _a.R;\n\n    var W = L + this.pWidth + R;\n    var align = this.getAlignShift()[0];\n    var CW = Math.max(this.isTop ? W : 0, this.container.getWrapWidth(this.containerI)) - L - R;\n    var dw = w - (this.pWidth > CW ? CW : this.pWidth);\n    var dx = align === 'left' ? 0 : align === 'right' ? dw : dw / 2;\n\n    if (dx) {\n      var table = this.svg('g', {}, this.adaptor.childNodes(svg));\n      this.place(dx, 0, table);\n      this.adaptor.append(svg, table);\n    }\n\n    return dx;\n  };\n\n  SVGmtable.prototype.lineClass = function (style) {\n    return CLASSPREFIX + style;\n  };\n\n  SVGmtable.prototype.makeFrame = function (w, h, d, style) {\n    var t = this.fLine;\n    return this.svg('rect', this.setLineThickness(t, style, {\n      'data-frame': true,\n      'class': this.lineClass(style),\n      width: this.fixed(w - t),\n      height: this.fixed(h + d - t),\n      x: this.fixed(t / 2),\n      y: this.fixed(t / 2 - d)\n    }));\n  };\n\n  SVGmtable.prototype.makeVLine = function (x, style, t) {\n    var _a = this.getBBox(),\n        h = _a.h,\n        d = _a.d;\n\n    var dt = style === 'dotted' ? t / 2 : 0;\n    var X = this.fixed(x + t / 2);\n    return this.svg('line', this.setLineThickness(t, style, {\n      'data-line': 'v',\n      'class': this.lineClass(style),\n      x1: X,\n      y1: this.fixed(dt - d),\n      x2: X,\n      y2: this.fixed(h - dt)\n    }));\n  };\n\n  SVGmtable.prototype.makeHLine = function (y, style, t) {\n    var w = this.getBBox().w;\n    var dt = style === 'dotted' ? t / 2 : 0;\n    var Y = this.fixed(y - t / 2);\n    return this.svg('line', this.setLineThickness(t, style, {\n      'data-line': 'h',\n      'class': this.lineClass(style),\n      x1: this.fixed(dt),\n      y1: Y,\n      x2: this.fixed(w - dt),\n      y2: Y\n    }));\n  };\n\n  SVGmtable.prototype.setLineThickness = function (t, style, properties) {\n    if (t !== .07) {\n      properties['stroke-thickness'] = this.fixed(t);\n\n      if (style !== 'solid') {\n        properties['stroke-dasharray'] = (style === 'dotted' ? '0,' : '') + this.fixed(2 * t);\n      }\n    }\n\n    return properties;\n  };\n\n  SVGmtable.prototype.handleLabels = function (svg, _parent, dx) {\n    if (!this.hasLabels) return;\n    var labels = this.labels;\n    var attributes = this.node.attributes;\n    var side = attributes.get('side');\n    this.spaceLabels();\n    this.isTop ? this.topTable(svg, labels, side) : this.subTable(svg, labels, side, dx);\n  };\n\n  SVGmtable.prototype.spaceLabels = function () {\n    var adaptor = this.adaptor;\n    var h = this.getBBox().h;\n    var L = this.getTableData().L;\n    var space = this.getRowHalfSpacing();\n    var y = h - this.fLine;\n    var current = adaptor.firstChild(this.labels);\n\n    for (var i = 0; i < this.numRows; i++) {\n      var row = this.childNodes[i];\n\n      if (row.node.isKind('mlabeledtr')) {\n        var cell = row.childNodes[0];\n        y -= space[i] + row.H;\n        row.placeCell(cell, {\n          x: 0,\n          y: y,\n          w: L,\n          lSpace: 0,\n          rSpace: 0,\n          lLine: 0,\n          rLine: 0\n        });\n        y -= row.D + space[i + 1] + this.rLines[i];\n        current = adaptor.next(current);\n      } else {\n        y -= space[i] + row.H + row.D + space[i + 1] + this.rLines[i];\n      }\n    }\n  };\n\n  SVGmtable.prototype.topTable = function (svg, labels, side) {\n    var adaptor = this.adaptor;\n\n    var _a = this.getBBox(),\n        h = _a.h,\n        d = _a.d,\n        w = _a.w,\n        L = _a.L,\n        R = _a.R;\n\n    var W = L + (this.pWidth || w) + R;\n    var LW = this.getTableData().L;\n\n    var _b = __read(this.getPadAlignShift(side), 3),\n        align = _b[1],\n        shift = _b[2];\n\n    var dx = shift + (align === 'right' ? -W : align === 'center' ? -W / 2 : 0) + L;\n    var matrix = 'matrix(1 0 0 -1 0 0)';\n    var scale = \"scale(\" + this.jax.fixed(this.font.params.x_height * 1000 / this.metrics.ex, 2) + \")\";\n    var transform = \"translate(0 \" + this.fixed(h) + \") \" + matrix + \" \" + scale;\n    var table = this.svg('svg', {\n      'data-table': true,\n      preserveAspectRatio: align === 'left' ? 'xMinYMid' : align === 'right' ? 'xMaxYMid' : 'xMidYMid',\n      viewBox: [this.fixed(-dx), this.fixed(-h), 1, this.fixed(h + d)].join(' ')\n    }, [this.svg('g', {\n      transform: matrix\n    }, adaptor.childNodes(svg))]);\n    labels = this.svg('svg', {\n      'data-labels': true,\n      preserveAspectRatio: side === 'left' ? 'xMinYMid' : 'xMaxYMid',\n      viewBox: [side === 'left' ? 0 : this.fixed(LW), this.fixed(-h), 1, this.fixed(h + d)].join(' ')\n    }, [labels]);\n    adaptor.append(svg, this.svg('g', {\n      transform: transform\n    }, [table, labels]));\n    this.place(-L, 0, svg);\n  };\n\n  SVGmtable.prototype.subTable = function (svg, labels, side, dx) {\n    var adaptor = this.adaptor;\n\n    var _a = this.getBBox(),\n        w = _a.w,\n        L = _a.L,\n        R = _a.R;\n\n    var W = L + (this.pWidth || w) + R;\n    var labelW = this.getTableData().L;\n    var align = this.getAlignShift()[0];\n    var CW = Math.max(W, this.container.getWrapWidth(this.containerI));\n    this.place(side === 'left' ? (align === 'left' ? 0 : align === 'right' ? W - CW + dx : (W - CW) / 2 + dx) - L : (align === 'left' ? CW : align === 'right' ? W + dx : (CW + W) / 2 + dx) - L - labelW, 0, labels);\n    adaptor.append(svg, labels);\n  };\n\n  SVGmtable.kind = mtable_js_2.MmlMtable.prototype.kind;\n  SVGmtable.styles = {\n    'g[data-mml-node=\"mtable\"] > line[data-line], svg[data-table] > g > line[data-line]': {\n      'stroke-width': '70px',\n      fill: 'none'\n    },\n    'g[data-mml-node=\"mtable\"] > rect[data-frame], svg[data-table] > g > rect[data-frame]': {\n      'stroke-width': '70px',\n      fill: 'none'\n    },\n    'g[data-mml-node=\"mtable\"] > .mjx-dashed, svg[data-table] > g > .mjx-dashed': {\n      'stroke-dasharray': '140'\n    },\n    'g[data-mml-node=\"mtable\"] > .mjx-dotted, svg[data-table] > g > .mjx-dotted': {\n      'stroke-linecap': 'round',\n      'stroke-dasharray': '0,140'\n    },\n    'g[data-mml-node=\"mtable\"] > g > svg': {\n      overflow: 'visible'\n    }\n  };\n  return SVGmtable;\n}(mtable_js_1.CommonMtableMixin(Wrapper_js_1.SVGWrapper));\n\nexports.SVGmtable = SVGmtable;","map":{"version":3,"mappings":"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","names":["CLASSPREFIX","__extends","factory","node","parent","_super","def","_this","isTop","transform","labels","svg","SVGmtable","standardSVGnode","placeRows","handleColumnLines","handleRowLines","handleFrame","dx","handlePWidth","handleLabels","equal","attributes","get","getTableData","H","D","HD","getEqualRowHeight","rSpace","getRowHalfSpacing","rLines","fLine","__read","y","getBBox","h","i","numRows","row","childNodes","_a","getRowHD","_b","tSpace","bSpace","_c","tLine","bLine","toSVG","place","handleColor","call","rect","firstChild","adaptor","setAttribute","fixed","getWidth","lines","getColumnAttributes","cSpace","getColumnHalfSpacing","cLines","cWidth","getComputedWidths","x","length","append","makeVLine","getRowAttributes","rH","rD","makeHLine","frame","d","w","style","makeFrame","pWidth","L","R","W","align","getAlignShift","CW","Math","max","container","getWrapWidth","containerI","dw","table","t","setLineThickness","lineClass","width","height","dt","X","x1","y1","x2","y2","Y","properties","_parent","hasLabels","side","spaceLabels","topTable","subTable","space","current","isKind","cell","placeCell","lSpace","lLine","rLine","next","LW","getPadAlignShift","shift","matrix","scale","jax","font","params","x_height","metrics","ex","preserveAspectRatio","viewBox","join","labelW","mtable_js_2","prototype","kind","fill","overflow","mtable_js_1","Wrapper_js_1","exports"],"sources":["/home/kinzoku99/Desktop/ProjectIO/frontend/node_modules/mathjax-full/ts/output/svg/Wrappers/mtable.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2018-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the SVGmtable wrapper for the MmlMtable object\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {SVGWrapper, SVGConstructor} from '../Wrapper.js';\nimport {SVGWrapperFactory} from '../WrapperFactory.js';\nimport {CommonMtableMixin} from '../../common/Wrappers/mtable.js';\nimport {SVGmtr} from './mtr.js';\nimport {SVGmtd} from './mtd.js';\nimport {MmlMtable} from '../../../core/MmlTree/MmlNodes/mtable.js';\nimport {MmlNode} from '../../../core/MmlTree/MmlNode.js';\nimport {OptionList} from '../../../util/Options.js';\nimport {StyleList} from '../../../util/StyleList.js';\n\nconst CLASSPREFIX = 'mjx-';\n\n/*****************************************************************/\n/**\n * The SVGmtable wrapper for the MmlMtable object\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport class SVGmtable<N, T, D> extends\nCommonMtableMixin<SVGmtd<any, any, any>, SVGmtr<any, any, any>, SVGConstructor<any, any, any>>(SVGWrapper) {\n\n  /**\n   * The mtable wrapper\n   */\n  public static kind = MmlMtable.prototype.kind;\n\n  /**\n   * @override\n   */\n  public static styles: StyleList = {\n    'g[data-mml-node=\"mtable\"] > line[data-line], svg[data-table] > g > line[data-line]': {\n      'stroke-width': '70px',\n      fill: 'none'\n    },\n    'g[data-mml-node=\"mtable\"] > rect[data-frame], svg[data-table] > g > rect[data-frame]': {\n      'stroke-width': '70px',\n      fill: 'none'\n    },\n    'g[data-mml-node=\"mtable\"] > .mjx-dashed, svg[data-table] > g > .mjx-dashed': {\n      'stroke-dasharray': '140'\n    },\n    'g[data-mml-node=\"mtable\"] > .mjx-dotted, svg[data-table] > g > .mjx-dotted': {\n      'stroke-linecap': 'round',\n      'stroke-dasharray': '0,140'\n    },\n    'g[data-mml-node=\"mtable\"] > g > svg': {\n      overflow: 'visible'\n    }\n  };\n\n  /**\n   * The column for labels\n   */\n  public labels: N;\n\n  /******************************************************************/\n\n  /**\n   * @override\n   */\n  constructor(factory: SVGWrapperFactory<N, T, D>, node: MmlNode, parent: SVGWrapper<N, T, D> = null) {\n    super(factory, node, parent);\n    const def: OptionList = {'data-labels': true};\n    if (this.isTop) {\n      def.transform = 'matrix(1 0 0 -1 0 0)';\n    }\n    this.labels = this.svg('g', def);\n  }\n\n  /**\n   * @override\n   */\n  public toSVG(parent: N) {\n    const svg = this.standardSVGnode(parent);\n    this.placeRows(svg);\n    this.handleColumnLines(svg);\n    this.handleRowLines(svg);\n    this.handleFrame(svg);\n    const dx = this.handlePWidth(svg);\n    this.handleLabels(svg, parent, dx);\n  }\n\n  /**\n   * @param {N} svg  The container in which to place the rows\n   */\n  protected placeRows(svg: N) {\n    const equal = this.node.attributes.get('equalrows') as boolean;\n    const {H, D} = this.getTableData();\n    const HD = this.getEqualRowHeight();\n    const rSpace = this.getRowHalfSpacing();\n    const rLines = [this.fLine, ...this.rLines, this.fLine];\n    let y = this.getBBox().h - rLines[0];\n    for (let i = 0; i < this.numRows; i++) {\n      const row = this.childNodes[i];\n      [row.H, row.D] = this.getRowHD(equal, HD, H[i], D[i]);\n      [row.tSpace, row.bSpace] = [rSpace[i], rSpace[i + 1]];\n      [row.tLine, row.bLine] = [rLines[i], rLines[i + 1]];\n      row.toSVG(svg);\n      row.place(0, y - rSpace[i] - row.H);\n      y -= rSpace[i] + row.H + row.D + rSpace[i + 1] + rLines[i + 1];\n    }\n  }\n\n  /**\n   * @param {boolean} equal   True for equal-height rows\n   * @param {number} HD       The height of equal-height rows\n   * @param {number} H        The natural height of the row\n   * @param {number} D        The natural depth of the row\n   * @returns {number[]}      The (possibly scaled) height and depth to use\n   */\n  protected getRowHD(equal: boolean, HD: number, H: number, D: number): [number, number] {\n    return (equal ? [(HD + H - D) / 2, (HD - H + D) / 2] : [H, D]);\n  }\n\n  /******************************************************************/\n\n  /**\n   * @override\n   */\n  public handleColor() {\n    super.handleColor();\n    const rect = this.firstChild();\n    if (rect) {\n      this.adaptor.setAttribute(rect, 'width', this.fixed(this.getWidth()));\n    }\n  }\n\n  /**\n   * Add vertical lines between columns\n   *\n   * @param {N} svg   The container for the table\n   */\n  protected handleColumnLines(svg: N) {\n    if (this.node.attributes.get('columnlines') === 'none') return;\n    const lines = this.getColumnAttributes('columnlines');\n    if (!lines) return;\n    const cSpace = this.getColumnHalfSpacing();\n    const cLines = this.cLines;\n    const cWidth = this.getComputedWidths();\n    let x = this.fLine;\n    for (let i = 0; i < lines.length; i++) {\n      x += cSpace[i] + cWidth[i] + cSpace[i + 1];\n      if (lines[i] !== 'none') {\n        this.adaptor.append(svg, this.makeVLine(x, lines[i], cLines[i]));\n      }\n      x += cLines[i];\n    }\n  }\n\n  /**\n   * Add horizontal lines between rows\n   *\n   * @param {N} svg   The container for the table\n   */\n  protected handleRowLines(svg: N) {\n    if (this.node.attributes.get('rowlines') === 'none') return;\n    const lines = this.getRowAttributes('rowlines');\n    if (!lines) return;\n    const equal = this.node.attributes.get('equalrows') as boolean;\n    const {H, D} = this.getTableData();\n    const HD = this.getEqualRowHeight();\n    const rSpace = this.getRowHalfSpacing();\n    const rLines = this.rLines;\n    let y = this.getBBox().h - this.fLine;\n    for (let i = 0; i < lines.length; i++) {\n      const [rH, rD] = this.getRowHD(equal, HD, H[i], D[i]);\n      y -= rSpace[i] + rH + rD + rSpace[i + 1];\n      if (lines[i] !== 'none') {\n        this.adaptor.append(svg, this.makeHLine(y, lines[i], rLines[i]));\n      }\n      y -= rLines[i];\n    }\n\n  }\n\n  /**\n   * Add a frame to the mtable, if needed\n   *\n   * @param {N} svg   The container for the table\n   */\n  protected handleFrame(svg: N) {\n    if (this.frame && this.fLine) {\n      const {h, d, w} = this.getBBox();\n      const style = this.node.attributes.get('frame') as string;\n      this.adaptor.append(svg, this.makeFrame(w, h, d, style));\n    }\n  }\n\n  /**\n   * @returns {number}   The x-adjustement needed to handle the true size of percentage-width tables\n   */\n  protected handlePWidth(svg: N): number {\n    if (!this.pWidth) {\n      return 0;\n    }\n    const {w, L, R} = this.getBBox();\n    const W = L + this.pWidth + R;\n    const align = this.getAlignShift()[0];\n    const CW = Math.max(this.isTop ? W : 0, this.container.getWrapWidth(this.containerI)) - L - R;\n    const dw = w - (this.pWidth > CW ? CW : this.pWidth);\n    const dx = (align === 'left' ? 0 : align === 'right' ? dw : dw / 2);\n    if (dx) {\n      const table = this.svg('g', {}, this.adaptor.childNodes(svg));\n      this.place(dx, 0, table);\n      this.adaptor.append(svg, table);\n    }\n    return dx;\n  }\n\n  /******************************************************************/\n\n  /**\n   * @param {string} style   The line style whose class is to be obtained\n   * @returns {string}       The class name for the style\n   */\n  protected lineClass(style: string): string {\n    return CLASSPREFIX + style;\n  }\n\n  /**\n   * @param {number} w       The width of the frame\n   * @param {number} h       The height of the frame\n   * @param {number} d       The depth of the frame\n   * @param {string} style   The border style for the frame\n   * @returns {N}            The SVG element for the frame\n   */\n  protected makeFrame(w: number, h: number, d: number, style: string): N {\n    const t = this.fLine;\n    return this.svg('rect', this.setLineThickness(t, style, {\n      'data-frame': true, 'class': this.lineClass(style),\n      width: this.fixed(w - t), height: this.fixed(h + d - t),\n      x: this.fixed(t / 2), y: this.fixed(t / 2 - d)\n    }));\n  }\n\n  /**\n   * @param {number} x       The x location of the line\n   * @param {string} style   The border style for the line\n   * @param {number} t       The line thickness\n   * @returns {N}            The SVG element for the line\n   */\n  protected makeVLine(x: number, style: string, t: number): N {\n    const {h, d} = this.getBBox();\n    const dt = (style === 'dotted' ? t / 2 : 0);\n    const X = this.fixed(x + t / 2);\n    return this.svg('line', this.setLineThickness(t, style, {\n      'data-line': 'v', 'class': this.lineClass(style),\n      x1: X, y1: this.fixed(dt - d), x2: X, y2: this.fixed(h - dt)\n    }));\n  }\n\n  /**\n   * @param {number} y       The y location of the line\n   * @param {string} style   The border style for the line\n   * @param {number} t       The line thickness\n   * @returns {N}            The SVG element for the line\n   */\n  protected makeHLine(y: number, style: string, t: number): N {\n    const w = this.getBBox().w;\n    const dt = (style === 'dotted' ? t / 2 : 0);\n    const Y = this.fixed(y - t / 2);\n    return this.svg('line', this.setLineThickness(t, style, {\n      'data-line': 'h', 'class': this.lineClass(style),\n      x1: this.fixed(dt), y1: Y, x2: this.fixed(w - dt), y2: Y\n    }));\n  }\n\n  /**\n   * @param {number} t                The thickness of the line\n   * @param {string} style            The border style for the line\n   * @param {OptionList} properties   The list of properties to modify\n   * @param {OptionList}              The modified properties\n   */\n  protected setLineThickness(t: number, style: string, properties: OptionList) {\n    if (t !== .07) {\n      properties['stroke-thickness'] = this.fixed(t);\n      if (style !== 'solid') {\n        properties['stroke-dasharray'] = (style === 'dotted' ? '0,' : '') + this.fixed(2 * t);\n      }\n    }\n    return properties;\n  }\n\n  /******************************************************************/\n\n  /**\n   * Handle addition of labels to the table\n   *\n   * @param {N} svg       The container for the table contents\n   * @param {N} parent    The parent containing the the table\n   * @param {number} dx   The adjustement for percentage width tables\n   */\n  protected handleLabels(svg: N, _parent: N, dx: number) {\n    if (!this.hasLabels) return;\n    const labels = this.labels;\n    const attributes = this.node.attributes;\n    //\n    //  Set the side for the labels\n    //\n    const side = attributes.get('side') as string;\n    //\n    // Add the labels to the table\n    //\n    this.spaceLabels();\n    //\n    // Handle top-level table to make it adapt to container size\n    //   but place subtables explicitly\n    //\n    this.isTop ? this.topTable(svg, labels, side) : this.subTable(svg, labels, side, dx);\n  }\n\n  /**\n   * Add spacing elements between the label rows to align them with the rest of the table\n   */\n  protected spaceLabels() {\n    const adaptor = this.adaptor;\n    const h = this.getBBox().h;\n    const L = this.getTableData().L;\n    const space = this.getRowHalfSpacing();\n    //\n    //  Start with frame size and add in spacing, height and depth,\n    //    and line thickness for each non-labeled row.\n    //\n    let y = h - this.fLine;\n    let current = adaptor.firstChild(this.labels) as N;\n    for (let i = 0; i < this.numRows; i++) {\n      const row = this.childNodes[i] as SVGmtr<N, T, D>;\n      if (row.node.isKind('mlabeledtr')) {\n        const cell = row.childNodes[0];\n        y -= space[i] + row.H;\n        row.placeCell(cell, {x: 0, y: y, w: L, lSpace: 0, rSpace: 0, lLine: 0, rLine: 0});\n        y -= row.D + space[i + 1] + this.rLines[i];\n        current = adaptor.next(current) as N;\n      } else {\n        y -= space[i] + row.H + row.D + space[i + 1] + this.rLines[i];\n      }\n    }\n  }\n\n  /**\n   * Handles tables with labels so that the label will move with the size of the container\n   *\n   * @param {N} svg         The SVG container for the table\n   * @param {N} labels      The group of labels\n   * @param {string} side   The side alignment (left or right)\n   */\n  protected topTable(svg: N, labels: N, side: string) {\n    const adaptor = this.adaptor;\n    const {h, d, w, L, R} = this.getBBox();\n    const W = L + (this.pWidth || w) + R;\n    const LW = this.getTableData().L;\n    const [ , align, shift] = this.getPadAlignShift(side);\n    const dx = shift + (align === 'right' ? -W : align === 'center' ? -W / 2 : 0) + L;\n    const matrix = 'matrix(1 0 0 -1 0 0)';\n    const scale = `scale(${this.jax.fixed((this.font.params.x_height * 1000) / this.metrics.ex, 2)})`;\n    const transform = `translate(0 ${this.fixed(h)}) ${matrix} ${scale}`;\n    let table = this.svg('svg', {\n      'data-table': true,\n      preserveAspectRatio: (align === 'left' ? 'xMinYMid' : align === 'right' ? 'xMaxYMid' : 'xMidYMid'),\n      viewBox: [this.fixed(-dx), this.fixed(-h), 1, this.fixed(h + d)].join(' ')\n    }, [\n      this.svg('g', {transform: matrix}, adaptor.childNodes(svg))\n    ]);\n    labels = this.svg('svg', {\n      'data-labels': true,\n      preserveAspectRatio: (side === 'left' ? 'xMinYMid' : 'xMaxYMid'),\n      viewBox: [side === 'left' ? 0 : this.fixed(LW), this.fixed(-h), 1, this.fixed(h + d)].join(' ')\n    }, [labels]);\n    adaptor.append(svg, this.svg('g', {transform: transform}, [table, labels]));\n    this.place(-L, 0, svg);  // remove spacing for L, which is added by the parent during appending\n  }\n\n  /**\n   * @param {N} svg         The SVG container for the table\n   * @param {N} labels      The group of labels\n   * @param {string} side   The side alignment (left or right)\n   * @param {number} dx     The adjustement for percentage width tables\n   */\n  protected subTable(svg: N, labels: N, side: string, dx: number) {\n    const adaptor = this.adaptor;\n    const {w, L, R} = this.getBBox();\n    const W = L + (this.pWidth || w) + R;\n    const labelW = this.getTableData().L;\n    const align = this.getAlignShift()[0];\n    const CW = Math.max(W, this.container.getWrapWidth(this.containerI));\n    this.place(side === 'left' ?\n               (align === 'left' ? 0 : align === 'right' ? W - CW + dx : (W - CW) / 2 + dx) - L :\n               (align === 'left' ? CW : align === 'right' ? W + dx : (CW + W) / 2 + dx) - L - labelW,\n               0, labels);\n    adaptor.append(svg, labels);\n  }\n\n}\n"]},"metadata":{},"sourceType":"script"}