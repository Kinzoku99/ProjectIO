{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.px = exports.emRounded = exports.em = exports.percent = exports.length2em = exports.MATHSPACE = exports.RELUNITS = exports.UNITS = exports.BIGDIMEN = void 0;\nexports.BIGDIMEN = 1000000;\nexports.UNITS = {\n  px: 1,\n  'in': 96,\n  cm: 96 / 2.54,\n  mm: 96 / 25.4\n};\nexports.RELUNITS = {\n  em: 1,\n  ex: .431,\n  pt: 1 / 10,\n  pc: 12 / 10,\n  mu: 1 / 18\n};\nexports.MATHSPACE = {\n  veryverythinmathspace: 1 / 18,\n  verythinmathspace: 2 / 18,\n  thinmathspace: 3 / 18,\n  mediummathspace: 4 / 18,\n  thickmathspace: 5 / 18,\n  verythickmathspace: 6 / 18,\n  veryverythickmathspace: 7 / 18,\n  negativeveryverythinmathspace: -1 / 18,\n  negativeverythinmathspace: -2 / 18,\n  negativethinmathspace: -3 / 18,\n  negativemediummathspace: -4 / 18,\n  negativethickmathspace: -5 / 18,\n  negativeverythickmathspace: -6 / 18,\n  negativeveryverythickmathspace: -7 / 18,\n  thin: .04,\n  medium: .06,\n  thick: .1,\n  normal: 1,\n  big: 2,\n  small: 1 / Math.sqrt(2),\n  infinity: exports.BIGDIMEN\n};\n\nfunction length2em(length, size, scale, em) {\n  if (size === void 0) {\n    size = 0;\n  }\n\n  if (scale === void 0) {\n    scale = 1;\n  }\n\n  if (em === void 0) {\n    em = 16;\n  }\n\n  if (typeof length !== 'string') {\n    length = String(length);\n  }\n\n  if (length === '' || length == null) {\n    return size;\n  }\n\n  if (exports.MATHSPACE[length]) {\n    return exports.MATHSPACE[length];\n  }\n\n  var match = length.match(/^\\s*([-+]?(?:\\.\\d+|\\d+(?:\\.\\d*)?))?(pt|em|ex|mu|px|pc|in|mm|cm|%)?/);\n\n  if (!match) {\n    return size;\n  }\n\n  var m = parseFloat(match[1] || '1'),\n      unit = match[2];\n\n  if (exports.UNITS.hasOwnProperty(unit)) {\n    return m * exports.UNITS[unit] / em / scale;\n  }\n\n  if (exports.RELUNITS.hasOwnProperty(unit)) {\n    return m * exports.RELUNITS[unit];\n  }\n\n  if (unit === '%') {\n    return m / 100 * size;\n  }\n\n  return m * size;\n}\n\nexports.length2em = length2em;\n\nfunction percent(m) {\n  return (100 * m).toFixed(1).replace(/\\.?0+$/, '') + '%';\n}\n\nexports.percent = percent;\n\nfunction em(m) {\n  if (Math.abs(m) < .001) return '0';\n  return m.toFixed(3).replace(/\\.?0+$/, '') + 'em';\n}\n\nexports.em = em;\n\nfunction emRounded(m, em) {\n  if (em === void 0) {\n    em = 16;\n  }\n\n  m = (Math.round(m * em) + .05) / em;\n  if (Math.abs(m) < .001) return '0em';\n  return m.toFixed(3).replace(/\\.?0+$/, '') + 'em';\n}\n\nexports.emRounded = emRounded;\n\nfunction px(m, M, em) {\n  if (M === void 0) {\n    M = -exports.BIGDIMEN;\n  }\n\n  if (em === void 0) {\n    em = 16;\n  }\n\n  m *= em;\n  if (M && m < M) m = M;\n  if (Math.abs(m) < .1) return '0';\n  return m.toFixed(1).replace(/\\.0$/, '') + 'px';\n}\n\nexports.px = px;","map":{"version":3,"mappings":"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","names":["exports","px","cm","mm","em","ex","pt","pc","mu","veryverythinmathspace","verythinmathspace","thinmathspace","mediummathspace","thickmathspace","verythickmathspace","veryverythickmathspace","negativeveryverythinmathspace","negativeverythinmathspace","negativethinmathspace","negativemediummathspace","negativethickmathspace","negativeverythickmathspace","negativeveryverythickmathspace","thin","medium","thick","normal","big","small","Math","sqrt","infinity","length2em","length","size","scale","String","match","m","parseFloat","unit","hasOwnProperty","percent","toFixed","replace","abs","emRounded","round","M"],"sources":["/home/kinzoku99/Desktop/ProjectIO/frontend/node_modules/mathjax-full/ts/util/lengths.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Utility functions for handling dimensions (lengths)\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\n/**\n *  A very large number\n */\nexport const BIGDIMEN = 1000000;\n\n/**\n *  Sizes of various units in pixels\n */\nexport const UNITS: {[unit: string]: number} = {\n  px: 1,\n  'in': 96,            // 96 px to an inch\n  cm: 96 / 2.54,       // 2.54 cm to an inch\n  mm: 96 / 25.4        // 10 mm to a cm\n};\n\n/**\n *  Sizes of various relative units in em's\n */\nexport const RELUNITS: {[unit: string]: number} = {\n  em: 1,\n  ex: .431,        // this.TEX.x_height;\n  pt: 1 / 10,      // 10 pt to an em\n  pc: 12 / 10,     // 12 pc to a pt\n  mu: 1 / 18       // 18mu to an em for the scriptlevel\n};\n\n/**\n *  The various named spaces\n */\nexport const MATHSPACE: {[name: string]: number} = {\n  /* tslint:disable:whitespace */\n  veryverythinmathspace:           1/18,\n  verythinmathspace:               2/18,\n  thinmathspace:                   3/18,\n  mediummathspace:                 4/18,\n  thickmathspace:                  5/18,\n  verythickmathspace:              6/18,\n  veryverythickmathspace:          7/18,\n  negativeveryverythinmathspace:  -1/18,\n  negativeverythinmathspace:      -2/18,\n  negativethinmathspace:          -3/18,\n  negativemediummathspace:        -4/18,\n  negativethickmathspace:         -5/18,\n  negativeverythickmathspace:     -6/18,\n  negativeveryverythickmathspace: -7/18,\n  /* tslint:enable */\n\n  thin:   .04,\n  medium: .06,\n  thick:  .1,\n\n  normal:  1,\n  big:     2,\n  small:   1 / Math.sqrt(2),\n\n  infinity:  BIGDIMEN\n};\n\n\n/**\n * @param {string|number} length  A dimension (giving number and units) to be converted to ems\n * @param {number} size           The default size of the dimension (for percentage values)\n * @param {number} scale          The current scaling factor (to handle absolute units)\n * @param {number} em             The size of an em in pixels\n * @return {number}               The dimension converted to ems\n */\nexport function length2em(length: string | number, size: number = 0, scale: number = 1, em: number = 16): number {\n  if (typeof length !== 'string') {\n    length = String(length);\n  }\n  if (length === '' || length == null) {\n    return size;\n  }\n  if (MATHSPACE[length]) {\n    return MATHSPACE[length];\n  }\n  let match = length.match(/^\\s*([-+]?(?:\\.\\d+|\\d+(?:\\.\\d*)?))?(pt|em|ex|mu|px|pc|in|mm|cm|%)?/);\n  if (!match) {\n    return size;\n  }\n  let m = parseFloat(match[1] || '1'), unit = match[2];\n  if (UNITS.hasOwnProperty(unit)) {\n    return m * UNITS[unit] / em / scale;\n  }\n  if (RELUNITS.hasOwnProperty(unit)) {\n    return m * RELUNITS[unit];\n  }\n  if (unit === '%') {\n    return m / 100 * size;  // percentage of the size\n  }\n  return m * size;            // relative to size\n}\n\n/**\n * @param {number} m  A number to be shown as a percent\n * @return {string}   The number m as a percent\n */\nexport function percent(m: number): string {\n  return (100 * m).toFixed(1).replace(/\\.?0+$/, '') + '%';\n}\n\n/**\n * @param {number} m  A number to be shown in ems\n * @return {string}   The number with units of ems\n */\nexport function em(m: number): string {\n  if (Math.abs(m) < .001) return '0';\n  return (m.toFixed(3).replace(/\\.?0+$/, '')) + 'em';\n}\n\n/**\n * @param {number} m   A number to be shown in ems, but rounded to pixel boundaries\n * @param {number} em  The number of pixels in an em\n * @return {string}    The number with units of em\n */\nexport function emRounded(m: number, em: number = 16): string {\n  m = (Math.round(m * em) + .05) / em;\n  if (Math.abs(m) < .001) return '0em';\n  return m.toFixed(3).replace(/\\.?0+$/, '') + 'em';\n}\n\n\n/**\n * @param {number} m   A number of em's to be shown as pixels\n * @param {number} M   The minimum number of pixels to allow\n * @param {number} em  The number of pixels in an em\n * @return {string}    The number with units of px\n */\nexport function px(m: number, M: number = -BIGDIMEN, em: number = 16): string {\n  m *= em;\n  if (M && m < M) m = M;\n  if (Math.abs(m) < .1) return '0';\n  return m.toFixed(1).replace(/\\.0$/, '') + 'px';\n}\n"]},"metadata":{},"sourceType":"script"}