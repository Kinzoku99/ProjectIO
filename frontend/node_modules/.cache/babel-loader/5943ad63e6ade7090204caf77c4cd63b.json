{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MmlMath = void 0;\n\nvar MmlNode_js_1 = require(\"../MmlNode.js\");\n\nvar MmlMath = function (_super) {\n  __extends(MmlMath, _super);\n\n  function MmlMath() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(MmlMath.prototype, \"kind\", {\n    get: function () {\n      return 'math';\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MmlMath.prototype, \"linebreakContainer\", {\n    get: function () {\n      return true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  MmlMath.prototype.setChildInheritedAttributes = function (attributes, display, level, prime) {\n    if (this.attributes.get('mode') === 'display') {\n      this.attributes.setInherited('display', 'block');\n    }\n\n    attributes = this.addInheritedAttributes(attributes, this.attributes.getAllAttributes());\n    display = !!this.attributes.get('displaystyle') || !this.attributes.get('displaystyle') && this.attributes.get('display') === 'block';\n    this.attributes.setInherited('displaystyle', display);\n    level = this.attributes.get('scriptlevel') || this.constructor.defaults['scriptlevel'];\n\n    _super.prototype.setChildInheritedAttributes.call(this, attributes, display, level, prime);\n  };\n\n  MmlMath.defaults = __assign(__assign({}, MmlNode_js_1.AbstractMmlLayoutNode.defaults), {\n    mathvariant: 'normal',\n    mathsize: 'normal',\n    mathcolor: '',\n    mathbackground: 'transparent',\n    dir: 'ltr',\n    scriptlevel: 0,\n    displaystyle: false,\n    display: 'inline',\n    maxwidth: '',\n    overflow: 'linebreak',\n    altimg: '',\n    'altimg-width': '',\n    'altimg-height': '',\n    'altimg-valign': '',\n    alttext: '',\n    cdgroup: '',\n    scriptsizemultiplier: 1 / Math.sqrt(2),\n    scriptminsize: '8px',\n    infixlinebreakstyle: 'before',\n    lineleading: '1ex',\n    linebreakmultchar: '\\u2062',\n    indentshift: 'auto',\n    indentalign: 'auto',\n    indenttarget: '',\n    indentalignfirst: 'indentalign',\n    indentshiftfirst: 'indentshift',\n    indentalignlast: 'indentalign',\n    indentshiftlast: 'indentshift'\n  });\n  return MmlMath;\n}(MmlNode_js_1.AbstractMmlLayoutNode);\n\nexports.MmlMath = MmlMath;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;AAOA;AAA6BA;;AAA7B;;AAwEC;;AAhCCC,wBAAWC,iBAAX,EAAW,MAAX,EAAe;SAAf;AACE,aAAO,MAAP;AACD,KAFc;qBAAA;;AAAA,GAAf;AAQAD,wBAAWC,iBAAX,EAAW,oBAAX,EAA6B;SAA7B;AACE,aAAO,IAAP;AACD,KAF4B;qBAAA;;AAAA,GAA7B;;AAWUA,kDAAV,UAAsCC,UAAtC,EAAiEC,OAAjE,EAAmFC,KAAnF,EAAkGC,KAAlG,EAAgH;AAC9G,QAAI,KAAKH,UAAL,CAAgBI,GAAhB,CAAoB,MAApB,MAAgC,SAApC,EAA+C;AAC7C,WAAKJ,UAAL,CAAgBK,YAAhB,CAA6B,SAA7B,EAAwC,OAAxC;AACD;;AACDL,cAAU,GAAG,KAAKM,sBAAL,CAA4BN,UAA5B,EAAwC,KAAKA,UAAL,CAAgBO,gBAAhB,EAAxC,CAAb;AACAN,WAAO,GAAI,CAAC,CAAC,KAAKD,UAAL,CAAgBI,GAAhB,CAAoB,cAApB,CAAF,IACC,CAAC,KAAKJ,UAAL,CAAgBI,GAAhB,CAAoB,cAApB,CAAD,IAAwC,KAAKJ,UAAL,CAAgBI,GAAhB,CAAoB,SAApB,MAAmC,OADvF;AAEA,SAAKJ,UAAL,CAAgBK,YAAhB,CAA6B,cAA7B,EAA6CJ,OAA7C;AACAC,SAAK,GAAI,KAAKF,UAAL,CAAgBI,GAAhB,CAAoB,aAApB,KACC,KAAKI,WAAL,CAAoCC,QAApC,CAA6C,aAA7C,CADV;;AAEAC,qBAAMC,2BAAN,CAAiCC,IAAjC,CAAiC,IAAjC,EAAkCZ,UAAlC,EAA8CC,OAA9C,EAAuDC,KAAvD,EAA8DC,KAA9D;AACD,GAXS;;AAtDIJ,qBAAQc,sBACjBC,mCAAsBL,QADL,GACa;AACjCM,eAAW,EAAE,QADoB;AAEjCC,YAAQ,EAAE,QAFuB;AAGjCC,aAAS,EAAE,EAHsB;AAIjCC,kBAAc,EAAE,aAJiB;AAKjCC,OAAG,EAAE,KAL4B;AAMjCC,eAAW,EAAE,CANoB;AAOjCC,gBAAY,EAAE,KAPmB;AAQjCpB,WAAO,EAAE,QARwB;AASjCqB,YAAQ,EAAE,EATuB;AAUjCC,YAAQ,EAAE,WAVuB;AAWjCC,UAAM,EAAE,EAXyB;AAYjC,oBAAgB,EAZiB;AAajC,qBAAiB,EAbgB;AAcjC,qBAAiB,EAdgB;AAejCC,WAAO,EAAE,EAfwB;AAgBjCC,WAAO,EAAE,EAhBwB;AAiBjCC,wBAAoB,EAAE,IAAIC,IAAI,CAACC,IAAL,CAAU,CAAV,CAjBO;AAkBjCC,iBAAa,EAAE,KAlBkB;AAmBjCC,uBAAmB,EAAE,QAnBY;AAoBjCC,eAAW,EAAE,KApBoB;AAqBjCC,qBAAiB,EAAE,QArBc;AAsBjCC,eAAW,EAAE,MAtBoB;AAuBjCC,eAAW,EAAE,MAvBoB;AAwBjCC,gBAAY,EAAE,EAxBmB;AAyBjCC,oBAAgB,EAAE,aAzBe;AA0BjCC,oBAAgB,EAAE,aA1Be;AA2BjCC,mBAAe,EAAG,aA3Be;AA4BjCC,mBAAe,EAAG;AA5Be,GADb,CAAR;AAmEhB;AAAC,CAxED,CAA6B1B,kCAA7B;;AAAa2B","names":["__extends","Object","MmlMath","attributes","display","level","prime","get","setInherited","addInheritedAttributes","getAllAttributes","constructor","defaults","_super","setChildInheritedAttributes","call","__assign","MmlNode_js_1","mathvariant","mathsize","mathcolor","mathbackground","dir","scriptlevel","displaystyle","maxwidth","overflow","altimg","alttext","cdgroup","scriptsizemultiplier","Math","sqrt","scriptminsize","infixlinebreakstyle","lineleading","linebreakmultchar","indentshift","indentalign","indenttarget","indentalignfirst","indentshiftfirst","indentalignlast","indentshiftlast","exports"],"sources":["/home/kinzoku99/Desktop/ProjectIO/frontend/node_modules/mathjax-full/ts/core/MmlTree/MmlNodes/math.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the MmlMath node\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {PropertyList} from '../../Tree/Node.js';\nimport {AbstractMmlLayoutNode, AttributeList} from '../MmlNode.js';\n\n/*****************************************************************/\n/**\n *  Implements the MmlMath node class (subclass of AbstractMmlLayoutNode)\n */\n\nexport class MmlMath extends AbstractMmlLayoutNode {\n\n  /**\n   *  These are used as the defaults for any attributes marked INHERIT in other classes\n   */\n  public static defaults: PropertyList = {\n    ...AbstractMmlLayoutNode.defaults,\n    mathvariant: 'normal',\n    mathsize: 'normal',\n    mathcolor: '', // Should be 'black', but allow it to inherit from surrounding text\n    mathbackground: 'transparent',\n    dir: 'ltr',\n    scriptlevel: 0,\n    displaystyle: false,\n    display: 'inline',\n    maxwidth: '',\n    overflow: 'linebreak',\n    altimg: '',\n    'altimg-width': '',\n    'altimg-height': '',\n    'altimg-valign': '',\n    alttext: '',\n    cdgroup: '',\n    scriptsizemultiplier: 1 / Math.sqrt(2),\n    scriptminsize: '8px',        // Should be 8pt, but that's too big\n    infixlinebreakstyle: 'before',\n    lineleading: '1ex',\n    linebreakmultchar: '\\u2062', // Invisible times\n    indentshift: 'auto',         // Use user configuration\n    indentalign: 'auto',\n    indenttarget: '',\n    indentalignfirst: 'indentalign',\n    indentshiftfirst: 'indentshift',\n    indentalignlast:  'indentalign',\n    indentshiftlast:  'indentshift'\n  };\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'math';\n  }\n\n  /**\n   * Linebreaking can occur in math nodes\n   * @override\n   */\n  public get linebreakContainer() {\n    return true;\n  }\n\n  /**\n   * The attributes of math nodes are inherited, so add them into the list.\n   * The displaystyle attribute comes from the display attribute if not given explicitly\n   * The scriptlevel comes from the scriptlevel attribute or default\n   *\n   * @override\n   */\n  protected setChildInheritedAttributes(attributes: AttributeList, display: boolean, level: number, prime: boolean) {\n    if (this.attributes.get('mode') === 'display') {\n      this.attributes.setInherited('display', 'block');\n    }\n    attributes = this.addInheritedAttributes(attributes, this.attributes.getAllAttributes());\n    display = (!!this.attributes.get('displaystyle') ||\n               (!this.attributes.get('displaystyle') && this.attributes.get('display') === 'block'));\n    this.attributes.setInherited('displaystyle', display);\n    level = (this.attributes.get('scriptlevel') ||\n             (this.constructor as typeof MmlMath).defaults['scriptlevel']) as number;\n    super.setChildInheritedAttributes(attributes, display, level, prime);\n  }\n\n}\n"]},"metadata":{},"sourceType":"script"}