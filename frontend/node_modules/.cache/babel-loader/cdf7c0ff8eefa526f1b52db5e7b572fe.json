{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n  return to;\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CommonMfencedMixin = void 0;\n\nfunction CommonMfencedMixin(Base) {\n  return function (_super) {\n    __extends(class_1, _super);\n\n    function class_1() {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      var _this = _super.apply(this, __spreadArray([], __read(args))) || this;\n\n      _this.mrow = null;\n\n      _this.createMrow();\n\n      _this.addMrowChildren();\n\n      return _this;\n    }\n\n    class_1.prototype.createMrow = function () {\n      var mmlFactory = this.node.factory;\n      var mrow = mmlFactory.create('inferredMrow');\n      mrow.inheritAttributesFrom(this.node);\n      this.mrow = this.wrap(mrow);\n      this.mrow.parent = this;\n    };\n\n    class_1.prototype.addMrowChildren = function () {\n      var e_1, _a;\n\n      var mfenced = this.node;\n      var mrow = this.mrow;\n      this.addMo(mfenced.open);\n\n      if (this.childNodes.length) {\n        mrow.childNodes.push(this.childNodes[0]);\n      }\n\n      var i = 0;\n\n      try {\n        for (var _b = __values(this.childNodes.slice(1)), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var child = _c.value;\n          this.addMo(mfenced.separators[i++]);\n          mrow.childNodes.push(child);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      this.addMo(mfenced.close);\n      mrow.stretchChildren();\n    };\n\n    class_1.prototype.addMo = function (node) {\n      if (!node) return;\n      var mo = this.wrap(node);\n      this.mrow.childNodes.push(mo);\n      mo.parent = this.mrow;\n    };\n\n    class_1.prototype.computeBBox = function (bbox, recompute) {\n      if (recompute === void 0) {\n        recompute = false;\n      }\n\n      bbox.updateFrom(this.mrow.getBBox());\n      this.setChildPWidths(recompute);\n    };\n\n    return class_1;\n  }(Base);\n}\n\nexports.CommonMfencedMixin = CommonMfencedMixin;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsEA,SAAgBA,kBAAhB,CAAiEC,IAAjE,EAAwE;AAEtE;AAAqBC;;AAWnB;AAAY;;WAAA,yCAAc;AAAdC;;;AAAZ,8DACWA,IADX,OACe,IADf;;AANOC,mBAA2B,IAA3B;;AAQLA,WAAI,CAACC,UAAL;;AACAD,WAAI,CAACE,eAAL;;;AACD;;AAKMC,mCAAP;AACE,UAAMC,UAAU,GAAI,KAAKC,IAAL,CAA8BC,OAAlD;AACA,UAAMC,IAAI,GAAGH,UAAU,CAACI,MAAX,CAAkB,cAAlB,CAAb;AACAD,UAAI,CAACE,qBAAL,CAA2B,KAAKJ,IAAhC;AACA,WAAKE,IAAL,GAAY,KAAKG,IAAL,CAAUH,IAAV,CAAZ;AACA,WAAKA,IAAL,CAAUI,MAAV,GAAmB,IAAnB;AACD,KANM;;AAaAR,wCAAP;;;AACE,UAAMS,OAAO,GAAG,KAAKP,IAArB;AACA,UAAME,IAAI,GAAG,KAAKA,IAAlB;AACA,WAAKM,KAAL,CAAWD,OAAO,CAACE,IAAnB;;AACA,UAAI,KAAKC,UAAL,CAAgBC,MAApB,EAA4B;AAC1BT,YAAI,CAACQ,UAAL,CAAgBE,IAAhB,CAAqB,KAAKF,UAAL,CAAgB,CAAhB,CAArB;AACD;;AACD,UAAIG,CAAC,GAAG,CAAR;;;AACA,aAAoB,uBAAKH,UAAL,CAAgBI,KAAhB,CAAsB,CAAtB,IAAwBC,cAA5C,EAA4C,QAA5C,EAA4CA,cAA5C,EAA8C;AAAzC,cAAMC,KAAK,WAAX;AACH,eAAKR,KAAL,CAAWD,OAAO,CAACU,UAAR,CAAmBJ,CAAC,EAApB,CAAX;AACAX,cAAI,CAACQ,UAAL,CAAgBE,IAAhB,CAAqBI,KAArB;AACD;;;;;;;;;;;;;AACD,WAAKR,KAAL,CAAWD,OAAO,CAACW,KAAnB;AACAhB,UAAI,CAACiB,eAAL;AACD,KAdM;;AAqBArB,8BAAP,UAAaE,IAAb,EAA0B;AACxB,UAAI,CAACA,IAAL,EAAW;AACX,UAAMoB,EAAE,GAAG,KAAKf,IAAL,CAAUL,IAAV,CAAX;AACA,WAAKE,IAAL,CAAUQ,UAAV,CAAqBE,IAArB,CAA0BQ,EAA1B;AACAA,QAAE,CAACd,MAAH,GAAY,KAAKJ,IAAjB;AACD,KALM;;AAUAJ,oCAAP,UAAmBuB,IAAnB,EAA+BC,SAA/B,EAAyD;AAA1B;AAAAA;AAA0B;;AACvDD,UAAI,CAACE,UAAL,CAAgB,KAAKrB,IAAL,CAAUsB,OAAV,EAAhB;AACA,WAAKC,eAAL,CAAqBH,SAArB;AACD,KAHM;;AAKT;AArEO,GAAP,CAAqB9B,IAArB;AAuED;;AAzEDkC","names":["CommonMfencedMixin","Base","__extends","args","_this","createMrow","addMrowChildren","class_1","mmlFactory","node","factory","mrow","create","inheritAttributesFrom","wrap","parent","mfenced","addMo","open","childNodes","length","push","i","slice","_c","child","separators","close","stretchChildren","mo","bbox","recompute","updateFrom","getBBox","setChildPWidths","exports"],"sources":["/home/kinzoku99/Desktop/ProjectIO/frontend/node_modules/mathjax-full/ts/output/common/Wrappers/mfenced.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2018-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the CommonMfenced wrapper mixin for the MmlMfenced object\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {AnyWrapper, WrapperConstructor, Constructor} from '../Wrapper.js';\nimport {CommonInferredMrow} from './mrow.js';\nimport {MmlNode, AbstractMmlNode} from '../../../core/MmlTree/MmlNode.js';\nimport {MmlMfenced} from '../../../core/MmlTree/MmlNodes/mfenced.js';\nimport {BBox} from '../../../util/BBox.js';\n\n/*****************************************************************/\n/**\n * The CommonMfenced interface\n */\nexport interface CommonMfenced extends AnyWrapper {\n  /**\n   * An mrow to use for the layout of the mfenced\n   */\n  mrow: CommonInferredMrow;\n\n  /**\n   * Creates the mrow wrapper to use for the layout\n   */\n  createMrow(): void;\n\n  /**\n   * Populate the mrow with wrapped mo elements interleaved\n   *   with the mfenced children (the mo's are already created\n   *   in the mfenced object)\n   */\n  addMrowChildren(): void;\n\n  /**\n   * Wrap an mo element and push it onto the mrow\n   *\n   * @param {MmlNode} node  The mo element to push on the mrow\n   */\n  addMo(node: MmlNode): void;\n}\n\n/**\n * Shorthand for the CommonMfenced constructor\n */\nexport type MfencedConstructor = Constructor<CommonMfenced>;\n\n/*****************************************************************/\n/**\n * The CommonMfenced wrapper mixin for the MmlMfenced object\n *\n * @template T  The Wrapper class constructor type\n */\nexport function CommonMfencedMixin<T extends WrapperConstructor>(Base: T): MfencedConstructor & T {\n\n  return class extends Base {\n\n    /**\n     * An mrow to use for the layout of the mfenced\n     */\n    public mrow: CommonInferredMrow = null;\n\n    /**\n     * @override\n     * @constructor\n     */\n    constructor(...args: any[]) {\n      super(...args);\n      this.createMrow();\n      this.addMrowChildren();\n    }\n\n    /**\n     * Creates the mrow wrapper to use for the layout\n     */\n    public createMrow() {\n      const mmlFactory = (this.node as AbstractMmlNode).factory;\n      const mrow = mmlFactory.create('inferredMrow');\n      mrow.inheritAttributesFrom(this.node);\n      this.mrow = this.wrap(mrow) as CommonInferredMrow;\n      this.mrow.parent = this;\n    }\n\n    /**\n     * Populate the mrow with wrapped mo elements interleaved\n     *   with the mfenced children (the mo's are already created\n     *   in the mfenced object)\n     */\n    public addMrowChildren() {\n      const mfenced = this.node as MmlMfenced;\n      const mrow = this.mrow;\n      this.addMo(mfenced.open);\n      if (this.childNodes.length) {\n        mrow.childNodes.push(this.childNodes[0]);\n      }\n      let i = 0;\n      for (const child of this.childNodes.slice(1)) {\n        this.addMo(mfenced.separators[i++]);\n        mrow.childNodes.push(child);\n      }\n      this.addMo(mfenced.close);\n      mrow.stretchChildren();\n    }\n\n    /**\n     * Wrap an mo element and push it onto the mrow\n     *\n     * @param {MmlNode} node  The mo element to push on the mrow\n     */\n    public addMo(node: MmlNode) {\n      if (!node) return;\n      const mo = this.wrap(node);\n      this.mrow.childNodes.push(mo);\n      mo.parent = this.mrow;\n    }\n\n    /**\n     * @override\n     */\n    public computeBBox(bbox: BBox, recompute: boolean = false) {\n      bbox.updateFrom(this.mrow.getBBox());\n      this.setChildPWidths(recompute);\n    }\n\n  };\n\n}\n"]},"metadata":{},"sourceType":"script"}