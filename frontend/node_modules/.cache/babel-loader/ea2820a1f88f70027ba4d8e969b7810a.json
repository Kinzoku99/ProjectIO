{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __exportStar = this && this.__exportStar || function (m, exports) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AddPaths = exports.SVGFontData = void 0;\n\nvar FontData_js_1 = require(\"../common/FontData.js\");\n\n__exportStar(require(\"../common/FontData.js\"), exports);\n\nvar SVGFontData = function (_super) {\n  __extends(SVGFontData, _super);\n\n  function SVGFontData() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  SVGFontData.charOptions = function (font, n) {\n    return _super.charOptions.call(this, font, n);\n  };\n\n  return SVGFontData;\n}(FontData_js_1.FontData);\n\nexports.SVGFontData = SVGFontData;\n\nfunction AddPaths(font, paths, content) {\n  var e_1, _a, e_2, _b;\n\n  try {\n    for (var _c = __values(Object.keys(paths)), _d = _c.next(); !_d.done; _d = _c.next()) {\n      var c = _d.value;\n      var n = parseInt(c);\n      SVGFontData.charOptions(font, n).p = paths[n];\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n\n  try {\n    for (var _e = __values(Object.keys(content)), _f = _e.next(); !_f.done; _f = _e.next()) {\n      var c = _f.value;\n      var n = parseInt(c);\n      SVGFontData.charOptions(font, n).c = content[n];\n    }\n  } catch (e_2_1) {\n    e_2 = {\n      error: e_2_1\n    };\n  } finally {\n    try {\n      if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n    } finally {\n      if (e_2) throw e_2.error;\n    }\n  }\n\n  return font;\n}\n\nexports.AddPaths = AddPaths;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;AACAA;;AAqCA;AAAiCC;;AAAjC;;AASC;;AAJeC,4BAAd,UAA0BC,IAA1B,EAA4CC,CAA5C,EAAqD;AACnD,WAAOC,OAAMC,WAAN,CAAiBC,IAAjB,CAAiB,IAAjB,EAAkBJ,IAAlB,EAAwBC,CAAxB,CAAP;AACD,GAFa;;AAIhB;AATA,EAAiCI,sBAAjC;;AAAaC;;AAqBb,SAAgBC,QAAhB,CAAyBP,IAAzB,EAA2CQ,KAA3C,EAAiEC,OAAjE,EAAuF;;;;AACrF,SAAgB,wBAAM,CAACC,IAAP,CAAYF,KAAZ,IAAkBG,cAAlC,EAAkC,QAAlC,EAAkCA,cAAlC,EAAoC;AAA/B,UAAMC,CAAC,WAAP;AACH,UAAMX,CAAC,GAAGY,QAAQ,CAACD,CAAD,CAAlB;AACAb,iBAAW,CAACI,WAAZ,CAAwBH,IAAxB,EAA8BC,CAA9B,EAAiCa,CAAjC,GAAqCN,KAAK,CAACP,CAAD,CAA1C;AACD;;;;;;;;;;;;;;AACD,SAAgB,wBAAM,CAACS,IAAP,CAAYD,OAAZ,IAAoBM,cAApC,EAAoC,QAApC,EAAoCA,cAApC,EAAsC;AAAjC,UAAMH,CAAC,WAAP;AACH,UAAMX,CAAC,GAAGY,QAAQ,CAACD,CAAD,CAAlB;AACAb,iBAAW,CAACI,WAAZ,CAAwBH,IAAxB,EAA8BC,CAA9B,EAAiCW,CAAjC,GAAqCH,OAAO,CAACR,CAAD,CAA5C;AACD;;;;;;;;;;;;;AACD,SAAOD,IAAP;AACD;;AAVDM","names":["__exportStar","__extends","SVGFontData","font","n","_super","charOptions","call","FontData_js_1","exports","AddPaths","paths","content","keys","_d","c","parseInt","p","_f"],"sources":["/home/kinzoku99/Desktop/ProjectIO/frontend/node_modules/mathjax-full/ts/output/svg/FontData.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the SVGFontData class for font data in SVG output.\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {CharMap, CharOptions, CharData, VariantData, DelimiterData, FontData} from '../common/FontData.js';\nexport * from '../common/FontData.js';\n\nexport type CharStringMap = {[name: number]: string};\n\n/**\n * Add the extra data needed for CharOptions in SVG\n */\nexport interface SVGCharOptions extends CharOptions {\n  c?: string;                   // the character value (overrides default value)\n  p?: string;                   // svg path\n}\n\n/**\n * Shorthands for SVG char maps and char data\n */\nexport type SVGCharMap = CharMap<SVGCharOptions>;\nexport type SVGCharData = CharData<SVGCharOptions>;\n\n/**\n * The extra data needed for a Variant in SVG output\n */\nexport interface SVGVariantData extends VariantData<SVGCharOptions> {\n  cacheID: string;\n}\n\n/**\n * the extra data neede for a Delimiter in SVG output\n */\nexport interface SVGDelimiterData extends DelimiterData {\n}\n\n\n/****************************************************************************/\n\n/**\n * The SVG FontData class\n */\nexport class SVGFontData extends FontData<SVGCharOptions, SVGVariantData, SVGDelimiterData> {\n\n  /**\n   * @override\n   */\n  public static charOptions(font: SVGCharMap, n: number) {\n    return super.charOptions(font, n) as SVGCharOptions;\n  }\n\n}\n\nexport type SVGFontDataClass = typeof SVGFontData;\n\n/****************************************************************************/\n\n/**\n * @param {CharMap} font        The font to augment\n * @param {CharStringMap} paths     The path data to use for each character\n * @param {CharStringMap} content   The string to use for remapped characters\n * @return {SVGCharMap}            The augmented font\n */\nexport function AddPaths(font: SVGCharMap, paths: CharStringMap, content: CharStringMap): SVGCharMap {\n  for (const c of Object.keys(paths)) {\n    const n = parseInt(c);\n    SVGFontData.charOptions(font, n).p = paths[n];\n  }\n  for (const c of Object.keys(content)) {\n    const n = parseInt(c);\n    SVGFontData.charOptions(font, n).c = content[n];\n  }\n  return font;\n}\n"]},"metadata":{},"sourceType":"script"}