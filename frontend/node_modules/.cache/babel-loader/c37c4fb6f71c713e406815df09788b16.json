{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n  return to;\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CommonMtableMixin = void 0;\n\nvar BBox_js_1 = require(\"../../../util/BBox.js\");\n\nvar string_js_1 = require(\"../../../util/string.js\");\n\nvar numeric_js_1 = require(\"../../../util/numeric.js\");\n\nfunction CommonMtableMixin(Base) {\n  return function (_super) {\n    __extends(class_1, _super);\n\n    function class_1() {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      var _this = _super.apply(this, __spreadArray([], __read(args))) || this;\n\n      _this.numCols = 0;\n      _this.numRows = 0;\n      _this.data = null;\n      _this.pwidthCells = [];\n      _this.pWidth = 0;\n      _this.numCols = numeric_js_1.max(_this.tableRows.map(function (row) {\n        return row.numCells;\n      }));\n      _this.numRows = _this.childNodes.length;\n      _this.hasLabels = _this.childNodes.reduce(function (value, row) {\n        return value || row.node.isKind('mlabeledtr');\n      }, false);\n\n      _this.findContainer();\n\n      _this.isTop = !_this.container || _this.container.node.isKind('math') && !_this.container.parent;\n\n      if (_this.isTop) {\n        _this.jax.table = _this;\n      }\n\n      _this.getPercentageWidth();\n\n      var attributes = _this.node.attributes;\n      _this.frame = attributes.get('frame') !== 'none';\n      _this.fLine = _this.frame && attributes.get('frame') ? .07 : 0;\n      _this.fSpace = _this.frame ? _this.convertLengths(_this.getAttributeArray('framespacing')) : [0, 0];\n      _this.cSpace = _this.convertLengths(_this.getColumnAttributes('columnspacing'));\n      _this.rSpace = _this.convertLengths(_this.getRowAttributes('rowspacing'));\n      _this.cLines = _this.getColumnAttributes('columnlines').map(function (x) {\n        return x === 'none' ? 0 : .07;\n      });\n      _this.rLines = _this.getRowAttributes('rowlines').map(function (x) {\n        return x === 'none' ? 0 : .07;\n      });\n      _this.cWidths = _this.getColumnWidths();\n\n      _this.stretchRows();\n\n      _this.stretchColumns();\n\n      return _this;\n    }\n\n    Object.defineProperty(class_1.prototype, \"tableRows\", {\n      get: function () {\n        return this.childNodes;\n      },\n      enumerable: false,\n      configurable: true\n    });\n\n    class_1.prototype.findContainer = function () {\n      var node = this;\n      var parent = node.parent;\n\n      while (parent && (parent.node.notParent || parent.node.isKind('mrow'))) {\n        node = parent;\n        parent = parent.parent;\n      }\n\n      this.container = parent;\n      this.containerI = node.node.childPosition();\n    };\n\n    class_1.prototype.getPercentageWidth = function () {\n      if (this.hasLabels) {\n        this.bbox.pwidth = BBox_js_1.BBox.fullWidth;\n      } else {\n        var width = this.node.attributes.get('width');\n\n        if (string_js_1.isPercent(width)) {\n          this.bbox.pwidth = width;\n        }\n      }\n    };\n\n    class_1.prototype.stretchRows = function () {\n      var equal = this.node.attributes.get('equalrows');\n      var HD = equal ? this.getEqualRowHeight() : 0;\n\n      var _a = equal ? this.getTableData() : {\n        H: [0],\n        D: [0]\n      },\n          H = _a.H,\n          D = _a.D;\n\n      var rows = this.tableRows;\n\n      for (var i = 0; i < this.numRows; i++) {\n        var hd = equal ? [(HD + H[i] - D[i]) / 2, (HD - H[i] + D[i]) / 2] : null;\n        rows[i].stretchChildren(hd);\n      }\n    };\n\n    class_1.prototype.stretchColumns = function () {\n      for (var i = 0; i < this.numCols; i++) {\n        var width = typeof this.cWidths[i] === 'number' ? this.cWidths[i] : null;\n        this.stretchColumn(i, width);\n      }\n    };\n\n    class_1.prototype.stretchColumn = function (i, W) {\n      var e_1, _a, e_2, _b, e_3, _c;\n\n      var stretchy = [];\n\n      try {\n        for (var _d = __values(this.tableRows), _e = _d.next(); !_e.done; _e = _d.next()) {\n          var row = _e.value;\n          var cell = row.getChild(i);\n\n          if (cell) {\n            var child = cell.childNodes[0];\n\n            if (child.stretch.dir === 0 && child.canStretch(2)) {\n              stretchy.push(child);\n            }\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_e && !_e.done && (_a = _d.return)) _a.call(_d);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      var count = stretchy.length;\n      var nodeCount = this.childNodes.length;\n\n      if (count && nodeCount > 1) {\n        if (W === null) {\n          W = 0;\n          var all = count > 1 && count === nodeCount;\n\n          try {\n            for (var _f = __values(this.tableRows), _g = _f.next(); !_g.done; _g = _f.next()) {\n              var row = _g.value;\n              var cell = row.getChild(i);\n\n              if (cell) {\n                var child = cell.childNodes[0];\n                var noStretch = child.stretch.dir === 0;\n\n                if (all || noStretch) {\n                  var w = child.getBBox(noStretch).w;\n\n                  if (w > W) {\n                    W = w;\n                  }\n                }\n              }\n            }\n          } catch (e_2_1) {\n            e_2 = {\n              error: e_2_1\n            };\n          } finally {\n            try {\n              if (_g && !_g.done && (_b = _f.return)) _b.call(_f);\n            } finally {\n              if (e_2) throw e_2.error;\n            }\n          }\n        }\n\n        try {\n          for (var stretchy_1 = __values(stretchy), stretchy_1_1 = stretchy_1.next(); !stretchy_1_1.done; stretchy_1_1 = stretchy_1.next()) {\n            var child = stretchy_1_1.value;\n            child.coreMO().getStretchedVariant([W]);\n          }\n        } catch (e_3_1) {\n          e_3 = {\n            error: e_3_1\n          };\n        } finally {\n          try {\n            if (stretchy_1_1 && !stretchy_1_1.done && (_c = stretchy_1.return)) _c.call(stretchy_1);\n          } finally {\n            if (e_3) throw e_3.error;\n          }\n        }\n      }\n    };\n\n    class_1.prototype.getTableData = function () {\n      if (this.data) {\n        return this.data;\n      }\n\n      var H = new Array(this.numRows).fill(0);\n      var D = new Array(this.numRows).fill(0);\n      var W = new Array(this.numCols).fill(0);\n      var NH = new Array(this.numRows);\n      var ND = new Array(this.numRows);\n      var LW = [0];\n      var rows = this.tableRows;\n\n      for (var j = 0; j < rows.length; j++) {\n        var M = 0;\n        var row = rows[j];\n        var align = row.node.attributes.get('rowalign');\n\n        for (var i = 0; i < row.numCells; i++) {\n          var cell = row.getChild(i);\n          M = this.updateHDW(cell, i, j, align, H, D, W, M);\n          this.recordPWidthCell(cell, i);\n        }\n\n        NH[j] = H[j];\n        ND[j] = D[j];\n\n        if (row.labeled) {\n          M = this.updateHDW(row.childNodes[0], 0, j, align, H, D, LW, M);\n        }\n\n        this.extendHD(j, H, D, M);\n        this.extendHD(j, NH, ND, M);\n      }\n\n      var L = LW[0];\n      this.data = {\n        H: H,\n        D: D,\n        W: W,\n        NH: NH,\n        ND: ND,\n        L: L\n      };\n      return this.data;\n    };\n\n    class_1.prototype.updateHDW = function (cell, i, j, align, H, D, W, M) {\n      var _a = cell.getBBox(),\n          h = _a.h,\n          d = _a.d,\n          w = _a.w;\n\n      var scale = cell.parent.bbox.rscale;\n\n      if (cell.parent.bbox.rscale !== 1) {\n        h *= scale;\n        d *= scale;\n        w *= scale;\n      }\n\n      if (this.node.getProperty('useHeight')) {\n        if (h < .75) h = .75;\n        if (d < .25) d = .25;\n      }\n\n      var m = 0;\n      align = cell.node.attributes.get('rowalign') || align;\n\n      if (align !== 'baseline' && align !== 'axis') {\n        m = h + d;\n        h = d = 0;\n      }\n\n      if (h > H[j]) H[j] = h;\n      if (d > D[j]) D[j] = d;\n      if (m > M) M = m;\n      if (W && w > W[i]) W[i] = w;\n      return M;\n    };\n\n    class_1.prototype.extendHD = function (i, H, D, M) {\n      var d = (M - (H[i] + D[i])) / 2;\n      if (d < .00001) return;\n      H[i] += d;\n      D[i] += d;\n    };\n\n    class_1.prototype.recordPWidthCell = function (cell, i) {\n      if (cell.childNodes[0] && cell.childNodes[0].getBBox().pwidth) {\n        this.pwidthCells.push([cell, i]);\n      }\n    };\n\n    class_1.prototype.computeBBox = function (bbox, _recompute) {\n      if (_recompute === void 0) {\n        _recompute = false;\n      }\n\n      var _a = this.getTableData(),\n          H = _a.H,\n          D = _a.D;\n\n      var height, width;\n\n      if (this.node.attributes.get('equalrows')) {\n        var HD = this.getEqualRowHeight();\n        height = numeric_js_1.sum([].concat(this.rLines, this.rSpace)) + HD * this.numRows;\n      } else {\n        height = numeric_js_1.sum(H.concat(D, this.rLines, this.rSpace));\n      }\n\n      height += 2 * (this.fLine + this.fSpace[1]);\n      var CW = this.getComputedWidths();\n      width = numeric_js_1.sum(CW.concat(this.cLines, this.cSpace)) + 2 * (this.fLine + this.fSpace[0]);\n      var w = this.node.attributes.get('width');\n\n      if (w !== 'auto') {\n        width = Math.max(this.length2em(w, 0) + 2 * this.fLine, width);\n      }\n\n      var _b = __read(this.getBBoxHD(height), 2),\n          h = _b[0],\n          d = _b[1];\n\n      bbox.h = h;\n      bbox.d = d;\n      bbox.w = width;\n\n      var _c = __read(this.getBBoxLR(), 2),\n          L = _c[0],\n          R = _c[1];\n\n      bbox.L = L;\n      bbox.R = R;\n\n      if (!string_js_1.isPercent(w)) {\n        this.setColumnPWidths();\n      }\n    };\n\n    class_1.prototype.setChildPWidths = function (_recompute, cwidth, _clear) {\n      var width = this.node.attributes.get('width');\n      if (!string_js_1.isPercent(width)) return false;\n\n      if (!this.hasLabels) {\n        this.bbox.pwidth = '';\n        this.container.bbox.pwidth = '';\n      }\n\n      var _a = this.bbox,\n          w = _a.w,\n          L = _a.L,\n          R = _a.R;\n      var labelInWidth = this.node.attributes.get('data-width-includes-label');\n      var W = Math.max(w, this.length2em(width, Math.max(cwidth, L + w + R))) - (labelInWidth ? L + R : 0);\n      var cols = this.node.attributes.get('equalcolumns') ? Array(this.numCols).fill(this.percent(1 / Math.max(1, this.numCols))) : this.getColumnAttributes('columnwidth', 0);\n      this.cWidths = this.getColumnWidthsFixed(cols, W);\n      var CW = this.getComputedWidths();\n      this.pWidth = numeric_js_1.sum(CW.concat(this.cLines, this.cSpace)) + 2 * (this.fLine + this.fSpace[0]);\n\n      if (this.isTop) {\n        this.bbox.w = this.pWidth;\n      }\n\n      this.setColumnPWidths();\n\n      if (this.pWidth !== w) {\n        this.parent.invalidateBBox();\n      }\n\n      return this.pWidth !== w;\n    };\n\n    class_1.prototype.setColumnPWidths = function () {\n      var e_4, _a;\n\n      var W = this.cWidths;\n\n      try {\n        for (var _b = __values(this.pwidthCells), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var _d = __read(_c.value, 2),\n              cell = _d[0],\n              i = _d[1];\n\n          if (cell.setChildPWidths(false, W[i])) {\n            cell.invalidateBBox();\n            cell.getBBox();\n          }\n        }\n      } catch (e_4_1) {\n        e_4 = {\n          error: e_4_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_4) throw e_4.error;\n        }\n      }\n    };\n\n    class_1.prototype.getBBoxHD = function (height) {\n      var _a = __read(this.getAlignmentRow(), 2),\n          align = _a[0],\n          row = _a[1];\n\n      if (row === null) {\n        var a = this.font.params.axis_height;\n        var h2 = height / 2;\n        var HD = {\n          top: [0, height],\n          center: [h2, h2],\n          bottom: [height, 0],\n          baseline: [h2, h2],\n          axis: [h2 + a, h2 - a]\n        };\n        return HD[align] || [h2, h2];\n      } else {\n        var y = this.getVerticalPosition(row, align);\n        return [y, height - y];\n      }\n    };\n\n    class_1.prototype.getBBoxLR = function () {\n      if (this.hasLabels) {\n        var attributes = this.node.attributes;\n        var side = attributes.get('side');\n\n        var _a = __read(this.getPadAlignShift(side), 2),\n            pad = _a[0],\n            align = _a[1];\n\n        var labels = this.hasLabels && !!attributes.get('data-width-includes-label');\n\n        if (labels && this.frame && this.fSpace[0]) {\n          pad -= this.fSpace[0];\n        }\n\n        return align === 'center' && !labels ? [pad, pad] : side === 'left' ? [pad, 0] : [0, pad];\n      }\n\n      return [0, 0];\n    };\n\n    class_1.prototype.getPadAlignShift = function (side) {\n      var L = this.getTableData().L;\n      var sep = this.length2em(this.node.attributes.get('minlabelspacing'));\n      var pad = L + sep;\n\n      var _a = __read(this.styles == null ? ['', ''] : [this.styles.get('padding-left'), this.styles.get('padding-right')], 2),\n          lpad = _a[0],\n          rpad = _a[1];\n\n      if (lpad || rpad) {\n        pad = Math.max(pad, this.length2em(lpad || '0'), this.length2em(rpad || '0'));\n      }\n\n      var _b = __read(this.getAlignShift(), 2),\n          align = _b[0],\n          shift = _b[1];\n\n      if (align === side) {\n        shift = side === 'left' ? Math.max(pad, shift) - pad : Math.min(-pad, shift) + pad;\n      }\n\n      return [pad, align, shift];\n    };\n\n    class_1.prototype.getAlignShift = function () {\n      return this.isTop ? _super.prototype.getAlignShift.call(this) : [this.container.getChildAlign(this.containerI), 0];\n    };\n\n    class_1.prototype.getWidth = function () {\n      return this.pWidth || this.getBBox().w;\n    };\n\n    class_1.prototype.getEqualRowHeight = function () {\n      var _a = this.getTableData(),\n          H = _a.H,\n          D = _a.D;\n\n      var HD = Array.from(H.keys()).map(function (i) {\n        return H[i] + D[i];\n      });\n      return Math.max.apply(Math, HD);\n    };\n\n    class_1.prototype.getComputedWidths = function () {\n      var _this = this;\n\n      var W = this.getTableData().W;\n      var CW = Array.from(W.keys()).map(function (i) {\n        return typeof _this.cWidths[i] === 'number' ? _this.cWidths[i] : W[i];\n      });\n\n      if (this.node.attributes.get('equalcolumns')) {\n        CW = Array(CW.length).fill(numeric_js_1.max(CW));\n      }\n\n      return CW;\n    };\n\n    class_1.prototype.getColumnWidths = function () {\n      var width = this.node.attributes.get('width');\n\n      if (this.node.attributes.get('equalcolumns')) {\n        return this.getEqualColumns(width);\n      }\n\n      var swidths = this.getColumnAttributes('columnwidth', 0);\n\n      if (width === 'auto') {\n        return this.getColumnWidthsAuto(swidths);\n      }\n\n      if (string_js_1.isPercent(width)) {\n        return this.getColumnWidthsPercent(swidths);\n      }\n\n      return this.getColumnWidthsFixed(swidths, this.length2em(width));\n    };\n\n    class_1.prototype.getEqualColumns = function (width) {\n      var n = Math.max(1, this.numCols);\n      var cwidth;\n\n      if (width === 'auto') {\n        var W = this.getTableData().W;\n        cwidth = numeric_js_1.max(W);\n      } else if (string_js_1.isPercent(width)) {\n        cwidth = this.percent(1 / n);\n      } else {\n        var w = numeric_js_1.sum([].concat(this.cLines, this.cSpace)) + 2 * this.fSpace[0];\n        cwidth = Math.max(0, this.length2em(width) - w) / n;\n      }\n\n      return Array(this.numCols).fill(cwidth);\n    };\n\n    class_1.prototype.getColumnWidthsAuto = function (swidths) {\n      var _this = this;\n\n      return swidths.map(function (x) {\n        if (x === 'auto' || x === 'fit') return null;\n        if (string_js_1.isPercent(x)) return x;\n        return _this.length2em(x);\n      });\n    };\n\n    class_1.prototype.getColumnWidthsPercent = function (swidths) {\n      var _this = this;\n\n      var hasFit = swidths.indexOf('fit') >= 0;\n      var W = (hasFit ? this.getTableData() : {\n        W: null\n      }).W;\n      return Array.from(swidths.keys()).map(function (i) {\n        var x = swidths[i];\n        if (x === 'fit') return null;\n        if (x === 'auto') return hasFit ? W[i] : null;\n        if (string_js_1.isPercent(x)) return x;\n        return _this.length2em(x);\n      });\n    };\n\n    class_1.prototype.getColumnWidthsFixed = function (swidths, width) {\n      var _this = this;\n\n      var indices = Array.from(swidths.keys());\n      var fit = indices.filter(function (i) {\n        return swidths[i] === 'fit';\n      });\n      var auto = indices.filter(function (i) {\n        return swidths[i] === 'auto';\n      });\n      var n = fit.length || auto.length;\n      var W = (n ? this.getTableData() : {\n        W: null\n      }).W;\n      var cwidth = width - numeric_js_1.sum([].concat(this.cLines, this.cSpace)) - 2 * this.fSpace[0];\n      var dw = cwidth;\n      indices.forEach(function (i) {\n        var x = swidths[i];\n        dw -= x === 'fit' || x === 'auto' ? W[i] : _this.length2em(x, cwidth);\n      });\n      var fw = n && dw > 0 ? dw / n : 0;\n      return indices.map(function (i) {\n        var x = swidths[i];\n        if (x === 'fit') return W[i] + fw;\n        if (x === 'auto') return W[i] + (fit.length === 0 ? fw : 0);\n        return _this.length2em(x, cwidth);\n      });\n    };\n\n    class_1.prototype.getVerticalPosition = function (i, align) {\n      var equal = this.node.attributes.get('equalrows');\n\n      var _a = this.getTableData(),\n          H = _a.H,\n          D = _a.D;\n\n      var HD = equal ? this.getEqualRowHeight() : 0;\n      var space = this.getRowHalfSpacing();\n      var y = this.fLine;\n\n      for (var j = 0; j < i; j++) {\n        y += space[j] + (equal ? HD : H[j] + D[j]) + space[j + 1] + this.rLines[j];\n      }\n\n      var _b = __read(equal ? [(HD + H[i] - D[i]) / 2, (HD - H[i] + D[i]) / 2] : [H[i], D[i]], 2),\n          h = _b[0],\n          d = _b[1];\n\n      var offset = {\n        top: 0,\n        center: space[i] + (h + d) / 2,\n        bottom: space[i] + h + d + space[i + 1],\n        baseline: space[i] + h,\n        axis: space[i] + h - .25\n      };\n      y += offset[align] || 0;\n      return y;\n    };\n\n    class_1.prototype.getEmHalfSpacing = function (fspace, space, scale) {\n      if (scale === void 0) {\n        scale = 1;\n      }\n\n      var fspaceEm = this.em(fspace * scale);\n      var spaceEm = this.addEm(space, 2 / scale);\n      spaceEm.unshift(fspaceEm);\n      spaceEm.push(fspaceEm);\n      return spaceEm;\n    };\n\n    class_1.prototype.getRowHalfSpacing = function () {\n      var space = this.rSpace.map(function (x) {\n        return x / 2;\n      });\n      space.unshift(this.fSpace[1]);\n      space.push(this.fSpace[1]);\n      return space;\n    };\n\n    class_1.prototype.getColumnHalfSpacing = function () {\n      var space = this.cSpace.map(function (x) {\n        return x / 2;\n      });\n      space.unshift(this.fSpace[0]);\n      space.push(this.fSpace[0]);\n      return space;\n    };\n\n    class_1.prototype.getAlignmentRow = function () {\n      var _a = __read(string_js_1.split(this.node.attributes.get('align')), 2),\n          align = _a[0],\n          row = _a[1];\n\n      if (row == null) return [align, null];\n      var i = parseInt(row);\n      if (i < 0) i += this.numRows + 1;\n      return [align, i < 1 || i > this.numRows ? null : i - 1];\n    };\n\n    class_1.prototype.getColumnAttributes = function (name, i) {\n      if (i === void 0) {\n        i = 1;\n      }\n\n      var n = this.numCols - i;\n      var columns = this.getAttributeArray(name);\n      if (columns.length === 0) return null;\n\n      while (columns.length < n) {\n        columns.push(columns[columns.length - 1]);\n      }\n\n      if (columns.length > n) {\n        columns.splice(n);\n      }\n\n      return columns;\n    };\n\n    class_1.prototype.getRowAttributes = function (name, i) {\n      if (i === void 0) {\n        i = 1;\n      }\n\n      var n = this.numRows - i;\n      var rows = this.getAttributeArray(name);\n      if (rows.length === 0) return null;\n\n      while (rows.length < n) {\n        rows.push(rows[rows.length - 1]);\n      }\n\n      if (rows.length > n) {\n        rows.splice(n);\n      }\n\n      return rows;\n    };\n\n    class_1.prototype.getAttributeArray = function (name) {\n      var value = this.node.attributes.get(name);\n      if (!value) return [this.node.attributes.getDefault(name)];\n      return string_js_1.split(value);\n    };\n\n    class_1.prototype.addEm = function (list, n) {\n      var _this = this;\n\n      if (n === void 0) {\n        n = 1;\n      }\n\n      if (!list) return null;\n      return list.map(function (x) {\n        return _this.em(x / n);\n      });\n    };\n\n    class_1.prototype.convertLengths = function (list) {\n      var _this = this;\n\n      if (!list) return null;\n      return list.map(function (x) {\n        return _this.length2em(x);\n      });\n    };\n\n    return class_1;\n  }(Base);\n}\n\nexports.CommonMtableMixin = CommonMtableMixin;","map":{"version":3,"mappings":"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","names":["CommonMtableMixin","Base","__extends","args","_this","numCols","numeric_js_1","tableRows","map","numCells","numRows","childNodes","length","hasLabels","reduce","value","row","node","isKind","findContainer","isTop","container","parent","jax","table","getPercentageWidth","attributes","frame","get","fLine","fSpace","convertLengths","getAttributeArray","cSpace","getColumnAttributes","rSpace","getRowAttributes","cLines","x","rLines","cWidths","getColumnWidths","stretchRows","stretchColumns","Object","class_1","notParent","containerI","childPosition","bbox","pwidth","BBox_js_1","fullWidth","width","string_js_1","equal","HD","getEqualRowHeight","getTableData","H","D","rows","i","hd","stretchChildren","stretchColumn","W","stretchy","_e","cell","getChild","child","stretch","dir","canStretch","push","count","nodeCount","all","_g","noStretch","getBBox","w","stretchy_1_1","coreMO","getStretchedVariant","data","Array","fill","NH","ND","LW","j","M","align","updateHDW","recordPWidthCell","labeled","extendHD","L","h","d","scale","rscale","getProperty","m","pwidthCells","_recompute","height","concat","CW","getComputedWidths","Math","max","length2em","getBBoxHD","getBBoxLR","R","setColumnPWidths","cwidth","_clear","labelInWidth","cols","percent","getColumnWidthsFixed","pWidth","invalidateBBox","_c","setChildPWidths","getAlignmentRow","a","font","params","axis_height","h2","top","center","bottom","baseline","axis","y","getVerticalPosition","side","getPadAlignShift","pad","labels","sep","styles","lpad","rpad","getAlignShift","shift","min","_super","call","getChildAlign","from","keys","apply","getEqualColumns","swidths","getColumnWidthsAuto","getColumnWidthsPercent","n","hasFit","indexOf","indices","fit","filter","auto","dw","forEach","fw","space","getRowHalfSpacing","offset","fspace","fspaceEm","em","spaceEm","addEm","unshift","parseInt","name","columns","splice","getDefault","list","exports"],"sources":["/home/kinzoku99/Desktop/ProjectIO/frontend/node_modules/mathjax-full/ts/output/common/Wrappers/mtable.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the CommonMtable wrapper mixin for the MmlMtable object\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {AnyWrapper, WrapperConstructor, Constructor} from '../Wrapper.js';\nimport {CommonMtr} from './mtr.js';\nimport {CommonMo} from './mo.js';\nimport {BBox} from '../../../util/BBox.js';\nimport {DIRECTION} from '../FontData.js';\nimport {split, isPercent} from '../../../util/string.js';\nimport {sum, max} from '../../../util/numeric.js';\n\n/*****************************************************************/\n/**\n * The heights, depths, and widths of the rows and columns\n * Plus the natural height and depth (i.e., without the labels)\n * Plus the label column width\n */\nexport type TableData = {\n  H: number[];\n  D: number[];\n  W: number[];\n  NH: number[];\n  ND: number[];\n  L: number;\n};\n\n/**\n * An array of table dimensions\n */\nexport type ColumnWidths = (string | number | null)[];\n\n/*****************************************************************/\n/**\n * The CommonMtable interface\n *\n * @template C   The class for table cells\n * @template R   The class for table rows\n */\nexport interface CommonMtable<C extends AnyWrapper, R extends CommonMtr<C>> extends AnyWrapper {\n\n  /**\n   * The number of columns and rows in the table\n   */\n  numCols: number;\n  numRows: number;\n\n  /**\n   * True if there are labeled rows\n   */\n  hasLabels: boolean;\n\n  /**\n   * True if this mtable is the top element, or in a top-most mrow\n   */\n  isTop: boolean;\n\n  /**\n   * The parent node of this table (skipping non-parents and mrows)\n   *   and the position of the table as a child node\n   */\n  container: AnyWrapper;\n  containerI: number;\n\n  /**\n   * The spacing and line data\n   */\n  frame: boolean;\n  fLine: number;\n  fSpace: number[];\n  cSpace: number[];\n  rSpace: number[];\n  cLines: number[];\n  rLines: number[];\n  cWidths: (number | string)[];\n\n  /**\n   * The bounding box information for the table rows and columns\n   */\n  data: TableData;\n\n  /**\n   * The table cells that have percentage-width content\n   */\n  pwidthCells: [C, number][];\n\n  /**\n   * The full width of a percentage-width table\n   */\n  pWidth: number;\n\n  /**\n   * The rows of the table\n   */\n  readonly tableRows: R[];\n\n  /**\n   * @override\n   */\n  childNodes: R[];\n\n  /**\n   * Find the container and the child position of the table\n   */\n  findContainer(): void;\n\n  /**\n   * If the table has a precentage width or has labels, set the pwidth of the bounding box\n   */\n  getPercentageWidth(): void;\n\n  /**\n   * Stretch the rows to the equal height or natural height\n   */\n  stretchRows(): void;\n\n  /**\n   * Stretch the columns to their proper widths\n   */\n  stretchColumns(): void;\n\n  /**\n   * Handle horizontal stretching within the ith column\n   *\n   * @param {number} i   The column number\n   * @param {number} W   The computed width of the column (or null of not computed)\n   */\n  stretchColumn(i: number, W: number): void;\n\n  /**\n   * Determine the row heights and depths, the column widths,\n   * and the natural width and height of the table.\n   *\n   * @return {TableData}  The dimensions of the rows and columns\n   */\n  getTableData(): TableData;\n\n  /**\n   * @param {C} cell         The cell whose height, depth, and width are to be added into the H, D, W arrays\n   * @param {number} i       The column number for the cell\n   * @param {number} j       The row number for the cell\n   * @param {string} align   The row alignment\n   * @param {number[]} H     The maximum height for each of the rows\n   * @param {number[]} D     The maximum depth for each of the rows\n   * @param {number[]} W     The maximum width for each column\n   * @param {number} M       The current height for items aligned top and bottom\n   * @return {number}        The updated value for M\n   */\n  updateHDW(cell: C, i: number, j: number, align: string, H: number[], D: number[], W: number[], M: number): number;\n\n  /**\n   * Extend the H and D of a row to cover the maximum height needed by top/bottom aligned items\n   *\n   * @param {number} i     The row whose hight and depth should be adjusted\n   * @param {number[]} H   The row heights\n   * @param {number[]} D   The row depths\n   * @param {number} M     The maximum height of top/bottom aligned items\n   */\n  extendHD(i: number, H: number[], D: number[], M: number): void;\n\n  /**\n   * Set cell widths for columns with percentage width children\n   */\n  setColumnPWidths(): void;\n\n  /**\n   * @param {number} height   The total height of the table\n   * @return {number[]}       The [height, depth] for the aligned table\n   */\n  getBBoxHD(height: number): number[];\n\n  /**\n   * Get bbox left and right amounts to cover labels\n   */\n  getBBoxLR(): number[];\n\n  /**\n   * @param {string} side                 The side for the labels\n   * @return {[number, string, number]}   The padding, alignment, and shift amounts\n   */\n  getPadAlignShift(side: string): [number, string, number];\n\n  /**\n   * @return {number}    The true width of the table (without labels)\n   */\n  getWidth(): number;\n\n  /**\n   * @return {number}   The maximum height of a row\n   */\n  getEqualRowHeight(): number;\n\n  /**\n   * @return {number[]}   The array of computed widths\n   */\n  getComputedWidths(): number[];\n\n  /**\n   * Determine the column widths that can be computed (and need to be set).\n   * The resulting arrays will have numbers for fixed-size arrays,\n   *   strings for percentage sizes that can't be determined now,\n   *   and null for stretchy columns tht will expand to fill the extra space.\n   * Depending on the width specified for the table, different column\n   *  values can be determined.\n   *\n   * @return {ColumnWidths}  The array of widths\n   */\n  getColumnWidths(): ColumnWidths;\n\n  /**\n   * For tables with equal columns, get the proper amount per row.\n   *\n   * @return {ColumnWidths}  The array of widths\n   */\n  getEqualColumns(width: string): ColumnWidths;\n\n  /**\n   * For tables with width=\"auto\", auto and fit columns\n   * will end up being natural width, so don't need to\n   * set those explicitly.\n   *\n   * @return {ColumnWidths}  The array of widths\n   */\n  getColumnWidthsAuto(swidths: string[]): ColumnWidths;\n\n  /**\n   * For tables with percentage widths, let 'fit' columns (or 'auto'\n   * columns if there are not 'fit' ones) will stretch automatically,\n   * but for 'auto' columns (when there are 'fit' ones), set the size\n   * to the natural size of the column.\n   *\n   * @param {string[]} widths  Strings giving the widths\n   * @return {ColumnWidths}    The array of widths\n   */\n  getColumnWidthsPercent(widths: string[]): ColumnWidths;\n\n  /**\n   * For fixed-width tables, compute the column widths of all columns.\n   *\n   * @return {ColumnWidths}  The array of widths\n   */\n  getColumnWidthsFixed(swidths: string[], width: number): ColumnWidths;\n\n  /**\n   * @param {number} i      The row number (starting at 0)\n   * @param {string} align  The alignment on that row\n   * @return {number}       The offest of the alignment position from the top of the table\n   */\n  getVerticalPosition(i: number, align: string): number;\n\n  /**\n   * @param {number} fspace   The frame spacing to use\n   * @param {number[]} space  The array of spacing values to convert to strings\n   * @param {number} scale    A scaling factor to use for the sizes\n   * @return {string[]}       The half-spacing as stings with units of \"em\"\n   *                           with frame spacing at the beginning and end\n   */\n  getEmHalfSpacing(fspace: number, space: number[], scale?: number): string[];\n\n  /**\n   * @return {number[]}   The half-spacing for rows with frame spacing at the ends\n   */\n  getRowHalfSpacing(): number[];\n\n  /**\n   * @return {number[]}   The half-spacing for columns with frame spacing at the ends\n   */\n  getColumnHalfSpacing(): number[];\n\n  /**\n   * @return {[string,number|null]}  The alignment and row number (based at 0) or null\n   */\n  getAlignmentRow(): [string, number | null];\n\n  /**\n   * @param {string} name           The name of the attribute to get as an array\n   * @param {number=} i             Return this many fewer than numCols entries\n   * @return {string[]}             The array of values in the given attribute, split at spaces,\n   *                                 padded to the number of table columns (minus 1) by repeating the last entry\n   */\n  getColumnAttributes(name: string, i?: number): string[];\n\n  /**\n   * @param {string} name           The name of the attribute to get as an array\n   * @param {number=} i             Return this many fewer than numRows entries\n   * @return {string[]}             The array of values in the given attribute, split at spaces,\n   *                                 padded to the number of table rows (minus 1) by repeating the last entry\n   */\n  getRowAttributes(name: string, i?: number): string[];\n\n  /**\n   * @param {string} name           The name of the attribute to get as an array\n   * @return {string[]}             The array of values in the given attribute, split at spaces\n   *                                 (after leading and trailing spaces are removed, and multiple\n   *                                  spaces have been collapsed to one).\n   */\n  getAttributeArray(name: string): string[];\n\n  /**\n   * Adds \"em\" to a list of dimensions, after dividing by n (defaults to 1).\n   *\n   * @param {string[]} list   The array of dimensions (in em's)\n   * @param {nunber=} n       The number to divide each dimension by after converted\n   * @return {string[]}       The array of values with \"em\" added\n   */\n  addEm(list: number[], n?: number): string[];\n\n  /**\n   * Converts an array of dimensions (with arbitrary units) to an array of numbers\n   *   representing the dimensions in units of em's.\n   *\n   * @param {string[]} list   The array of dimensions to be turned into em's\n   * @return {number[]}       The array of values converted to em's\n   */\n  convertLengths(list: string[]): number[];\n\n}\n\n/**\n * Shorthand for the CommonMtable constructor\n */\nexport type MtableConstructor<C extends AnyWrapper, R extends CommonMtr<C>> = Constructor<CommonMtable<C, R>>;\n\n/*****************************************************************/\n/**\n * The CommonMtable wrapper mixin for the MmlMtable object\n *\n * @template C  The table cell class\n * @temlpate R  the table row class\n * @template T  The Wrapper class constructor type\n */\nexport function CommonMtableMixin<\n  C extends AnyWrapper,\n  R extends CommonMtr<C>,\n  T extends WrapperConstructor\n>(Base: T): MtableConstructor<C, R> & T {\n\n  return class extends Base {\n\n    /**\n     * The number of columns in the table\n     */\n    public numCols: number = 0;\n    /**\n     * The number of rows in the table\n     */\n    public numRows: number = 0;\n\n    /**\n     * True if there are labeled rows\n     */\n    public hasLabels: boolean;\n\n    /**\n     * True if this mtable is the top element, or in a top-most mrow\n     */\n    public isTop: boolean;\n\n    /**\n     * The parent node of this table (skipping non-parents and mrows)\n     */\n    public container: AnyWrapper;\n    /**\n     * The position of the table as a child node of its container\n     */\n    public containerI: number;\n\n    /**\n     * True if there is a frame\n     */\n    public frame: boolean;\n    /**\n     * The size of the frame line (or 0 if none)\n     */\n    public fLine: number;\n    /**\n     * frame spacing on the left and right\n     */\n    public fSpace: number[];\n    /**\n     * The spacing between columns\n     */\n    public cSpace: number[];\n    /**\n     * The spacing between rows\n     */\n    public rSpace: number[];\n    /**\n     * The width of columns lines (or 0 if no line for the column)\n     */\n    public cLines: number[];\n    /**\n     * The width of row lines (or 0 if no lone for that row)\n     */\n    public rLines: number[];\n    /**\n     * The column widths (or percentages, etc.)\n     */\n    public cWidths: (number | string)[];\n\n    /**\n     * The bounding box information for the table rows and columns\n     */\n    public data: TableData = null;\n\n    /**\n     * The table cells that have percentage-width content\n     */\n    public pwidthCells: [C, number][] = [];\n\n    /**\n     * The full width of a percentage-width table\n     */\n    public pWidth: number = 0;\n\n    /**\n     * @return {R[]}  The rows of the table\n     */\n    get tableRows(): R[] {\n      return this.childNodes;\n    }\n\n    /******************************************************************/\n\n    /**\n     * @override\n     * @constructor\n     */\n    constructor(...args: any[]) {\n      super(...args);\n      //\n      // Determine the number of columns and rows, and whether the table is stretchy\n      //\n      this.numCols = max(this.tableRows.map(row => row.numCells));\n      this.numRows = this.childNodes.length;\n      this.hasLabels = this.childNodes.reduce((value, row) => value || row.node.isKind('mlabeledtr'), false);\n      this.findContainer();\n      this.isTop = !this.container || (this.container.node.isKind('math') && !this.container.parent);\n      if (this.isTop) {\n        this.jax.table = this;\n      }\n      this.getPercentageWidth();\n      //\n      // Get the frame, row, and column parameters\n      //\n      const attributes = this.node.attributes;\n      this.frame = attributes.get('frame') !== 'none';\n      this.fLine = (this.frame && attributes.get('frame') ? .07 : 0);\n      this.fSpace = (this.frame ? this.convertLengths(this.getAttributeArray('framespacing')) : [0, 0]);\n      this.cSpace = this.convertLengths(this.getColumnAttributes('columnspacing'));\n      this.rSpace = this.convertLengths(this.getRowAttributes('rowspacing'));\n      this.cLines = this.getColumnAttributes('columnlines').map(x => (x === 'none' ? 0 : .07));\n      this.rLines = this.getRowAttributes('rowlines').map(x => (x === 'none' ? 0 : .07));\n      this.cWidths = this.getColumnWidths();\n      //\n      // Stretch the rows and columns\n      //\n      this.stretchRows();\n      this.stretchColumns();\n    }\n\n    /**\n     * Find the container and the child position of the table\n     */\n    public findContainer() {\n      let node = this as AnyWrapper;\n      let parent = node.parent as AnyWrapper;\n      while (parent && (parent.node.notParent || parent.node.isKind('mrow'))) {\n        node = parent;\n        parent = parent.parent;\n      }\n      this.container = parent;\n      this.containerI = node.node.childPosition();\n    }\n\n    /**\n     * If the table has a precentage width or has labels, set the pwidth of the bounding box\n     */\n    public getPercentageWidth() {\n      if (this.hasLabels) {\n        this.bbox.pwidth = BBox.fullWidth;\n      } else {\n        const width = this.node.attributes.get('width') as string;\n        if (isPercent(width)) {\n          this.bbox.pwidth = width;\n        }\n      }\n    }\n\n    /**\n     * Stretch the rows to the equal height or natural height\n     */\n    public stretchRows() {\n      const equal = this.node.attributes.get('equalrows') as boolean;\n      const HD = (equal ? this.getEqualRowHeight() : 0);\n      const {H, D} = (equal ? this.getTableData() : {H: [0], D: [0]});\n      const rows = this.tableRows;\n      for (let i = 0; i < this.numRows; i++) {\n        const hd = (equal ? [(HD + H[i] - D[i]) / 2, (HD - H[i] + D[i]) / 2] : null);\n        rows[i].stretchChildren(hd);\n      }\n    }\n\n    /**\n     * Stretch the columns to their proper widths\n     */\n    public stretchColumns() {\n      for (let i = 0; i < this.numCols; i++) {\n        const width = (typeof this.cWidths[i] === 'number' ? this.cWidths[i] as number : null);\n        this.stretchColumn(i, width);\n      }\n    }\n\n    /**\n     * Handle horizontal stretching within the ith column\n     *\n     * @param {number} i   The column number\n     * @param {number} W   The computed width of the column (or null of not computed)\n     */\n    public stretchColumn(i: number, W: number) {\n      let stretchy: AnyWrapper[] = [];\n      //\n      //  Locate and count the stretchy children\n      //\n      for (const row of this.tableRows) {\n        const cell = row.getChild(i);\n        if (cell) {\n          const child = cell.childNodes[0];\n          if (child.stretch.dir === DIRECTION.None &&\n              child.canStretch(DIRECTION.Horizontal)) {\n            stretchy.push(child);\n          }\n        }\n      }\n      let count = stretchy.length;\n      let nodeCount = this.childNodes.length;\n      if (count && nodeCount > 1) {\n        if (W === null) {\n          W = 0;\n          //\n          //  If all the children are stretchy, find the largest one,\n          //  otherwise, find the width of the non-stretchy children.\n          //\n          let all = (count > 1 && count === nodeCount);\n          for (const row of this.tableRows) {\n            const cell = row.getChild(i);\n            if (cell) {\n              const child = cell.childNodes[0];\n              const noStretch = (child.stretch.dir === DIRECTION.None);\n              if (all || noStretch) {\n                const {w} = child.getBBox(noStretch);\n                if (w > W) {\n                  W = w;\n                }\n              }\n            }\n          }\n        }\n        //\n        //  Stretch the stretchable children\n        //\n        for (const child of stretchy) {\n          (child.coreMO() as CommonMo).getStretchedVariant([W]);\n        }\n      }\n    }\n\n    /******************************************************************/\n\n    /**\n     * Determine the row heights and depths, the column widths,\n     * and the natural width and height of the table.\n     *\n     * @return {TableData}  The dimensions of the rows and columns\n     */\n    public getTableData(): TableData {\n      if (this.data) {\n        return this.data;\n      }\n      const H = new Array(this.numRows).fill(0);\n      const D = new Array(this.numRows).fill(0);\n      const W = new Array(this.numCols).fill(0);\n      const NH = new Array(this.numRows);\n      const ND = new Array(this.numRows);\n      const LW = [0];\n      const rows = this.tableRows;\n      for (let j = 0; j < rows.length; j++) {\n        let M = 0;\n        const row = rows[j];\n        const align = row.node.attributes.get('rowalign') as string;\n        for (let i = 0; i < row.numCells; i++) {\n          const cell = row.getChild(i);\n          M = this.updateHDW(cell, i, j, align, H, D, W, M);\n          this.recordPWidthCell(cell, i);\n        }\n        NH[j] = H[j];\n        ND[j] = D[j];\n        if (row.labeled) {\n          M = this.updateHDW(row.childNodes[0], 0, j, align, H, D, LW, M);\n        }\n        this.extendHD(j, H, D, M);\n        this.extendHD(j, NH, ND, M);\n      }\n      const L = LW[0];\n      this.data = {H, D, W, NH, ND, L};\n      return this.data;\n    }\n\n    /**\n     * @override\n     */\n    public updateHDW(\n      cell: C, i: number, j: number, align: string, H: number[], D: number[], W: number[], M: number\n    ): number {\n      let {h, d, w} = cell.getBBox();\n      const scale = cell.parent.bbox.rscale;\n      if (cell.parent.bbox.rscale !== 1) {\n        h *= scale;\n        d *= scale;\n        w *= scale;\n      }\n      if (this.node.getProperty('useHeight')) {\n        if (h < .75) h = .75;\n        if (d < .25) d = .25;\n      }\n      let m = 0;\n      align = cell.node.attributes.get('rowalign') as string || align;\n      if (align !== 'baseline' && align !== 'axis') {\n        m = h + d;\n        h = d = 0;\n      }\n      if (h > H[j]) H[j] = h;\n      if (d > D[j]) D[j] = d;\n      if (m > M) M = m;\n      if (W && w > W[i]) W[i] = w;\n      return M;\n    }\n\n    /**\n     * @override\n     */\n    public extendHD(i: number, H: number[], D: number[], M: number) {\n      const d = (M - (H[i] + D[i])) / 2;\n      if (d < .00001) return;\n      H[i] += d;\n      D[i] += d;\n    }\n\n    /**\n     * @param {C} cell     The cell to check for percentage widths\n     * @param {number} i   The column index of the cell\n     */\n    public recordPWidthCell(cell: C, i: number) {\n      if (cell.childNodes[0] && cell.childNodes[0].getBBox().pwidth) {\n        this.pwidthCells.push([cell, i]);\n      }\n    }\n\n    /**\n     * @override\n     */\n    public computeBBox(bbox: BBox, _recompute: boolean = false) {\n      const {H, D} = this.getTableData();\n      let height, width;\n      //\n      // For equal rows, use the common height and depth for all rows\n      // Otherwise, use the height and depths for each row separately.\n      // Add in the spacing, line widths, and frame size.\n      //\n      if (this.node.attributes.get('equalrows') as boolean) {\n        const HD = this.getEqualRowHeight();\n        height = sum([].concat(this.rLines, this.rSpace)) + HD * this.numRows;\n      } else {\n        height = sum(H.concat(D, this.rLines, this.rSpace));\n      }\n      height += 2 * (this.fLine + this.fSpace[1]);\n      //\n      //  Get the widths of all columns\n      //\n      const CW = this.getComputedWidths();\n      //\n      //  Get the expected width of the table\n      //\n      width = sum(CW.concat(this.cLines, this.cSpace)) + 2 * (this.fLine + this.fSpace[0]);\n      //\n      //  If the table width is not 'auto', determine the specified width\n      //    and pick the larger of the specified and computed widths.\n      //\n      const w = this.node.attributes.get('width') as string;\n      if (w !== 'auto') {\n        width = Math.max(this.length2em(w, 0) + 2 * this.fLine, width);\n      }\n      //\n      //  Return the bounding box information\n      //\n      let [h, d] = this.getBBoxHD(height);\n      bbox.h = h;\n      bbox.d = d;\n      bbox.w = width;\n      let [L, R] = this.getBBoxLR();\n      bbox.L = L;\n      bbox.R = R;\n      //\n      //  Handle cell widths if width is not a percentage\n      //\n      if (!isPercent(w)) {\n        this.setColumnPWidths();\n      }\n    }\n\n    /**\n     * @override\n     */\n    public setChildPWidths(_recompute: boolean, cwidth: number, _clear: boolean) {\n      const width = this.node.attributes.get('width') as string;\n      if (!isPercent(width)) return false;\n      if (!this.hasLabels) {\n        this.bbox.pwidth = '';\n        this.container.bbox.pwidth = '';\n      }\n      const {w, L, R} = this.bbox;\n      const labelInWidth = this.node.attributes.get('data-width-includes-label') as boolean;\n      const W = Math.max(w, this.length2em(width, Math.max(cwidth, L + w + R))) - (labelInWidth ? L + R : 0);\n      const cols = (this.node.attributes.get('equalcolumns') as boolean ?\n                    Array(this.numCols).fill(this.percent(1 / Math.max(1, this.numCols))) :\n                    this.getColumnAttributes('columnwidth', 0));\n      this.cWidths = this.getColumnWidthsFixed(cols, W);\n      const CW = this.getComputedWidths();\n      this.pWidth = sum(CW.concat(this.cLines, this.cSpace)) + 2 * (this.fLine + this.fSpace[0]);\n      if (this.isTop) {\n        this.bbox.w = this.pWidth;\n      }\n      this.setColumnPWidths();\n      if (this.pWidth !== w) {\n        this.parent.invalidateBBox();\n      }\n      return this.pWidth !== w;\n    }\n\n    /**\n     * Finalize any cells that have percentage-width content\n     */\n    public setColumnPWidths() {\n      const W = this.cWidths as number[];\n      for (const [cell, i] of this.pwidthCells) {\n        if (cell.setChildPWidths(false, W[i])) {\n          cell.invalidateBBox();\n          cell.getBBox();\n        }\n      }\n    }\n\n    /**\n     * @param {number} height   The total height of the table\n     * @return {[number, number]}  The [height, depth] for the aligned table\n     */\n    public getBBoxHD(height: number): [number, number] {\n      const [align, row] = this.getAlignmentRow();\n      if (row === null) {\n        const a = this.font.params.axis_height;\n        const h2 = height / 2;\n        const HD: {[key: string]: [number, number]} = {\n          top: [0, height],\n          center: [h2, h2],\n          bottom: [height, 0],\n          baseline: [h2, h2],\n          axis: [h2 + a, h2 - a]\n        };\n        return HD[align] || [h2, h2];\n      } else {\n        const y = this.getVerticalPosition(row, align);\n        return [y, height - y];\n      }\n    }\n\n    /**\n     * Get bbox left and right amounts to cover labels\n     */\n    public getBBoxLR() {\n      if (this.hasLabels) {\n        const attributes = this.node.attributes;\n        const side = attributes.get('side') as string;\n        let [pad, align] = this.getPadAlignShift(side);\n        //\n        // If labels are included in the width,\n        //   remove the frame spacing if there is no frame line (added by multline)\n        //   and use left or right justification rather than centering so that\n        //   there is no extra space reserved for the label on the opposite side,\n        //   (as there usually is to center the equation).\n        //\n        const labels = this.hasLabels && !!attributes.get('data-width-includes-label');\n        if (labels && this.frame && this.fSpace[0]) {\n          pad -= this.fSpace[0];\n        }\n        return (align === 'center' && !labels ? [pad, pad] :\n                side === 'left' ? [pad, 0] : [0, pad]);\n      }\n      return [0, 0];\n    }\n\n    /**\n     * @param {string} side                 The side for the labels\n     * @return {[number, string, number]}   The padding, alignment, and shift amounts\n     */\n    public getPadAlignShift(side: string): [number, string, number] {\n      //\n      //  Make sure labels don't overlap table\n      //\n      const {L} = this.getTableData();\n      const sep = this.length2em(this.node.attributes.get('minlabelspacing'));\n      let pad = L + sep;\n      const [lpad, rpad] = (this.styles == null ? ['', ''] :\n                            [this.styles.get('padding-left'), this.styles.get('padding-right')]);\n      if (lpad || rpad) {\n        pad = Math.max(pad, this.length2em(lpad || '0'), this.length2em(rpad || '0'));\n      }\n      //\n      //  Handle indentation\n      //\n      let [align, shift] = this.getAlignShift();\n      if (align === side) {\n        shift = (side === 'left' ? Math.max(pad, shift) - pad : Math.min(-pad, shift) + pad);\n      }\n      return [pad, align, shift] as [number, string, number];\n    }\n\n    /**\n     * @override\n     */\n    public getAlignShift() {\n      return (this.isTop ? super.getAlignShift() :\n              [this.container.getChildAlign(this.containerI), 0] as [string, number]);\n    }\n\n    /**\n     * @return {number}    The true width of the table (without labels)\n     */\n    public getWidth(): number {\n      return this.pWidth || this.getBBox().w;\n    }\n\n    /******************************************************************/\n\n    /**\n     * @return {number}   The maximum height of a row\n     */\n    public getEqualRowHeight(): number {\n      const {H, D} = this.getTableData();\n      const HD = Array.from(H.keys()).map(i => H[i] + D[i]);\n      return Math.max.apply(Math, HD);\n    }\n\n    /**\n     * @return {number[]}   The array of computed widths\n     */\n    public getComputedWidths(): number[] {\n      const W = this.getTableData().W;\n      let CW = Array.from(W.keys()).map(i => {\n        return (typeof this.cWidths[i] === 'number' ? this.cWidths[i] as number : W[i]);\n      });\n      if (this.node.attributes.get('equalcolumns') as boolean) {\n        CW = Array(CW.length).fill(max(CW));\n      }\n      return CW;\n    }\n\n    /**\n     * Determine the column widths that can be computed (and need to be set).\n     * The resulting arrays will have numbers for fixed-size arrays,\n     *   strings for percentage sizes that can't be determined now,\n     *   and null for stretchy columns that will expand to fill the extra space.\n     * Depending on the width specified for the table, different column\n     *  values can be determined.\n     *\n     * @return {(string|number|null)[]}  The array of widths\n     */\n    public getColumnWidths(): (string | number | null)[] {\n      const width = this.node.attributes.get('width') as string;\n      if (this.node.attributes.get('equalcolumns') as boolean) {\n        return this.getEqualColumns(width);\n      }\n      const swidths = this.getColumnAttributes('columnwidth', 0);\n      if (width === 'auto') {\n        return this.getColumnWidthsAuto(swidths);\n      }\n      if (isPercent(width)) {\n        return this.getColumnWidthsPercent(swidths);\n      }\n      return this.getColumnWidthsFixed(swidths, this.length2em(width));\n    }\n\n    /**\n     * For tables with equal columns, get the proper amount per column.\n     *\n     * @param {string} width   The width attribute of the table\n     * @return {(string|number|null)[]}  The array of widths\n     */\n    public getEqualColumns(width: string): (string | number | null)[] {\n      const n = Math.max(1, this.numCols);\n      let cwidth;\n      if (width === 'auto') {\n        const {W} = this.getTableData();\n        cwidth = max(W);\n      } else if (isPercent(width)) {\n        cwidth = this.percent(1 / n);\n      } else {\n        const w = sum([].concat(this.cLines, this.cSpace)) + 2 * this.fSpace[0];\n        cwidth = Math.max(0, this.length2em(width) - w) / n;\n      }\n      return Array(this.numCols).fill(cwidth);\n    }\n\n    /**\n     * For tables with width=\"auto\", auto and fit columns\n     * will end up being natural width, so don't need to\n     * set those explicitly.\n     *\n     * @param {string[]} swidths   The split and padded columnwidths attribute\n     * @return {ColumnWidths}  The array of widths\n     */\n    public getColumnWidthsAuto(swidths: string[]): ColumnWidths {\n      return swidths.map(x => {\n        if (x === 'auto' || x === 'fit') return null;\n        if (isPercent(x)) return x;\n        return this.length2em(x);\n      });\n    }\n\n    /**\n     * For tables with percentage widths, the 'fit' columns (or 'auto'\n     * columns if there are not 'fit' ones) will stretch automatically,\n     * but for 'auto' columns (when there are 'fit' ones), set the size\n     * to the natural size of the column.\n     *\n     * @param {string[]} swidths   The split and padded columnwidths attribute\n     * @return {ColumnWidths}      The array of widths\n     */\n    public getColumnWidthsPercent(swidths: string[]): ColumnWidths {\n      const hasFit = swidths.indexOf('fit') >= 0;\n      const {W} = (hasFit ? this.getTableData() : {W: null});\n      return Array.from(swidths.keys()).map(i => {\n        const x = swidths[i];\n        if (x === 'fit') return null;\n        if (x === 'auto') return (hasFit ? W[i] : null);\n        if (isPercent(x)) return x;\n        return this.length2em(x);\n      });\n    }\n\n    /**\n     * For fixed-width tables, compute the column widths of all columns.\n     *\n     * @param {string[]} swidths   The split and padded columnwidths attribute\n     * @param {number} width       The width of the table\n     * @return {ColumnWidths}      The array of widths\n     */\n    public getColumnWidthsFixed(swidths: string[], width: number): ColumnWidths {\n      //\n      // Get the indices of the fit and auto columns, and the number of fit or auto entries.\n      // If there are fit or auto columns, get the column widths.\n      //\n      const indices = Array.from(swidths.keys());\n      const fit = indices.filter(i => swidths[i] === 'fit');\n      const auto = indices.filter(i => swidths[i] === 'auto');\n      const n = fit.length || auto.length;\n      const {W} = (n ? this.getTableData() : {W: null});\n      //\n      // Determine the space remaining from the fixed width after the\n      //   separation and lines have been removed (cwidth), and\n      //   after the width of the columns have been removed (dw).\n      //\n      const cwidth = width - sum([].concat(this.cLines, this.cSpace)) - 2 * this.fSpace[0];\n      let dw = cwidth;\n      indices.forEach(i => {\n        const x = swidths[i];\n        dw -= (x === 'fit' || x === 'auto' ? W[i] : this.length2em(x, cwidth));\n      });\n      //\n      // Get the amount of extra space per column, or 0 (fw)\n      //\n      const fw = (n && dw > 0 ? dw / n : 0);\n      //\n      // Return the column widths (plus extra space for those that are stretching\n      //\n      return indices.map(i => {\n        const x = swidths[i];\n        if (x === 'fit') return W[i] + fw;\n        if (x === 'auto') return W[i] + (fit.length === 0 ? fw : 0);\n        return this.length2em(x, cwidth);\n      });\n    }\n\n    /**\n     * @param {number} i      The row number (starting at 0)\n     * @param {string} align  The alignment on that row\n     * @return {number}       The offest of the alignment position from the top of the table\n     */\n    public getVerticalPosition(i: number, align: string): number {\n      const equal = this.node.attributes.get('equalrows') as boolean;\n      const {H, D} = this.getTableData();\n      const HD = (equal ? this.getEqualRowHeight() : 0);\n      const space = this.getRowHalfSpacing();\n      //\n      //  Start with frame size and add in spacing, height and depth,\n      //    and line thickness for each row.\n      //\n      let y = this.fLine;\n      for (let j = 0; j < i; j++) {\n        y += space[j] + (equal ? HD : H[j] + D[j]) + space[j + 1] + this.rLines[j];\n      }\n      //\n      //  For equal rows, get updated height and depth\n      //\n      const [h, d] = (equal ? [(HD + H[i] - D[i]) / 2, (HD - H[i] + D[i]) / 2] : [H[i], D[i]]);\n      //\n      //  Add the offset into the specified row\n      //\n      const offset: {[name: string]: number} = {\n        top: 0,\n        center: space[i] + (h + d) / 2,\n        bottom: space[i] + h + d + space[i + 1],\n        baseline: space[i] + h,\n        axis: space[i] + h - .25\n      };\n      y += offset[align] || 0;\n      //\n      //  Return the final result\n      //\n      return y;\n    }\n\n    /******************************************************************/\n\n    /**\n     * @param {number} fspace   The frame spacing to use\n     * @param {number[]} space  The array of spacing values to convert to strings\n     * @param {number} scale    A scaling factor to use for the sizes\n     * @return {string[]}       The half-spacing as stings with units of \"em\"\n     *                           with frame spacing at the beginning and end\n     */\n    public getEmHalfSpacing(fspace: number, space: number[], scale: number = 1): string[] {\n      //\n      //  Get the column spacing values, and add the frame spacing values at the left and right\n      //\n      const fspaceEm = this.em(fspace * scale);\n      const spaceEm = this.addEm(space, 2 / scale);\n      spaceEm.unshift(fspaceEm);\n      spaceEm.push(fspaceEm);\n      return spaceEm;\n    }\n\n    /**\n     * @return {number[]}   The half-spacing for rows with frame spacing at the ends\n     */\n    public getRowHalfSpacing(): number[] {\n      const space = this.rSpace.map(x => x / 2);\n      space.unshift(this.fSpace[1]);\n      space.push(this.fSpace[1]);\n      return space;\n    }\n\n    /**\n     * @return {number[]}   The half-spacing for columns with frame spacing at the ends\n     */\n    public getColumnHalfSpacing(): number[] {\n      const space = this.cSpace.map(x => x / 2);\n      space.unshift(this.fSpace[0]);\n      space.push(this.fSpace[0]);\n      return space;\n    }\n\n    /**\n     * @return {[string,number|null]}  The alignment and row number (based at 0) or null\n     */\n    public getAlignmentRow(): [string, number] {\n      const [align, row] = split(this.node.attributes.get('align') as string);\n      if (row == null) return [align, null];\n      let i = parseInt(row);\n      if (i < 0) i += this.numRows + 1;\n      return [align, i < 1 || i > this.numRows ? null : i - 1];\n    }\n\n    /**\n     * @param {string} name           The name of the attribute to get as an array\n     * @param {number=} i             Return this many fewer than numCols entries\n     * @return {string[]}             The array of values in the given attribute, split at spaces,\n     *                                 padded to the number of table columns (minus 1) by repeating the last entry\n     */\n    public getColumnAttributes(name: string, i: number = 1): string[] | null {\n      const n = this.numCols - i;\n      const columns = this.getAttributeArray(name);\n      if (columns.length === 0) return null;\n      while (columns.length < n) {\n        columns.push(columns[columns.length - 1]);\n      }\n      if (columns.length > n) {\n        columns.splice(n);\n      }\n      return columns;\n    }\n\n    /**\n     * @param {string} name           The name of the attribute to get as an array\n     * @param {number=} i             Return this many fewer than numRows entries\n     * @return {string[]}             The array of values in the given attribute, split at spaces,\n     *                                 padded to the number of table rows (minus 1) by repeating the last entry\n     */\n    public getRowAttributes(name: string, i: number = 1): string[] | null {\n      const n = this.numRows - i;\n      const rows = this.getAttributeArray(name);\n      if (rows.length === 0) return null;\n      while (rows.length < n) {\n        rows.push(rows[rows.length - 1]);\n      }\n      if (rows.length > n) {\n        rows.splice(n);\n      }\n      return rows;\n    }\n\n    /**\n     * @param {string} name           The name of the attribute to get as an array\n     * @return {string[]}             The array of values in the given attribute, split at spaces\n     *                                 (after leading and trailing spaces are removed, and multiple\n     *                                  spaces have been collapsed to one).\n     */\n    public getAttributeArray(name: string): string[] {\n      const value = this.node.attributes.get(name) as string;\n      if (!value) return [this.node.attributes.getDefault(name) as string];\n      return split(value);\n    }\n\n    /**\n     * Adds \"em\" to a list of dimensions, after dividing by n (defaults to 1).\n     *\n     * @param {string[]} list   The array of dimensions (in em's)\n     * @param {nunber=} n       The number to divide each dimension by after converted\n     * @return {string[]}       The array of values with \"em\" added\n     */\n    public addEm(list: number[], n: number = 1): string[] | null {\n      if (!list) return null;\n      return list.map(x => this.em(x / n));\n    }\n\n    /**\n     * Converts an array of dimensions (with arbitrary units) to an array of numbers\n     *   representing the dimensions in units of em's.\n     *\n     * @param {string[]} list   The array of dimensions to be turned into em's\n     * @return {number[]}       The array of values converted to em's\n     */\n    public convertLengths(list: string[]): number[] | null {\n      if (!list) return null;\n      return list.map(x => this.length2em(x));\n    }\n  };\n\n}\n"]},"metadata":{},"sourceType":"script"}