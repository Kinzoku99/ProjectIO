{"ast":null,"code":"\"use strict\";\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n  return to;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar NodeUtil_js_1 = require(\"./NodeUtil.js\");\n\nvar TexConstants_js_1 = require(\"./TexConstants.js\");\n\nvar ParseUtil_js_1 = require(\"./ParseUtil.js\");\n\nvar ParseMethods;\n\n(function (ParseMethods) {\n  function variable(parser, c) {\n    var def = ParseUtil_js_1.default.getFontDef(parser);\n\n    if (parser.stack.env.multiLetterIdentifiers && parser.stack.env.font !== '') {\n      c = parser.string.substr(parser.i - 1).match(/^[a-z]+/i)[0];\n      parser.i += c.length - 1;\n\n      if (def.mathvariant === TexConstants_js_1.TexConstant.Variant.NORMAL) {\n        def.autoOP = false;\n      }\n    }\n\n    var node = parser.create('token', 'mi', def, c);\n    parser.Push(node);\n  }\n\n  ParseMethods.variable = variable;\n\n  function digit(parser, c) {\n    var mml;\n    var pattern = parser.configuration.options['digits'];\n    var n = parser.string.slice(parser.i - 1).match(pattern);\n    var def = ParseUtil_js_1.default.getFontDef(parser);\n\n    if (n) {\n      mml = parser.create('token', 'mn', def, n[0].replace(/[{}]/g, ''));\n      parser.i += n[0].length - 1;\n    } else {\n      mml = parser.create('token', 'mo', def, c);\n    }\n\n    parser.Push(mml);\n  }\n\n  ParseMethods.digit = digit;\n\n  function controlSequence(parser, _c) {\n    var name = parser.GetCS();\n    parser.parse('macro', [parser, name]);\n  }\n\n  ParseMethods.controlSequence = controlSequence;\n\n  function mathchar0mi(parser, mchar) {\n    var def = mchar.attributes || {\n      mathvariant: TexConstants_js_1.TexConstant.Variant.ITALIC\n    };\n    var node = parser.create('token', 'mi', def, mchar.char);\n    parser.Push(node);\n  }\n\n  ParseMethods.mathchar0mi = mathchar0mi;\n\n  function mathchar0mo(parser, mchar) {\n    var def = mchar.attributes || {};\n    def['stretchy'] = false;\n    var node = parser.create('token', 'mo', def, mchar.char);\n    NodeUtil_js_1.default.setProperty(node, 'fixStretchy', true);\n    parser.configuration.addNode('fixStretchy', node);\n    parser.Push(node);\n  }\n\n  ParseMethods.mathchar0mo = mathchar0mo;\n\n  function mathchar7(parser, mchar) {\n    var def = mchar.attributes || {\n      mathvariant: TexConstants_js_1.TexConstant.Variant.NORMAL\n    };\n\n    if (parser.stack.env['font']) {\n      def['mathvariant'] = parser.stack.env['font'];\n    }\n\n    var node = parser.create('token', 'mi', def, mchar.char);\n    parser.Push(node);\n  }\n\n  ParseMethods.mathchar7 = mathchar7;\n\n  function delimiter(parser, delim) {\n    var def = delim.attributes || {};\n    def = Object.assign({\n      fence: false,\n      stretchy: false\n    }, def);\n    var node = parser.create('token', 'mo', def, delim.char);\n    parser.Push(node);\n  }\n\n  ParseMethods.delimiter = delimiter;\n\n  function environment(parser, env, func, args) {\n    var end = args[0];\n    var mml = parser.itemFactory.create('begin').setProperties({\n      name: env,\n      end: end\n    });\n    mml = func.apply(void 0, __spreadArray([parser, mml], __read(args.slice(1))));\n    parser.Push(mml);\n  }\n\n  ParseMethods.environment = environment;\n})(ParseMethods || (ParseMethods = {}));\n\nexports.default = ParseMethods;","map":{"version":3,"mappings":"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","names":["ParseMethods","variable","parser","c","def","ParseUtil_js_1","getFontDef","stack","env","multiLetterIdentifiers","font","string","substr","i","match","length","mathvariant","TexConstants_js_1","Variant","NORMAL","autoOP","node","create","Push","digit","mml","pattern","configuration","options","n","slice","replace","controlSequence","_c","name","GetCS","parse","mathchar0mi","mchar","attributes","ITALIC","char","mathchar0mo","NodeUtil_js_1","setProperty","addNode","mathchar7","delimiter","delim","Object","assign","fence","stretchy","environment","func","args","end","itemFactory","setProperties","__spreadArray","__read","exports"],"sources":["/home/kinzoku99/Desktop/ProjectIO/frontend/node_modules/mathjax-full/ts/input/tex/ParseMethods.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Base methods for TeX Parsing.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\nimport {Symbol} from './Symbol.js';\nimport TexParser from './TexParser.js';\nimport NodeUtil from './NodeUtil.js';\nimport {TexConstant} from './TexConstants.js';\nimport {MmlNode} from '../../core/MmlTree/MmlNode.js';\nimport ParseUtil from './ParseUtil.js';\n\n\nnamespace ParseMethods {\n\n  /**\n   * Handle a variable (a single letter or multi-letter if allowed).\n   * @param {TexParser} parser The current tex parser.\n   * @param {string} c The letter to transform into an mi.\n   */\n  export function variable(parser: TexParser, c: string) {\n    // @test Identifier Font\n    const def = ParseUtil.getFontDef(parser);\n    if (parser.stack.env.multiLetterIdentifiers && parser.stack.env.font !== '') {\n      c = parser.string.substr(parser.i - 1).match(/^[a-z]+/i)[0];\n      parser.i += c.length - 1;\n      if (def.mathvariant === TexConstant.Variant.NORMAL) {\n        def.autoOP = false;\n      }\n    }\n    // @test Identifier\n    const node = parser.create('token', 'mi', def, c);\n    parser.Push(node);\n  }\n\n\n  /**\n   * Handle a number (a sequence of digits, with decimal separator, etc.).\n   * @param {TexParser} parser The current tex parser.\n   * @param {string} c The first character of a number than can be parsed with\n   *     the digits pattern.\n   */\n  export function digit(parser: TexParser, c: string) {\n    let mml: MmlNode;\n    const pattern = parser.configuration.options['digits'];\n    const n = parser.string.slice(parser.i - 1).match(pattern);\n    // @test Integer Font\n    const def = ParseUtil.getFontDef(parser);\n    if (n) {\n      // @test Integer, Number, Decimal (European)\n      mml = parser.create('token', 'mn', def, n[0].replace(/[{}]/g, ''));\n      parser.i += n[0].length - 1;\n    } else {\n      // @test Decimal Point, Decimal Point European\n      mml = parser.create('token', 'mo', def, c);\n    }\n    parser.Push(mml);\n  }\n\n  /**\n   * Lookup a control-sequence and process it.\n   * @param {TexParser} parser The current tex parser.\n   * @param {string} c The string '\\'.\n   */\n  export function controlSequence(parser: TexParser, _c: string) {\n    const name = parser.GetCS();\n    parser.parse('macro', [parser, name]);\n  }\n\n\n  /**\n   * Handle normal mathchar (as an mi).\n   * @param {TexParser} parser The current tex parser.\n   * @param {Symbol} mchar The parsed symbol.\n   */\n  export function mathchar0mi(parser: TexParser, mchar: Symbol) {\n    const def = mchar.attributes || {mathvariant: TexConstant.Variant.ITALIC};\n    // @test Greek\n    const node = parser.create('token', 'mi', def, mchar.char);\n    parser.Push(node);\n  }\n\n  /**\n   * Handle normal mathchar (as an mo).\n   * @param {TexParser} parser The current tex parser.\n   * @param {Symbol} mchar The parsed symbol.\n   */\n  export function mathchar0mo(parser: TexParser, mchar: Symbol) {\n    const def = mchar.attributes || {};\n    def['stretchy'] = false;\n    // @test Large Set\n    const node = parser.create('token', 'mo', def, mchar.char);\n    NodeUtil.setProperty(node, 'fixStretchy', true);\n    parser.configuration.addNode('fixStretchy', node);\n    // PROBLEM: Attributes stop working when Char7 are explicitly set.\n    parser.Push(node);\n  }\n\n  /**\n   * Handle mathchar in current family.\n   * @param {TexParser} parser The current tex parser.\n   * @param {Symbol} mchar The parsed symbol.\n   */\n  export function mathchar7(parser: TexParser, mchar: Symbol) {\n    const def = mchar.attributes || {mathvariant: TexConstant.Variant.NORMAL};\n    if (parser.stack.env['font']) {\n      // @test MathChar7 Single Font\n      def['mathvariant'] = parser.stack.env['font'];\n    }\n    // @test MathChar7 Single, MathChar7 Operator, MathChar7 Multi\n    const node = parser.create('token', 'mi', def, mchar.char);\n    parser.Push(node);\n  }\n\n  /**\n   * Handle delimiter.\n   * @param {TexParser} parser The current tex parser.\n   * @param {Symbol} delim The parsed delimiter symbol.\n   */\n  export function delimiter(parser: TexParser, delim: Symbol) {\n    let def = delim.attributes || {};\n    // @test Fenced2, Delimiter (AMS)\n    def = Object.assign({fence: false, stretchy: false}, def);\n    const node = parser.create('token', 'mo', def, delim.char);\n    parser.Push(node);\n  }\n\n\n  /**\n   * Parse an environment.\n   * @param {TexParser} parser The current tex parser.\n   * @param {string} env The name of the environment.\n   * @param {Function} func The parse method for the environment.\n   * @param {any[]} args A list of additional arguments.\n   */\n  export function environment(parser: TexParser, env: string, func: Function, args: any[]) {\n    const end = args[0];\n    let mml = parser.itemFactory.create('begin').setProperties({name: env, end: end});\n    mml = func(parser, mml, ...args.slice(1));\n    parser.Push(mml);\n  }\n\n}\n\nexport default ParseMethods;\n"]},"metadata":{},"sourceType":"script"}