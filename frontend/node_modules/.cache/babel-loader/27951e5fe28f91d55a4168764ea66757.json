{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AbstractMathList = void 0;\n\nvar LinkedList_js_1 = require(\"../util/LinkedList.js\");\n\nvar AbstractMathList = function (_super) {\n  __extends(AbstractMathList, _super);\n\n  function AbstractMathList() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  AbstractMathList.prototype.isBefore = function (a, b) {\n    return a.start.i < b.start.i || a.start.i === b.start.i && a.start.n < b.start.n;\n  };\n\n  return AbstractMathList;\n}(LinkedList_js_1.LinkedList);\n\nexports.AbstractMathList = AbstractMathList;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;AA6BA;AACAA;;AADA;;AAUC;;AAJQC,wCAAP,UAAgBC,CAAhB,EAAsCC,CAAtC,EAA0D;AACxD,WAAQD,CAAC,CAACE,KAAF,CAAQC,CAAR,GAAYF,CAAC,CAACC,KAAF,CAAQC,CAApB,IAA0BH,CAAC,CAACE,KAAF,CAAQC,CAAR,KAAcF,CAAC,CAACC,KAAF,CAAQC,CAAtB,IAA2BH,CAAC,CAACE,KAAF,CAAQE,CAAR,GAAYH,CAAC,CAACC,KAAF,CAAQE,CAAjF;AACD,GAFM;;AAIT;AAVA,EACAC,0BADA;;AAAsBC","names":["__extends","AbstractMathList","a","b","start","i","n","LinkedList_js_1","exports"],"sources":["/home/kinzoku99/Desktop/ProjectIO/frontend/node_modules/mathjax-full/ts/core/MathList.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the interface and abstract class for MathList objects\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {LinkedList} from '../util/LinkedList.js';\nimport {MathItem} from './MathItem.js';\n\n/*****************************************************************/\n/**\n *  The MathList interface (extends LinkedList<MathItem>)\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport interface MathList<N, T, D> extends LinkedList<MathItem<N, T, D>> {\n  /**\n   * Test if one math item is before the other in the document (a < b)\n   *\n   * @param {MathItem} a   The first MathItem\n   * @param {MathItem} b   The second MathItem\n   */\n  isBefore(a: MathItem<N, T, D>, b: MathItem<N, T, D>): boolean;\n}\n\n/*****************************************************************/\n/**\n *  The MathList abstract class (extends LinkedList<MathItem>)\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport abstract class AbstractMathList<N, T, D> extends\nLinkedList<MathItem<N, T, D>> implements MathList<N, T, D> {\n\n  /**\n   * @override\n   */\n  public isBefore(a: MathItem<N, T, D>, b: MathItem<N, T, D>) {\n    return (a.start.i < b.start.i || (a.start.i === b.start.i && a.start.n < b.start.n));\n  }\n\n}\n"]},"metadata":{},"sourceType":"script"}