{"ast":null,"code":"\"use strict\";\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ParserConfiguration = exports.ConfigurationHandler = exports.Configuration = void 0;\n\nvar Options_js_1 = require(\"../../util/Options.js\");\n\nvar MapHandler_js_1 = require(\"./MapHandler.js\");\n\nvar FunctionList_js_1 = require(\"../../util/FunctionList.js\");\n\nvar PrioritizedList_js_1 = require(\"../../util/PrioritizedList.js\");\n\nvar Tags_js_1 = require(\"./Tags.js\");\n\nvar Configuration = function () {\n  function Configuration(name, handler, fallback, items, tags, options, nodes, preprocessors, postprocessors, initMethod, configMethod, priority, parser) {\n    if (handler === void 0) {\n      handler = {};\n    }\n\n    if (fallback === void 0) {\n      fallback = {};\n    }\n\n    if (items === void 0) {\n      items = {};\n    }\n\n    if (tags === void 0) {\n      tags = {};\n    }\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    if (nodes === void 0) {\n      nodes = {};\n    }\n\n    if (preprocessors === void 0) {\n      preprocessors = [];\n    }\n\n    if (postprocessors === void 0) {\n      postprocessors = [];\n    }\n\n    if (initMethod === void 0) {\n      initMethod = null;\n    }\n\n    if (configMethod === void 0) {\n      configMethod = null;\n    }\n\n    this.name = name;\n    this.handler = handler;\n    this.fallback = fallback;\n    this.items = items;\n    this.tags = tags;\n    this.options = options;\n    this.nodes = nodes;\n    this.preprocessors = preprocessors;\n    this.postprocessors = postprocessors;\n    this.initMethod = initMethod;\n    this.configMethod = configMethod;\n    this.priority = priority;\n    this.parser = parser;\n    this.handler = Object.assign({\n      character: [],\n      delimiter: [],\n      macro: [],\n      environment: []\n    }, handler);\n  }\n\n  Configuration.makeProcessor = function (func, priority) {\n    return Array.isArray(func) ? func : [func, priority];\n  };\n\n  Configuration._create = function (name, config) {\n    var _this = this;\n\n    if (config === void 0) {\n      config = {};\n    }\n\n    var priority = config.priority || PrioritizedList_js_1.PrioritizedList.DEFAULTPRIORITY;\n    var init = config.init ? this.makeProcessor(config.init, priority) : null;\n    var conf = config.config ? this.makeProcessor(config.config, priority) : null;\n    var preprocessors = (config.preprocessors || []).map(function (pre) {\n      return _this.makeProcessor(pre, priority);\n    });\n    var postprocessors = (config.postprocessors || []).map(function (post) {\n      return _this.makeProcessor(post, priority);\n    });\n    var parser = config.parser || 'tex';\n    return new Configuration(name, config.handler || {}, config.fallback || {}, config.items || {}, config.tags || {}, config.options || {}, config.nodes || {}, preprocessors, postprocessors, init, conf, priority, parser);\n  };\n\n  Configuration.create = function (name, config) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    var configuration = Configuration._create(name, config);\n\n    ConfigurationHandler.set(name, configuration);\n    return configuration;\n  };\n\n  Configuration.local = function (config) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    return Configuration._create('', config);\n  };\n\n  Object.defineProperty(Configuration.prototype, \"init\", {\n    get: function () {\n      return this.initMethod ? this.initMethod[0] : null;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Configuration.prototype, \"config\", {\n    get: function () {\n      return this.configMethod ? this.configMethod[0] : null;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return Configuration;\n}();\n\nexports.Configuration = Configuration;\nvar ConfigurationHandler;\n\n(function (ConfigurationHandler) {\n  var maps = new Map();\n\n  ConfigurationHandler.set = function (name, map) {\n    maps.set(name, map);\n  };\n\n  ConfigurationHandler.get = function (name) {\n    return maps.get(name);\n  };\n\n  ConfigurationHandler.keys = function () {\n    return maps.keys();\n  };\n})(ConfigurationHandler = exports.ConfigurationHandler || (exports.ConfigurationHandler = {}));\n\nvar ParserConfiguration = function () {\n  function ParserConfiguration(packages, parsers) {\n    var e_1, _a, e_2, _b;\n\n    if (parsers === void 0) {\n      parsers = ['tex'];\n    }\n\n    this.initMethod = new FunctionList_js_1.FunctionList();\n    this.configMethod = new FunctionList_js_1.FunctionList();\n    this.configurations = new PrioritizedList_js_1.PrioritizedList();\n    this.parsers = [];\n    this.handlers = new MapHandler_js_1.SubHandlers();\n    this.items = {};\n    this.tags = {};\n    this.options = {};\n    this.nodes = {};\n    this.parsers = parsers;\n\n    try {\n      for (var _c = __values(packages.slice().reverse()), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var pkg = _d.value;\n        this.addPackage(pkg);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    try {\n      for (var _e = __values(this.configurations), _f = _e.next(); !_f.done; _f = _e.next()) {\n        var _g = _f.value,\n            config = _g.item,\n            priority = _g.priority;\n        this.append(config, priority);\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n  }\n\n  ParserConfiguration.prototype.init = function () {\n    this.initMethod.execute(this);\n  };\n\n  ParserConfiguration.prototype.config = function (jax) {\n    var e_3, _a;\n\n    this.configMethod.execute(this, jax);\n\n    try {\n      for (var _b = __values(this.configurations), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var config = _c.value;\n        this.addFilters(jax, config.item);\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n  };\n\n  ParserConfiguration.prototype.addPackage = function (pkg) {\n    var name = typeof pkg === 'string' ? pkg : pkg[0];\n    var conf = this.getPackage(name);\n    conf && this.configurations.add(conf, typeof pkg === 'string' ? conf.priority : pkg[1]);\n  };\n\n  ParserConfiguration.prototype.add = function (name, jax, options) {\n    var e_4, _a;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    var config = this.getPackage(name);\n    this.append(config);\n    this.configurations.add(config, config.priority);\n    this.init();\n    var parser = jax.parseOptions;\n    parser.nodeFactory.setCreators(config.nodes);\n\n    try {\n      for (var _b = __values(Object.keys(config.items)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var kind = _c.value;\n        parser.itemFactory.setNodeClass(kind, config.items[kind]);\n      }\n    } catch (e_4_1) {\n      e_4 = {\n        error: e_4_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_4) throw e_4.error;\n      }\n    }\n\n    Tags_js_1.TagsFactory.addTags(config.tags);\n    Options_js_1.defaultOptions(parser.options, config.options);\n    Options_js_1.userOptions(parser.options, options);\n    this.addFilters(jax, config);\n\n    if (config.config) {\n      config.config(this, jax);\n    }\n  };\n\n  ParserConfiguration.prototype.getPackage = function (name) {\n    var config = ConfigurationHandler.get(name);\n\n    if (config && this.parsers.indexOf(config.parser) < 0) {\n      throw Error(\"Package \" + name + \" doesn't target the proper parser\");\n    }\n\n    return config;\n  };\n\n  ParserConfiguration.prototype.append = function (config, priority) {\n    priority = priority || config.priority;\n\n    if (config.initMethod) {\n      this.initMethod.add(config.initMethod[0], config.initMethod[1]);\n    }\n\n    if (config.configMethod) {\n      this.configMethod.add(config.configMethod[0], config.configMethod[1]);\n    }\n\n    this.handlers.add(config.handler, config.fallback, priority);\n    Object.assign(this.items, config.items);\n    Object.assign(this.tags, config.tags);\n    Options_js_1.defaultOptions(this.options, config.options);\n    Object.assign(this.nodes, config.nodes);\n  };\n\n  ParserConfiguration.prototype.addFilters = function (jax, config) {\n    var e_5, _a, e_6, _b;\n\n    try {\n      for (var _c = __values(config.preprocessors), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var _e = __read(_d.value, 2),\n            pre = _e[0],\n            priority = _e[1];\n\n        jax.preFilters.add(pre, priority);\n      }\n    } catch (e_5_1) {\n      e_5 = {\n        error: e_5_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n      } finally {\n        if (e_5) throw e_5.error;\n      }\n    }\n\n    try {\n      for (var _f = __values(config.postprocessors), _g = _f.next(); !_g.done; _g = _f.next()) {\n        var _h = __read(_g.value, 2),\n            post = _h[0],\n            priority = _h[1];\n\n        jax.postFilters.add(post, priority);\n      }\n    } catch (e_6_1) {\n      e_6 = {\n        error: e_6_1\n      };\n    } finally {\n      try {\n        if (_g && !_g.done && (_b = _f.return)) _b.call(_f);\n      } finally {\n        if (e_6) throw e_6.error;\n      }\n    }\n  };\n\n  return ParserConfiguration;\n}();\n\nexports.ParserConfiguration = ParserConfiguration;","map":{"version":3,"mappings":"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","names":["name","handler","fallback","items","tags","options","nodes","preprocessors","postprocessors","initMethod","configMethod","priority","parser","Object","assign","character","delimiter","macro","environment","Configuration","func","Array","isArray","config","PrioritizedList_js_1","DEFAULTPRIORITY","init","makeProcessor","conf","map","pre","post","configuration","_create","ConfigurationHandler","set","exports","maps","Map","get","keys","packages","parsers","FunctionList_js_1","MapHandler_js_1","slice","reverse","_d","pkg","addPackage","configurations","_f","append","ParserConfiguration","execute","jax","_c","addFilters","item","getPackage","add","parseOptions","nodeFactory","setCreators","kind","itemFactory","setNodeClass","Tags_js_1","addTags","Options_js_1","indexOf","Error","handlers","preFilters","_g","postFilters"],"sources":["/home/kinzoku99/Desktop/ProjectIO/frontend/node_modules/mathjax-full/ts/input/tex/Configuration.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2018-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Configuration options for the TexParser.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\nimport {HandlerConfig, FallbackConfig} from './MapHandler.js';\nimport {StackItemClass} from './StackItem.js';\nimport {TagsClass} from './Tags.js';\nimport {userOptions, defaultOptions, OptionList} from '../../util/Options.js';\nimport {SubHandlers} from './MapHandler.js';\nimport {FunctionList} from '../../util/FunctionList.js';\nimport {TeX} from '../tex.js';\nimport {PrioritizedList} from '../../util/PrioritizedList.js';\nimport {TagsFactory} from './Tags.js';\n\n\nexport type StackItemConfig = {[kind: string]: StackItemClass};\nexport type TagsConfig = {[kind: string]: TagsClass};\nexport type Processor<T> = [T, number];\nexport type ProtoProcessor<T> = Processor<T> | T;\nexport type ProcessorList = Processor<Function>[];\nexport type ConfigMethod = (c: ParserConfiguration, j: TeX<any, any, any>) => void;\nexport type InitMethod = (c: ParserConfiguration) => void;\n\n\n\nexport class Configuration {\n\n  /**\n   * Creates a function priority pair.\n   * @param {ProtoProcessor<T>} func The function or processor.\n   * @param {number} priority The default priority.\n   * @return {Processor} The processor pair.\n   * @template T\n   */\n  private static makeProcessor<T>(func: ProtoProcessor<T>, priority: number): Processor<T> {\n    return Array.isArray(func) ? func : [func, priority];\n  }\n\n  /**\n   * Creates a configuration for a package.\n   * @param {string} name The package name or empty string.\n   * @param {Object} config See `create` method.\n   * @return {Configuration} The newly generated configuration.\n   */\n  private static _create(name: string,\n                         config: {handler?: HandlerConfig,\n                                  fallback?: FallbackConfig,\n                                  items?: StackItemConfig,\n                                  tags?: TagsConfig,\n                                  options?: OptionList,\n                                  nodes?: {[key: string]: any},\n                                  preprocessors?: ProtoProcessor<Function>[],\n                                  postprocessors?: ProtoProcessor<Function>[],\n                                  init?: ProtoProcessor<InitMethod>,\n                                  config?: ProtoProcessor<ConfigMethod>,\n                                  priority?: number,\n                                  parser?: string,\n                                 } = {}): Configuration {\n    let priority = config.priority || PrioritizedList.DEFAULTPRIORITY;\n    let init = config.init ? this.makeProcessor(config.init, priority) : null;\n    let conf = config.config ? this.makeProcessor(config.config, priority) : null;\n    let preprocessors = (config.preprocessors || []).map(\n      pre => this.makeProcessor(pre, priority));\n    let postprocessors = (config.postprocessors || []).map(\n      post => this.makeProcessor(post, priority));\n    let parser = config.parser || 'tex';\n    return new Configuration(\n      name,\n      config.handler || {},\n      config.fallback || {},\n      config.items || {},\n      config.tags || {},\n      config.options || {},\n      config.nodes || {},\n      preprocessors, postprocessors, init, conf, priority,\n      parser\n    );\n  }\n\n  /**\n   * Creator pattern for creating a named package configuration. This will be\n   * administered in the configuration handler and can be retrieved again.\n   * @param {string} name The package name.\n   * @param {Object} config The configuration parameters:\n   * Configuration for the TexParser consist of the following:\n   *  * _handler_  configuration mapping handler types to lists of symbol mappings.\n   *  * _fallback_ configuration mapping handler types to fallback methods.\n   *  * _items_ for the StackItem factory.\n   *  * _tags_ mapping tagging configurations to tagging objects.\n   *  * _options_ parse options for the packages.\n   *  * _nodes_ for the Node factory.\n   *  * _preprocessors_ list of functions for preprocessing the LaTeX\n   *      string wrt. to given parse options. Can contain a priority.\n   *  * _postprocessors_ list of functions for postprocessing the MmlNode\n   *      wrt. to given parse options. Can contain a priority.\n   *  * _init_ init method and optionally its priority.\n   *  * _config_ config method and optionally its priority.\n   *  * _priority_ default priority of the configuration.\n   *  * _parser_ the name of the parser that this configuration targets.\n   * @return {Configuration} The newly generated configuration.\n   */\n  public static create(name: string,\n                       config: {handler?: HandlerConfig,\n                                fallback?: FallbackConfig,\n                                items?: StackItemConfig,\n                                tags?: TagsConfig,\n                                options?: OptionList,\n                                nodes?: {[key: string]: any},\n                                preprocessors?: ProtoProcessor<Function>[],\n                                postprocessors?: ProtoProcessor<Function>[],\n                                init?: ProtoProcessor<InitMethod>,\n                                config?: ProtoProcessor<ConfigMethod>,\n                                priority?: number,\n                                parser?: string,\n                               } = {}): Configuration {\n    let configuration = Configuration._create(name, config);\n    ConfigurationHandler.set(name, configuration);\n    return configuration;\n  }\n\n  /**\n   * Creates an unnamed, ephemeral package configuration. It will not added to\n   * the configuration handler.\n   * @param {Object} config See `create` method.\n   * @return {Configuration} The ephemeral package configuration.\n   */\n  public static local(config: {handler?: HandlerConfig,\n                              fallback?: FallbackConfig,\n                              items?: StackItemConfig,\n                              tags?: TagsConfig,\n                              options?: OptionList,\n                              nodes?: {[key: string]: any},\n                              preprocessors?: ProtoProcessor<Function>[],\n                              postprocessors?: ProtoProcessor<Function>[],\n                              init?: ProtoProcessor<InitMethod>,\n                              config?: ProtoProcessor<ConfigMethod>,\n                              priority?: number,\n                              parser?: string,\n                             } = {}): Configuration {\n    return Configuration._create('', config);\n  }\n\n\n  /**\n   * @constructor\n   */\n  private constructor(readonly name: string,\n                      readonly handler: HandlerConfig = {},\n                      readonly fallback: FallbackConfig = {},\n                      readonly items: StackItemConfig = {},\n                      readonly tags: TagsConfig = {},\n                      readonly options: OptionList = {},\n                      readonly nodes: {[key: string]: any} = {},\n                      readonly preprocessors: ProcessorList = [],\n                      readonly postprocessors: ProcessorList = [],\n                      readonly initMethod: Processor<InitMethod> = null,\n                      readonly configMethod: Processor<ConfigMethod> = null,\n                      public priority: number,\n                      readonly parser: string\n                     ) {\n    this.handler = Object.assign(\n      {character: [], delimiter: [], macro: [], environment: []}, handler);\n  }\n\n  /**\n   * The init method.\n   * @type {Function}\n   */\n  public get init(): InitMethod {\n    return this.initMethod ? this.initMethod[0] : null;\n  }\n\n  /**\n   * The config method to call once jax is ready.\n   * @type {FunctionList}\n   */\n  public get config(): ConfigMethod {\n    return this.configMethod ? this.configMethod[0] : null;\n  }\n\n}\n\n\nexport namespace ConfigurationHandler {\n\n  let maps: Map<string, Configuration> = new Map();\n\n  /**\n   * Adds a new configuration to the handler overwriting old ones.\n   *\n   * @param {string} name The name of the configuration.\n   * @param {Configuration} map The configuration mapping.\n   */\n  export let set = function(name: string, map: Configuration): void {\n    maps.set(name, map);\n  };\n\n\n  /**\n   * Looks up a configuration.\n   *\n   * @param {string} name The name of the configuration.\n   * @return {Configuration} The configuration with the given name or null.\n   */\n  export let get = function(name: string): Configuration {\n    return maps.get(name);\n  };\n\n  /**\n   * @return {string[]} All configurations in the handler.\n   */\n  export let keys = function(): IterableIterator<string> {\n    return maps.keys();\n  };\n\n}\n\n\n/**\n * Parser configuration combines the configurations of the currently selected\n * packages.\n * @constructor\n */\nexport class ParserConfiguration {\n\n  /**\n   * Priority list of init methods.\n   * @type {FunctionList}\n   */\n  protected initMethod: FunctionList = new FunctionList();\n\n  /**\n   * Priority list of init methods to call once jax is ready.\n   * @type {FunctionList}\n   */\n  protected configMethod: FunctionList = new FunctionList();\n\n  /**\n   * An ordered list of cofigurations.\n   * @type {PrioritizedList<Configuration>}\n   */\n  protected configurations: PrioritizedList<Configuration> = new PrioritizedList();\n\n  /**\n   * The list of parsers this configuration targets\n   */\n  protected parsers: string[] = [];\n\n  /**\n   * The subhandlers for this configuration.\n   * @type {SubHandlers}\n   */\n  public handlers: SubHandlers = new SubHandlers();\n\n  /**\n   * The collated stack items.\n   * @type {StackItemConfig}\n   */\n  public items: StackItemConfig = {};\n\n  /**\n   * The collated tag configurations.\n   * @type {TagsConfig}\n   */\n  public tags: TagsConfig = {};\n\n  /**\n   * The collated options.\n   * @type {OptionList}\n   */\n  public options: OptionList = {};\n\n  /**\n   * The collated node creators.\n   * @type {{[key: string]: any}}\n   */\n  public nodes: {[key: string]: any}  = {};\n\n  /**\n   * @constructor\n   * @param {(string|[string,number])[]} packages A list of packages with\n   *     optional priorities.\n   * @parm {string[]} parsers   The names of the parsers this package targets\n   */\n  constructor(packages: (string | [string, number])[], parsers: string[] = ['tex']) {\n    this.parsers = parsers;\n    for (const pkg of packages.slice().reverse()) {\n      this.addPackage(pkg);\n    }\n    for (let {item: config, priority: priority} of this.configurations) {\n      this.append(config, priority);\n    }\n  }\n\n  /**\n   * Init method for the configuration;\n   */\n  public init() {\n    this.initMethod.execute(this);\n  }\n\n  /**\n   * Init method for when the jax is ready\n   * @param {TeX} jax The TeX jax for this configuration\n   */\n  public config(jax: TeX<any, any, any>) {\n    this.configMethod.execute(this, jax);\n    for (const config of this.configurations) {\n      this.addFilters(jax, config.item);\n    }\n  }\n\n  /**\n   * Retrieves and adds configuration for a package with priority.\n   * @param {(string | [string, number]} pkg Package with priority.\n   */\n  public addPackage(pkg: (string | [string, number])) {\n    const name = typeof pkg === 'string' ? pkg : pkg[0];\n    const conf = this.getPackage(name);\n    conf && this.configurations.add(conf, typeof pkg === 'string' ? conf.priority : pkg[1]);\n  }\n\n  /**\n   * Adds a configuration after the input jax is created.  (Used by \\require.)\n   * Sets items, nodes and runs configuration method explicitly.\n   *\n   * @param {string} name            The name of the package to add\n   * @param {TeX} jax                The TeX jax where it is being registered\n   * @param {OptionList=} options    The options for the configuration.\n   */\n  public add(name: string, jax: TeX<any, any, any>, options: OptionList = {}) {\n    const config = this.getPackage(name);\n    this.append(config);\n    this.configurations.add(config, config.priority);\n    this.init();\n    const parser = jax.parseOptions;\n    parser.nodeFactory.setCreators(config.nodes);\n    for (const kind of Object.keys(config.items)) {\n      parser.itemFactory.setNodeClass(kind, config.items[kind]);\n    }\n    TagsFactory.addTags(config.tags);\n    defaultOptions(parser.options, config.options);\n    userOptions(parser.options, options);\n    this.addFilters(jax, config);\n    if (config.config) {\n      config.config(this, jax);\n    }\n  }\n\n /**\n  * Find a package and check that it is for the targeted parser\n  *\n  * @param {string} name       The name of the package to check\n  * @return {Configuration}    The configuration for the package\n  */\n  protected getPackage(name: string): Configuration {\n    const config = ConfigurationHandler.get(name);\n    if (config && this.parsers.indexOf(config.parser) < 0) {\n      throw Error(`Package ${name} doesn't target the proper parser`);\n    }\n    return config;\n  }\n\n  /**\n   * Appends a configuration to the overall configuration object.\n   * @param {Configuration} config A configuration.\n   * @param {number} priority The configurations optional priority.\n   */\n  public append(config: Configuration, priority?: number) {\n    priority = priority || config.priority;\n    if (config.initMethod) {\n      this.initMethod.add(config.initMethod[0], config.initMethod[1]);\n    }\n    if (config.configMethod) {\n        this.configMethod.add(config.configMethod[0], config.configMethod[1]);\n      }\n    this.handlers.add(config.handler, config.fallback, priority);\n    Object.assign(this.items, config.items);\n    Object.assign(this.tags, config.tags);\n    defaultOptions(this.options, config.options);\n    Object.assign(this.nodes, config.nodes);\n  }\n\n  /**\n   * Adds pre- and postprocessor as filters to the jax.\n   * @param {TeX<any} jax The TeX Jax.\n   * @param {Configuration} config The configuration whose processors are added.\n   */\n  private addFilters(jax: TeX<any, any, any>, config: Configuration) {\n    for (const [pre, priority] of config.preprocessors) {\n      jax.preFilters.add(pre, priority);\n    }\n    for (const [post, priority] of config.postprocessors) {\n      jax.postFilters.add(post, priority);\n    }\n  }\n\n}\n"]},"metadata":{},"sourceType":"script"}