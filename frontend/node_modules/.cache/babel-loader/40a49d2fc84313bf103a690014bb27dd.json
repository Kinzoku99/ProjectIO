{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MmlNone = exports.MmlMprescripts = exports.MmlMmultiscripts = void 0;\n\nvar MmlNode_js_1 = require(\"../MmlNode.js\");\n\nvar msubsup_js_1 = require(\"./msubsup.js\");\n\nvar MmlMmultiscripts = function (_super) {\n  __extends(MmlMmultiscripts, _super);\n\n  function MmlMmultiscripts() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(MmlMmultiscripts.prototype, \"kind\", {\n    get: function () {\n      return 'mmultiscripts';\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MmlMmultiscripts.prototype, \"arity\", {\n    get: function () {\n      return 1;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  MmlMmultiscripts.prototype.setChildInheritedAttributes = function (attributes, display, level, prime) {\n    this.childNodes[0].setInheritedAttributes(attributes, display, level, prime);\n    var prescripts = false;\n\n    for (var i = 1, n = 0; i < this.childNodes.length; i++) {\n      var child = this.childNodes[i];\n\n      if (child.isKind('mprescripts')) {\n        if (!prescripts) {\n          prescripts = true;\n\n          if (i % 2 === 0) {\n            var mrow = this.factory.create('mrow');\n            this.childNodes.splice(i, 0, mrow);\n            mrow.parent = this;\n            i++;\n          }\n        }\n      } else {\n        var primestyle = prime || n % 2 === 0;\n        child.setInheritedAttributes(attributes, false, level + 1, primestyle);\n        n++;\n      }\n    }\n\n    if (this.childNodes.length % 2 === (prescripts ? 1 : 0)) {\n      this.appendChild(this.factory.create('mrow'));\n      this.childNodes[this.childNodes.length - 1].setInheritedAttributes(attributes, false, level + 1, prime);\n    }\n  };\n\n  MmlMmultiscripts.prototype.verifyChildren = function (options) {\n    var prescripts = false;\n    var fix = options['fixMmultiscripts'];\n\n    for (var i = 0; i < this.childNodes.length; i++) {\n      var child = this.childNodes[i];\n\n      if (child.isKind('mprescripts')) {\n        if (prescripts) {\n          child.mError(child.kind + ' can only appear once in ' + this.kind, options, true);\n        } else {\n          prescripts = true;\n\n          if (i % 2 === 0 && !fix) {\n            this.mError('There must be an equal number of prescripts of each type', options);\n          }\n        }\n      }\n    }\n\n    if (this.childNodes.length % 2 === (prescripts ? 1 : 0) && !fix) {\n      this.mError('There must be an equal number of scripts of each type', options);\n    }\n\n    _super.prototype.verifyChildren.call(this, options);\n  };\n\n  MmlMmultiscripts.defaults = __assign({}, msubsup_js_1.MmlMsubsup.defaults);\n  return MmlMmultiscripts;\n}(msubsup_js_1.MmlMsubsup);\n\nexports.MmlMmultiscripts = MmlMmultiscripts;\n\nvar MmlMprescripts = function (_super) {\n  __extends(MmlMprescripts, _super);\n\n  function MmlMprescripts() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(MmlMprescripts.prototype, \"kind\", {\n    get: function () {\n      return 'mprescripts';\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MmlMprescripts.prototype, \"arity\", {\n    get: function () {\n      return 0;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  MmlMprescripts.prototype.verifyTree = function (options) {\n    _super.prototype.verifyTree.call(this, options);\n\n    if (this.parent && !this.parent.isKind('mmultiscripts')) {\n      this.mError(this.kind + ' must be a child of mmultiscripts', options, true);\n    }\n  };\n\n  MmlMprescripts.defaults = __assign({}, MmlNode_js_1.AbstractMmlNode.defaults);\n  return MmlMprescripts;\n}(MmlNode_js_1.AbstractMmlNode);\n\nexports.MmlMprescripts = MmlMprescripts;\n\nvar MmlNone = function (_super) {\n  __extends(MmlNone, _super);\n\n  function MmlNone() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(MmlNone.prototype, \"kind\", {\n    get: function () {\n      return 'none';\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MmlNone.prototype, \"arity\", {\n    get: function () {\n      return 0;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  MmlNone.prototype.verifyTree = function (options) {\n    _super.prototype.verifyTree.call(this, options);\n\n    if (this.parent && !this.parent.isKind('mmultiscripts')) {\n      this.mError(this.kind + ' must be a child of mmultiscripts', options, true);\n    }\n  };\n\n  MmlNone.defaults = __assign({}, MmlNode_js_1.AbstractMmlNode.defaults);\n  return MmlNone;\n}(MmlNode_js_1.AbstractMmlNode);\n\nexports.MmlNone = MmlNone;","map":{"version":3,"mappings":"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","names":["__extends","Object","MmlMmultiscripts","attributes","display","level","prime","childNodes","setInheritedAttributes","prescripts","i","n","length","child","isKind","mrow","factory","create","splice","parent","primestyle","appendChild","options","fix","mError","kind","_super","verifyChildren","call","__assign","msubsup_js_1","defaults","exports","MmlMprescripts","verifyTree","MmlNode_js_1","MmlNone"],"sources":["/home/kinzoku99/Desktop/ProjectIO/frontend/node_modules/mathjax-full/ts/core/MmlTree/MmlNodes/mmultiscripts.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the MmlMmultiscripts node\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {PropertyList} from '../../Tree/Node.js';\nimport {AbstractMmlNode, AttributeList} from '../MmlNode.js';\nimport {MmlMsubsup} from './msubsup.js';\n\n/*****************************************************************/\n/**\n *  Implements the MmlMmultiscripts node class (subclass of MmlMsubsup)\n */\n\nexport class MmlMmultiscripts extends MmlMsubsup {\n\n  /**\n   * @override\n   */\n  public static defaults: PropertyList = {\n    ...MmlMsubsup.defaults\n  };\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'mmultiscripts';\n  }\n\n  /**\n   * <mmultiscripts> requires at least one child (the base)\n   * @override\n   */\n  public get arity() {\n    return 1;\n  }\n\n  /**\n   * Push the inherited values to the base\n   * Make sure the number of pre- and post-scripts are even by adding mrows, if needed.\n   * For the scripts, use displaystyle = false, scriptlevel + 1, and\n   *   set the primestyle in the subscripts.\n   *\n   * @override\n   */\n  protected setChildInheritedAttributes(attributes: AttributeList, display: boolean, level: number, prime: boolean) {\n    this.childNodes[0].setInheritedAttributes(attributes, display, level, prime);\n    let prescripts = false;\n    for (let i = 1, n = 0; i < this.childNodes.length; i++) {\n      let child = this.childNodes[i];\n      if (child.isKind('mprescripts')) {\n        if (!prescripts) {\n          prescripts = true;\n          if (i % 2 === 0) {\n            let mrow = this.factory.create('mrow');\n            this.childNodes.splice(i, 0, mrow);\n            mrow.parent = this;\n            i++;\n          }\n        }\n      } else {\n        let primestyle = prime || (n % 2 === 0);\n        child.setInheritedAttributes(attributes, false, level + 1, primestyle);\n        n++;\n      }\n    }\n    if (this.childNodes.length % 2 === (prescripts ? 1 : 0)) {\n      this.appendChild(this.factory.create('mrow'));\n      this.childNodes[this.childNodes.length - 1].setInheritedAttributes(attributes, false, level + 1, prime);\n    }\n  }\n\n  /**\n   * Check that mprescripts only occurs once, and that the number of pre- and post-scripts are even.\n   *\n   * @override\n   */\n  protected verifyChildren(options: PropertyList) {\n    let prescripts = false;\n    let fix = options['fixMmultiscripts'];\n    for (let i = 0; i < this.childNodes.length; i++) {\n      let child = this.childNodes[i];\n      if (child.isKind('mprescripts')) {\n        if (prescripts) {\n          child.mError(child.kind + ' can only appear once in ' + this.kind, options, true);\n        } else {\n          prescripts = true;\n          if (i % 2 === 0 && !fix) {\n            this.mError('There must be an equal number of prescripts of each type', options);\n          }\n        }\n      }\n    }\n    if (this.childNodes.length % 2 === (prescripts ? 1 : 0) && !fix) {\n      this.mError('There must be an equal number of scripts of each type', options);\n    }\n    super.verifyChildren(options);\n  }\n\n}\n\n/*****************************************************************/\n/**\n *  Implements the MmlMprescripts node class (subclass of AbstractMmlNode)\n */\n\nexport class MmlMprescripts extends AbstractMmlNode {\n\n  /**\n   * @override\n   */\n  public static defaults: PropertyList = {\n    ...AbstractMmlNode.defaults\n  };\n\n  /**\n   * @return {string}  The mprescripts kind\n   */\n  public get kind(): string {\n    return 'mprescripts';\n  }\n\n  /**\n   * @return {number}  <mprescripts> can have no children\n   */\n  public get arity(): number {\n    return 0;\n  }\n\n  /**\n   * Check that parent is mmultiscripts\n   *\n   * @override\n   */\n  public verifyTree(options: PropertyList) {\n    super.verifyTree(options);\n    if (this.parent && !this.parent.isKind('mmultiscripts')) {\n      this.mError(this.kind + ' must be a child of mmultiscripts', options, true);\n    }\n  }\n\n}\n\n/*****************************************************************/\n/**\n *  Implements the MmlNone node class (subclass of AbstractMmlNode)\n */\n\nexport class MmlNone extends AbstractMmlNode {\n\n  /**\n   * @override\n   */\n  public static defaults: PropertyList = {\n    ...AbstractMmlNode.defaults\n  };\n\n  /**\n   * @return {string}  The none kind\n   */\n  public get kind(): string {\n    return 'none';\n  }\n\n  /**\n   * @return {number}  <none> can have no children\n   */\n  public get arity(): number {\n    return 0;\n  }\n\n  /**\n   * Check that parent is mmultiscripts\n   *\n   * @override\n   */\n  public verifyTree(options: PropertyList) {\n    super.verifyTree(options);\n    if (this.parent && !this.parent.isKind('mmultiscripts')) {\n      this.mError(this.kind + ' must be a child of mmultiscripts', options, true);\n    }\n  }\n\n}\n"]},"metadata":{},"sourceType":"script"}