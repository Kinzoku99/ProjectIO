{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CommonOutputJax = void 0;\n\nvar OutputJax_js_1 = require(\"../../core/OutputJax.js\");\n\nvar MathItem_js_1 = require(\"../../core/MathItem.js\");\n\nvar Options_js_1 = require(\"../../util/Options.js\");\n\nvar lengths_js_1 = require(\"../../util/lengths.js\");\n\nvar Styles_js_1 = require(\"../../util/Styles.js\");\n\nvar StyleList_js_1 = require(\"../../util/StyleList.js\");\n\nvar CommonOutputJax = function (_super) {\n  __extends(CommonOutputJax, _super);\n\n  function CommonOutputJax(options, defaultFactory, defaultFont) {\n    if (options === void 0) {\n      options = null;\n    }\n\n    if (defaultFactory === void 0) {\n      defaultFactory = null;\n    }\n\n    if (defaultFont === void 0) {\n      defaultFont = null;\n    }\n\n    var _this = this;\n\n    var _a = __read(Options_js_1.separateOptions(options, defaultFont.OPTIONS), 2),\n        jaxOptions = _a[0],\n        fontOptions = _a[1];\n\n    _this = _super.call(this, jaxOptions) || this;\n    _this.factory = _this.options.wrapperFactory || new defaultFactory();\n    _this.factory.jax = _this;\n    _this.cssStyles = _this.options.cssStyles || new StyleList_js_1.CssStyles();\n    _this.font = _this.options.font || new defaultFont(fontOptions);\n    _this.unknownCache = new Map();\n    return _this;\n  }\n\n  CommonOutputJax.prototype.typeset = function (math, html) {\n    this.setDocument(html);\n    var node = this.createNode();\n    this.toDOM(math, node, html);\n    return node;\n  };\n\n  CommonOutputJax.prototype.createNode = function () {\n    var jax = this.constructor.NAME;\n    return this.html('mjx-container', {\n      'class': 'MathJax',\n      jax: jax\n    });\n  };\n\n  CommonOutputJax.prototype.setScale = function (node) {\n    var scale = this.math.metrics.scale * this.options.scale;\n\n    if (scale !== 1) {\n      this.adaptor.setStyle(node, 'fontSize', lengths_js_1.percent(scale));\n    }\n  };\n\n  CommonOutputJax.prototype.toDOM = function (math, node, html) {\n    if (html === void 0) {\n      html = null;\n    }\n\n    this.setDocument(html);\n    this.math = math;\n    this.pxPerEm = math.metrics.ex / this.font.params.x_height;\n    math.root.setTeXclass(null);\n    this.setScale(node);\n    this.nodeMap = new Map();\n    this.container = node;\n    this.processMath(math.root, node);\n    this.nodeMap = null;\n    this.executeFilters(this.postFilters, math, html, node);\n  };\n\n  CommonOutputJax.prototype.getBBox = function (math, html) {\n    this.setDocument(html);\n    this.math = math;\n    math.root.setTeXclass(null);\n    this.nodeMap = new Map();\n    var bbox = this.factory.wrap(math.root).getBBox();\n    this.nodeMap = null;\n    return bbox;\n  };\n\n  CommonOutputJax.prototype.getMetrics = function (html) {\n    var e_1, _a;\n\n    this.setDocument(html);\n    var adaptor = this.adaptor;\n    var maps = this.getMetricMaps(html);\n\n    try {\n      for (var _b = __values(html.math), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var math = _c.value;\n        var parent_1 = adaptor.parent(math.start.node);\n\n        if (math.state() < MathItem_js_1.STATE.METRICS && parent_1) {\n          var map = maps[math.display ? 1 : 0];\n\n          var _d = map.get(parent_1),\n              em = _d.em,\n              ex = _d.ex,\n              containerWidth = _d.containerWidth,\n              lineWidth = _d.lineWidth,\n              scale = _d.scale,\n              family = _d.family;\n\n          math.setMetrics(em, ex, containerWidth, lineWidth, scale);\n\n          if (this.options.mtextInheritFont) {\n            math.outputData.mtextFamily = family;\n          }\n\n          if (this.options.merrorInheritFont) {\n            math.outputData.merrorFamily = family;\n          }\n\n          math.state(MathItem_js_1.STATE.METRICS);\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n\n  CommonOutputJax.prototype.getMetricsFor = function (node, display) {\n    var getFamily = this.options.mtextInheritFont || this.options.merrorInheritFont;\n    var test = this.getTestElement(node, display);\n    var metrics = this.measureMetrics(test, getFamily);\n    this.adaptor.remove(test);\n    return metrics;\n  };\n\n  CommonOutputJax.prototype.getMetricMaps = function (html) {\n    var e_2, _a, e_3, _b, e_4, _c, e_5, _d, e_6, _e;\n\n    var adaptor = this.adaptor;\n    var domMaps = [new Map(), new Map()];\n\n    try {\n      for (var _f = __values(html.math), _g = _f.next(); !_g.done; _g = _f.next()) {\n        var math = _g.value;\n        var node = adaptor.parent(math.start.node);\n\n        if (node && math.state() < MathItem_js_1.STATE.METRICS) {\n          var map = domMaps[math.display ? 1 : 0];\n\n          if (!map.has(node)) {\n            map.set(node, this.getTestElement(node, math.display));\n          }\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_g && !_g.done && (_a = _f.return)) _a.call(_f);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    var getFamily = this.options.mtextInheritFont || this.options.merrorInheritFont;\n    var maps = [new Map(), new Map()];\n\n    try {\n      for (var _h = __values(maps.keys()), _j = _h.next(); !_j.done; _j = _h.next()) {\n        var i = _j.value;\n\n        try {\n          for (var _k = (e_4 = void 0, __values(domMaps[i].keys())), _l = _k.next(); !_l.done; _l = _k.next()) {\n            var node = _l.value;\n            maps[i].set(node, this.measureMetrics(domMaps[i].get(node), getFamily));\n          }\n        } catch (e_4_1) {\n          e_4 = {\n            error: e_4_1\n          };\n        } finally {\n          try {\n            if (_l && !_l.done && (_c = _k.return)) _c.call(_k);\n          } finally {\n            if (e_4) throw e_4.error;\n          }\n        }\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (_j && !_j.done && (_b = _h.return)) _b.call(_h);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n\n    try {\n      for (var _m = __values(maps.keys()), _o = _m.next(); !_o.done; _o = _m.next()) {\n        var i = _o.value;\n\n        try {\n          for (var _p = (e_6 = void 0, __values(domMaps[i].values())), _q = _p.next(); !_q.done; _q = _p.next()) {\n            var node = _q.value;\n            adaptor.remove(node);\n          }\n        } catch (e_6_1) {\n          e_6 = {\n            error: e_6_1\n          };\n        } finally {\n          try {\n            if (_q && !_q.done && (_e = _p.return)) _e.call(_p);\n          } finally {\n            if (e_6) throw e_6.error;\n          }\n        }\n      }\n    } catch (e_5_1) {\n      e_5 = {\n        error: e_5_1\n      };\n    } finally {\n      try {\n        if (_o && !_o.done && (_d = _m.return)) _d.call(_m);\n      } finally {\n        if (e_5) throw e_5.error;\n      }\n    }\n\n    return maps;\n  };\n\n  CommonOutputJax.prototype.getTestElement = function (node, display) {\n    var adaptor = this.adaptor;\n\n    if (!this.testInline) {\n      this.testInline = this.html('mjx-test', {\n        style: {\n          display: 'inline-block',\n          width: '100%',\n          'font-style': 'normal',\n          'font-weight': 'normal',\n          'font-size': '100%',\n          'font-size-adjust': 'none',\n          'text-indent': 0,\n          'text-transform': 'none',\n          'letter-spacing': 'normal',\n          'word-spacing': 'normal',\n          overflow: 'hidden',\n          height: '1px',\n          'margin-right': '-1px'\n        }\n      }, [this.html('mjx-left-box', {\n        style: {\n          display: 'inline-block',\n          width: 0,\n          'float': 'left'\n        }\n      }), this.html('mjx-ex-box', {\n        style: {\n          position: 'absolute',\n          overflow: 'hidden',\n          width: '1px',\n          height: '60ex'\n        }\n      }), this.html('mjx-right-box', {\n        style: {\n          display: 'inline-block',\n          width: 0,\n          'float': 'right'\n        }\n      })]);\n      this.testDisplay = adaptor.clone(this.testInline);\n      adaptor.setStyle(this.testDisplay, 'display', 'table');\n      adaptor.setStyle(this.testDisplay, 'margin-right', '');\n      adaptor.setStyle(adaptor.firstChild(this.testDisplay), 'display', 'none');\n      var right = adaptor.lastChild(this.testDisplay);\n      adaptor.setStyle(right, 'display', 'table-cell');\n      adaptor.setStyle(right, 'width', '10000em');\n      adaptor.setStyle(right, 'float', '');\n    }\n\n    return adaptor.append(node, adaptor.clone(display ? this.testDisplay : this.testInline));\n  };\n\n  CommonOutputJax.prototype.measureMetrics = function (node, getFamily) {\n    var adaptor = this.adaptor;\n    var family = getFamily ? adaptor.fontFamily(node) : '';\n    var em = adaptor.fontSize(node);\n\n    var _a = __read(adaptor.nodeSize(adaptor.childNode(node, 1)), 2),\n        w = _a[0],\n        h = _a[1];\n\n    var ex = w ? h / 60 : em * this.options.exFactor;\n    var containerWidth = !w ? 1000000 : adaptor.getStyle(node, 'display') === 'table' ? adaptor.nodeSize(adaptor.lastChild(node))[0] - 1 : adaptor.nodeBBox(adaptor.lastChild(node)).left - adaptor.nodeBBox(adaptor.firstChild(node)).left - 2;\n    var scale = Math.max(this.options.minScale, this.options.matchFontHeight ? ex / this.font.params.x_height / em : 1);\n    var lineWidth = 1000000;\n    return {\n      em: em,\n      ex: ex,\n      containerWidth: containerWidth,\n      lineWidth: lineWidth,\n      scale: scale,\n      family: family\n    };\n  };\n\n  CommonOutputJax.prototype.styleSheet = function (html) {\n    var e_7, _a;\n\n    this.setDocument(html);\n    this.cssStyles.clear();\n    this.cssStyles.addStyles(this.constructor.commonStyles);\n\n    if ('getStyles' in html) {\n      try {\n        for (var _b = __values(html.getStyles()), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var styles = _c.value;\n          this.cssStyles.addStyles(styles);\n        }\n      } catch (e_7_1) {\n        e_7 = {\n          error: e_7_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_7) throw e_7.error;\n        }\n      }\n    }\n\n    this.addWrapperStyles(this.cssStyles);\n    this.addFontStyles(this.cssStyles);\n    var sheet = this.html('style', {\n      id: 'MJX-styles'\n    }, [this.text('\\n' + this.cssStyles.cssText + '\\n')]);\n    return sheet;\n  };\n\n  CommonOutputJax.prototype.addFontStyles = function (styles) {\n    styles.addStyles(this.font.styles);\n  };\n\n  CommonOutputJax.prototype.addWrapperStyles = function (styles) {\n    var e_8, _a;\n\n    try {\n      for (var _b = __values(this.factory.getKinds()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var kind = _c.value;\n        this.addClassStyles(this.factory.getNodeClass(kind), styles);\n      }\n    } catch (e_8_1) {\n      e_8 = {\n        error: e_8_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_8) throw e_8.error;\n      }\n    }\n  };\n\n  CommonOutputJax.prototype.addClassStyles = function (CLASS, styles) {\n    styles.addStyles(CLASS.styles);\n  };\n\n  CommonOutputJax.prototype.setDocument = function (html) {\n    if (html) {\n      this.document = html;\n      this.adaptor.document = html.document;\n    }\n  };\n\n  CommonOutputJax.prototype.html = function (type, def, content, ns) {\n    if (def === void 0) {\n      def = {};\n    }\n\n    if (content === void 0) {\n      content = [];\n    }\n\n    return this.adaptor.node(type, def, content, ns);\n  };\n\n  CommonOutputJax.prototype.text = function (text) {\n    return this.adaptor.text(text);\n  };\n\n  CommonOutputJax.prototype.fixed = function (m, n) {\n    if (n === void 0) {\n      n = 3;\n    }\n\n    if (Math.abs(m) < .0006) {\n      return '0';\n    }\n\n    return m.toFixed(n).replace(/\\.?0+$/, '');\n  };\n\n  CommonOutputJax.prototype.measureText = function (text, variant, font) {\n    if (font === void 0) {\n      font = ['', false, false];\n    }\n\n    var node = this.unknownText(text, variant);\n\n    if (variant === '-explicitFont') {\n      var styles = this.cssFontStyles(font);\n      this.adaptor.setAttributes(node, {\n        style: styles\n      });\n    }\n\n    return this.measureTextNodeWithCache(node, text, variant, font);\n  };\n\n  CommonOutputJax.prototype.measureTextNodeWithCache = function (text, chars, variant, font) {\n    if (font === void 0) {\n      font = ['', false, false];\n    }\n\n    if (variant === '-explicitFont') {\n      variant = [font[0], font[1] ? 'T' : 'F', font[2] ? 'T' : 'F', ''].join('-');\n    }\n\n    if (!this.unknownCache.has(variant)) {\n      this.unknownCache.set(variant, new Map());\n    }\n\n    var map = this.unknownCache.get(variant);\n    var cached = map.get(chars);\n    if (cached) return cached;\n    var bbox = this.measureTextNode(text);\n    map.set(chars, bbox);\n    return bbox;\n  };\n\n  CommonOutputJax.prototype.measureXMLnode = function (xml) {\n    var adaptor = this.adaptor;\n    var content = this.html('mjx-xml-block', {\n      style: {\n        display: 'inline-block'\n      }\n    }, [adaptor.clone(xml)]);\n    var base = this.html('mjx-baseline', {\n      style: {\n        display: 'inline-block',\n        width: 0,\n        height: 0\n      }\n    });\n    var style = {\n      position: 'absolute',\n      display: 'inline-block',\n      'font-family': 'initial',\n      'line-height': 'normal'\n    };\n    var node = this.html('mjx-measure-xml', {\n      style: style\n    }, [base, content]);\n    adaptor.append(adaptor.parent(this.math.start.node), this.container);\n    adaptor.append(this.container, node);\n    var em = this.math.metrics.em * this.math.metrics.scale;\n\n    var _a = adaptor.nodeBBox(content),\n        left = _a.left,\n        right = _a.right,\n        bottom = _a.bottom,\n        top = _a.top;\n\n    var w = (right - left) / em;\n    var h = (adaptor.nodeBBox(base).top - top) / em;\n    var d = (bottom - top) / em - h;\n    adaptor.remove(this.container);\n    adaptor.remove(node);\n    return {\n      w: w,\n      h: h,\n      d: d\n    };\n  };\n\n  CommonOutputJax.prototype.cssFontStyles = function (font, styles) {\n    if (styles === void 0) {\n      styles = {};\n    }\n\n    var _a = __read(font, 3),\n        family = _a[0],\n        italic = _a[1],\n        bold = _a[2];\n\n    styles['font-family'] = this.font.getFamily(family);\n    if (italic) styles['font-style'] = 'italic';\n    if (bold) styles['font-weight'] = 'bold';\n    return styles;\n  };\n\n  CommonOutputJax.prototype.getFontData = function (styles) {\n    if (!styles) {\n      styles = new Styles_js_1.Styles();\n    }\n\n    return [this.font.getFamily(styles.get('font-family')), styles.get('font-style') === 'italic', styles.get('font-weight') === 'bold'];\n  };\n\n  CommonOutputJax.NAME = 'Common';\n  CommonOutputJax.OPTIONS = __assign(__assign({}, OutputJax_js_1.AbstractOutputJax.OPTIONS), {\n    scale: 1,\n    minScale: .5,\n    mtextInheritFont: false,\n    merrorInheritFont: false,\n    mtextFont: '',\n    merrorFont: 'serif',\n    mathmlSpacing: false,\n    skipAttributes: {},\n    exFactor: .5,\n    displayAlign: 'center',\n    displayIndent: '0',\n    wrapperFactory: null,\n    font: null,\n    cssStyles: null\n  });\n  CommonOutputJax.commonStyles = {};\n  return CommonOutputJax;\n}(OutputJax_js_1.AbstractOutputJax);\n\nexports.CommonOutputJax = CommonOutputJax;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;AAEA;;AAGA;;AAGA;;AACA;;AACA;;AAmCA;AAMUA;;AA0GR,2BAAYC,OAAZ,EACYC,cADZ,EAEYC,WAFZ,EAEkC;AAFtB;AAAAF;AAA0B;;AAC1B;AAAAC;AAAkD;;AAClD;AAAAC;AAAsB;;AAFlC;;AAGQ,oBAA4BC,6BAAgBH,OAAhB,EAAyBE,WAAW,CAACE,OAArC,CAA5B,EAAyE,CAAzE;AAAA,QAACC,UAAU,QAAX;AAAA,QAAaC,WAAW,QAAxB;;AACNC,8BAAMF,UAAN,KAAiB,IAAjB;AACAE,SAAI,CAACC,OAAL,GAAeD,KAAI,CAACP,OAAL,CAAaS,cAAb,IACb,IAAIR,cAAJ,EADF;AAGAM,SAAI,CAACC,OAAL,CAAaE,GAAb,GAAmBH,KAAnB;AACAA,SAAI,CAACI,SAAL,GAAiBJ,KAAI,CAACP,OAAL,CAAaW,SAAb,IAA0B,IAAIC,wBAAJ,EAA3C;AACAL,SAAI,CAACM,IAAL,GAAYN,KAAI,CAACP,OAAL,CAAaa,IAAb,IAAqB,IAAIX,WAAJ,CAAgBI,WAAhB,CAAjC;AACAC,SAAI,CAACO,YAAL,GAAoB,IAAIC,GAAJ,EAApB;;AACD;;AAYMC,sCAAP,UAAeC,IAAf,EAAwCC,IAAxC,EAAmE;AACjE,SAAKC,WAAL,CAAiBD,IAAjB;AACA,QAAIE,IAAI,GAAG,KAAKC,UAAL,EAAX;AACA,SAAKC,KAAL,CAAWL,IAAX,EAAiBG,IAAjB,EAAuBF,IAAvB;AACA,WAAOE,IAAP;AACD,GALM;;AAUGJ,yCAAV;AACE,QAAMN,GAAG,GAAI,KAAKa,WAAL,CAA4CC,IAAzD;AACA,WAAO,KAAKN,IAAL,CAAU,eAAV,EAA2B;AAAC,eAAS,SAAV;AAAqBR,SAAG,EAAEA;AAA1B,KAA3B,CAAP;AACD,GAHS;;AAQAM,uCAAV,UAAmBI,IAAnB,EAA0B;AACxB,QAAMK,KAAK,GAAG,KAAKR,IAAL,CAAUS,OAAV,CAAkBD,KAAlB,GAA0B,KAAKzB,OAAL,CAAayB,KAArD;;AACA,QAAIA,KAAK,KAAK,CAAd,EAAiB;AACf,WAAKE,OAAL,CAAaC,QAAb,CAAsBR,IAAtB,EAA4B,UAA5B,EAAwCS,qBAAQJ,KAAR,CAAxC;AACD;AACF,GALS;;AAqBHT,oCAAP,UAAaC,IAAb,EAAsCG,IAAtC,EAA+CF,IAA/C,EAAiF;AAAlC;AAAAA;AAAkC;;AAC/E,SAAKC,WAAL,CAAiBD,IAAjB;AACA,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKa,OAAL,GAAeb,IAAI,CAACS,OAAL,CAAaK,EAAb,GAAkB,KAAKlB,IAAL,CAAUmB,MAAV,CAAiBC,QAAlD;AACAhB,QAAI,CAACiB,IAAL,CAAUC,WAAV,CAAsB,IAAtB;AACA,SAAKC,QAAL,CAAchB,IAAd;AACA,SAAKiB,OAAL,GAAe,IAAItB,GAAJ,EAAf;AACA,SAAKuB,SAAL,GAAiBlB,IAAjB;AACA,SAAKmB,WAAL,CAAiBtB,IAAI,CAACiB,IAAtB,EAA4Bd,IAA5B;AACA,SAAKiB,OAAL,GAAe,IAAf;AACA,SAAKG,cAAL,CAAoB,KAAKC,WAAzB,EAAsCxB,IAAtC,EAA4CC,IAA5C,EAAkDE,IAAlD;AACD,GAXM;;AA2BAJ,sCAAP,UAAeC,IAAf,EAAwCC,IAAxC,EAAmE;AACjE,SAAKC,WAAL,CAAiBD,IAAjB;AACA,SAAKD,IAAL,GAAYA,IAAZ;AACAA,QAAI,CAACiB,IAAL,CAAUC,WAAV,CAAsB,IAAtB;AACA,SAAKE,OAAL,GAAe,IAAItB,GAAJ,EAAf;AACA,QAAI2B,IAAI,GAAG,KAAKlC,OAAL,CAAamC,IAAb,CAAkB1B,IAAI,CAACiB,IAAvB,EAA6BU,OAA7B,EAAX;AACA,SAAKP,OAAL,GAAe,IAAf;AACA,WAAOK,IAAP;AACD,GARM;;AAeA1B,yCAAP,UAAkBE,IAAlB,EAA6C;;;AAC3C,SAAKC,WAAL,CAAiBD,IAAjB;AACA,QAAMS,OAAO,GAAG,KAAKA,OAArB;AACA,QAAMkB,IAAI,GAAG,KAAKC,aAAL,CAAmB5B,IAAnB,CAAb;;;AACA,WAAmB,sBAAI,CAACD,IAAL,GAAS8B,cAA5B,EAA4B,QAA5B,EAA4BA,cAA5B,EAA8B;AAAzB,YAAM9B,IAAI,WAAV;AACH,YAAM+B,QAAM,GAAGrB,OAAO,CAACsB,MAAR,CAAehC,IAAI,CAACiC,KAAL,CAAW9B,IAA1B,CAAf;;AACA,YAAIH,IAAI,CAACkC,KAAL,KAAeC,oBAAMC,OAArB,IAAgCL,QAApC,EAA4C;AAC1C,cAAMM,GAAG,GAAGT,IAAI,CAAC5B,IAAI,CAACsC,OAAL,GAAe,CAAf,GAAmB,CAApB,CAAhB;;AACM,mBAAqDD,GAAG,CAACE,GAAJ,CAAQR,QAAR,CAArD;AAAA,cAACS,EAAE,QAAH;AAAA,cAAK1B,EAAE,QAAP;AAAA,cAAS2B,cAAc,oBAAvB;AAAA,cAAyBC,SAAS,eAAlC;AAAA,cAAoClC,KAAK,WAAzC;AAAA,cAA2CmC,MAAM,YAAjD;;AACN3C,cAAI,CAAC4C,UAAL,CAAgBJ,EAAhB,EAAoB1B,EAApB,EAAwB2B,cAAxB,EAAwCC,SAAxC,EAAmDlC,KAAnD;;AACA,cAAI,KAAKzB,OAAL,CAAa8D,gBAAjB,EAAmC;AACjC7C,gBAAI,CAAC8C,UAAL,CAAgBC,WAAhB,GAA8BJ,MAA9B;AACD;;AACD,cAAI,KAAK5D,OAAL,CAAaiE,iBAAjB,EAAoC;AAClChD,gBAAI,CAAC8C,UAAL,CAAgBG,YAAhB,GAA+BN,MAA/B;AACD;;AACD3C,cAAI,CAACkC,KAAL,CAAWC,oBAAMC,OAAjB;AACD;AACF;;;;;;;;;;;;AACF,GAnBM;;AA0BArC,4CAAP,UAAqBI,IAArB,EAA8BmC,OAA9B,EAA8C;AAC5C,QAAMY,SAAS,GAAI,KAAKnE,OAAL,CAAa8D,gBAAb,IAAiC,KAAK9D,OAAL,CAAaiE,iBAAjE;AACA,QAAMG,IAAI,GAAG,KAAKC,cAAL,CAAoBjD,IAApB,EAA0BmC,OAA1B,CAAb;AACA,QAAM7B,OAAO,GAAG,KAAK4C,cAAL,CAAoBF,IAApB,EAA0BD,SAA1B,CAAhB;AACA,SAAKxC,OAAL,CAAa4C,MAAb,CAAoBH,IAApB;AACA,WAAO1C,OAAP;AACD,GANM;;AAcGV,4CAAV,UAAwBE,IAAxB,EAAmD;;;AACjD,QAAMS,OAAO,GAAG,KAAKA,OAArB;AACA,QAAM6C,OAAO,GAAG,CAAC,IAAIzD,GAAJ,EAAD,EAA+B,IAAIA,GAAJ,EAA/B,CAAhB;;;AAQA,WAAmB,sBAAI,CAACE,IAAL,GAASwD,cAA5B,EAA4B,QAA5B,EAA4BA,cAA5B,EAA8B;AAAzB,YAAMxD,IAAI,WAAV;AACH,YAAMG,IAAI,GAAGO,OAAO,CAACsB,MAAR,CAAehC,IAAI,CAACiC,KAAL,CAAW9B,IAA1B,CAAb;;AACA,YAAIA,IAAI,IAAIH,IAAI,CAACkC,KAAL,KAAeC,oBAAMC,OAAjC,EAA0C;AACxC,cAAMC,GAAG,GAAGkB,OAAO,CAACvD,IAAI,CAACsC,OAAL,GAAe,CAAf,GAAmB,CAApB,CAAnB;;AACA,cAAI,CAACD,GAAG,CAACoB,GAAJ,CAAQtD,IAAR,CAAL,EAAoB;AAClBkC,eAAG,CAACqB,GAAJ,CAAQvD,IAAR,EAAc,KAAKiD,cAAL,CAAoBjD,IAApB,EAA0BH,IAAI,CAACsC,OAA/B,CAAd;AACD;AACF;AACF;;;;;;;;;;;;;AAID,QAAMY,SAAS,GAAG,KAAKnE,OAAL,CAAa8D,gBAAb,IAAiC,KAAK9D,OAAL,CAAaiE,iBAAhE;AACA,QAAMpB,IAAI,GAAG,CAAC,IAAI9B,GAAJ,EAAD,EAA4B,IAAIA,GAAJ,EAA5B,CAAb;;;AACA,WAAgB,sBAAI,CAAC6D,IAAL,KAAWC,cAA3B,EAA2B,QAA3B,EAA2BA,cAA3B,EAA6B;AAAxB,YAAMC,CAAC,WAAP;;;AACH,eAAmB,wCAAO,CAACA,CAAD,CAAP,CAAWF,IAAX,MAAiBG,cAApC,EAAoC,QAApC,EAAoCA,cAApC,EAAsC;AAAjC,gBAAM3D,IAAI,WAAV;AACHyB,gBAAI,CAACiC,CAAD,CAAJ,CAAQH,GAAR,CAAYvD,IAAZ,EAAkB,KAAKkD,cAAL,CAAoBE,OAAO,CAACM,CAAD,CAAP,CAAWtB,GAAX,CAAepC,IAAf,CAApB,EAA0C+C,SAA1C,CAAlB;AACD;;;;;;;;;;;;AACF;;;;;;;;;;;;;;AAID,WAAgB,sBAAI,CAACS,IAAL,KAAWI,cAA3B,EAA2B,QAA3B,EAA2BA,cAA3B,EAA6B;AAAxB,YAAMF,CAAC,WAAP;;;AACH,eAAmB,wCAAO,CAACA,CAAD,CAAP,CAAWG,MAAX,MAAmBC,cAAtC,EAAsC,QAAtC,EAAsCA,cAAtC,EAAwC;AAAnC,gBAAM9D,IAAI,WAAV;AACHO,mBAAO,CAAC4C,MAAR,CAAenD,IAAf;AACD;;;;;;;;;;;;AACF;;;;;;;;;;;;;AACD,WAAOyB,IAAP;AACD,GAtCS;;AA4CA7B,6CAAV,UAAyBI,IAAzB,EAAkCmC,OAAlC,EAAkD;AAChD,QAAM5B,OAAO,GAAG,KAAKA,OAArB;;AACA,QAAI,CAAC,KAAKwD,UAAV,EAAsB;AACpB,WAAKA,UAAL,GAAkB,KAAKjE,IAAL,CAAU,UAAV,EAAsB;AAACkE,aAAK,EAAE;AAC9C7B,iBAAO,EAAa,cAD0B;AAE9C8B,eAAK,EAAe,MAF0B;AAG9C,wBAAoB,QAH0B;AAI9C,yBAAoB,QAJ0B;AAK9C,uBAAoB,MAL0B;AAM9C,8BAAoB,MAN0B;AAO9C,yBAAoB,CAP0B;AAQ9C,4BAAoB,MAR0B;AAS9C,4BAAoB,QAT0B;AAU9C,0BAAoB,QAV0B;AAW9CC,kBAAQ,EAAY,QAX0B;AAY9CC,gBAAM,EAAc,KAZ0B;AAa9C,0BAAoB;AAb0B;AAAR,OAAtB,EAcd,CACF,KAAKrE,IAAL,CAAU,cAAV,EAA0B;AAACkE,aAAK,EAAE;AAChC7B,iBAAO,EAAE,cADuB;AAEhC8B,eAAK,EAAE,CAFyB;AAGhC,mBAAS;AAHuB;AAAR,OAA1B,CADE,EAMF,KAAKnE,IAAL,CAAU,YAAV,EAAwB;AAACkE,aAAK,EAAE;AAC9BI,kBAAQ,EAAE,UADoB;AAE9BF,kBAAQ,EAAE,QAFoB;AAG9BD,eAAK,EAAE,KAHuB;AAGhBE,gBAAM,EAAE;AAHQ;AAAR,OAAxB,CANE,EAWF,KAAKrE,IAAL,CAAU,eAAV,EAA2B;AAACkE,aAAK,EAAE;AACjC7B,iBAAO,EAAE,cADwB;AAEjC8B,eAAK,EAAE,CAF0B;AAGjC,mBAAS;AAHwB;AAAR,OAA3B,CAXE,CAdc,CAAlB;AA+BA,WAAKI,WAAL,GAAmB9D,OAAO,CAAC+D,KAAR,CAAc,KAAKP,UAAnB,CAAnB;AACAxD,aAAO,CAACC,QAAR,CAAiB,KAAK6D,WAAtB,EAAmC,SAAnC,EAA8C,OAA9C;AACA9D,aAAO,CAACC,QAAR,CAAiB,KAAK6D,WAAtB,EAAmC,cAAnC,EAAmD,EAAnD;AACA9D,aAAO,CAACC,QAAR,CAAiBD,OAAO,CAACgE,UAAR,CAAmB,KAAKF,WAAxB,CAAjB,EAA4D,SAA5D,EAAuE,MAAvE;AACA,UAAMG,KAAK,GAAGjE,OAAO,CAACkE,SAAR,CAAkB,KAAKJ,WAAvB,CAAd;AACA9D,aAAO,CAACC,QAAR,CAAiBgE,KAAjB,EAAwB,SAAxB,EAAmC,YAAnC;AACAjE,aAAO,CAACC,QAAR,CAAiBgE,KAAjB,EAAwB,OAAxB,EAAiC,SAAjC;AACAjE,aAAO,CAACC,QAAR,CAAiBgE,KAAjB,EAAwB,OAAxB,EAAiC,EAAjC;AACD;;AACD,WAAOjE,OAAO,CAACmE,MAAR,CAAe1E,IAAf,EAAqBO,OAAO,CAAC+D,KAAR,CAAcnC,OAAO,GAAG,KAAKkC,WAAR,GAAsB,KAAKN,UAAhD,CAArB,CAAP;AACD,GA5CS;;AAmDAnE,6CAAV,UAAyBI,IAAzB,EAAkC+C,SAAlC,EAAoD;AAClD,QAAMxC,OAAO,GAAG,KAAKA,OAArB;AACA,QAAMiC,MAAM,GAAIO,SAAS,GAAGxC,OAAO,CAACoE,UAAR,CAAmB3E,IAAnB,CAAH,GAA8B,EAAvD;AACA,QAAMqC,EAAE,GAAG9B,OAAO,CAACqE,QAAR,CAAiB5E,IAAjB,CAAX;;AACM,oBAASO,OAAO,CAACsE,QAAR,CAAiBtE,OAAO,CAACuE,SAAR,CAAkB9E,IAAlB,EAAwB,CAAxB,CAAjB,CAAT,EAA0D,CAA1D;AAAA,QAAC+E,CAAC,QAAF;AAAA,QAAIC,CAAC,QAAL;;AACN,QAAMrE,EAAE,GAAIoE,CAAC,GAAGC,CAAC,GAAG,EAAP,GAAY3C,EAAE,GAAG,KAAKzD,OAAL,CAAaqG,QAA3C;AACA,QAAM3C,cAAc,GAAI,CAACyC,CAAD,GAAK,OAAL,GAAexE,OAAO,CAAC2E,QAAR,CAAiBlF,IAAjB,EAAuB,SAAvB,MAAsC,OAAtC,GACfO,OAAO,CAACsE,QAAR,CAAiBtE,OAAO,CAACkE,SAAR,CAAkBzE,IAAlB,CAAjB,EAA+C,CAA/C,IAAoD,CADrC,GAEfO,OAAO,CAAC4E,QAAR,CAAiB5E,OAAO,CAACkE,SAAR,CAAkBzE,IAAlB,CAAjB,EAA+CoF,IAA/C,GACA7E,OAAO,CAAC4E,QAAR,CAAiB5E,OAAO,CAACgE,UAAR,CAAmBvE,IAAnB,CAAjB,EAAgDoF,IADhD,GACuD,CAH/E;AAIA,QAAM/E,KAAK,GAAGgF,IAAI,CAACC,GAAL,CAAS,KAAK1G,OAAL,CAAa2G,QAAtB,EACS,KAAK3G,OAAL,CAAa4G,eAAb,GAA+B7E,EAAE,GAAG,KAAKlB,IAAL,CAAUmB,MAAV,CAAiBC,QAAtB,GAAiCwB,EAAhE,GAAqE,CAD9E,CAAd;AAEA,QAAME,SAAS,GAAG,OAAlB;AACA,WAAO;AAACF,QAAE,IAAH;AAAK1B,QAAE,IAAP;AAAS2B,oBAAc,gBAAvB;AAAyBC,eAAS,WAAlC;AAAoClC,WAAK,OAAzC;AAA2CmC,YAAM;AAAjD,KAAP;AACD,GAdS;;AAqBH5C,yCAAP,UAAkBE,IAAlB,EAA6C;;;AAC3C,SAAKC,WAAL,CAAiBD,IAAjB;AAIA,SAAKP,SAAL,CAAekG,KAAf;AACA,SAAKlG,SAAL,CAAemG,SAAf,CAA0B,KAAKvF,WAAL,CAA4CwF,YAAtE;;AAIA,QAAI,eAAe7F,IAAnB,EAAyB;;AACvB,aAAqB,kBAAEA,IAAY,CAAC8F,SAAb,EAAF,GAA6CjE,cAAlE,EAAkE,QAAlE,EAAkEA,cAAlE,EAAoE;AAA/D,cAAMkE,MAAM,WAAZ;AACH,eAAKtG,SAAL,CAAemG,SAAf,CAAyBG,MAAzB;AACD;;;;;;;;;;;;AACF;;AAID,SAAKC,gBAAL,CAAsB,KAAKvG,SAA3B;AACA,SAAKwG,aAAL,CAAmB,KAAKxG,SAAxB;AAIA,QAAMyG,KAAK,GAAG,KAAKlG,IAAL,CAAU,OAAV,EAAmB;AAACmG,QAAE,EAAE;AAAL,KAAnB,EAAuC,CAAC,KAAKC,IAAL,CAAU,OAAO,KAAK3G,SAAL,CAAe4G,OAAtB,GAAgC,IAA1C,CAAD,CAAvC,CAAd;AACA,WAAOH,KAAP;AACD,GAzBM;;AA8BGpG,4CAAV,UAAwBiG,MAAxB,EAAyC;AACvCA,UAAM,CAACH,SAAP,CAAiB,KAAKjG,IAAL,CAAUoG,MAA3B;AACD,GAFS;;AAOAjG,+CAAV,UAA2BiG,MAA3B,EAA4C;;;;AAC1C,WAAmB,uBAAKzG,OAAL,CAAagH,QAAb,KAAuBzE,cAA1C,EAA0C,QAA1C,EAA0CA,cAA1C,EAA4C;AAAvC,YAAM0E,IAAI,WAAV;AACH,aAAKC,cAAL,CAAoB,KAAKlH,OAAL,CAAamH,YAAb,CAA0BF,IAA1B,CAApB,EAAqDR,MAArD;AACD;;;;;;;;;;;;AACF,GAJS;;AAUAjG,6CAAV,UAAyB4G,KAAzB,EAAsDX,MAAtD,EAAuE;AACrEA,UAAM,CAACH,SAAP,CAAiBc,KAAK,CAACX,MAAvB;AACD,GAFS;;AASAjG,0CAAV,UAAsBE,IAAtB,EAAiD;AAC/C,QAAIA,IAAJ,EAAU;AACR,WAAK2G,QAAL,GAAgB3G,IAAhB;AACA,WAAKS,OAAL,CAAakG,QAAb,GAAwB3G,IAAI,CAAC2G,QAA7B;AACD;AACF,GALS;;AAcH7G,mCAAP,UAAY8G,IAAZ,EAA0BC,GAA1B,EAAgDC,OAAhD,EAAyEC,EAAzE,EAAoF;AAA1D;AAAAF;AAAoB;;AAAE;AAAAC;AAAuB;;AACrE,WAAO,KAAKrG,OAAL,CAAaP,IAAb,CAAkB0G,IAAlB,EAAwBC,GAAxB,EAA6BC,OAA7B,EAAsCC,EAAtC,CAAP;AACD,GAFM;;AASAjH,mCAAP,UAAYsG,IAAZ,EAAwB;AACtB,WAAO,KAAK3F,OAAL,CAAa2F,IAAb,CAAkBA,IAAlB,CAAP;AACD,GAFM;;AASAtG,oCAAP,UAAakH,CAAb,EAAwBC,CAAxB,EAAqC;AAAb;AAAAA;AAAa;;AACnC,QAAI1B,IAAI,CAAC2B,GAAL,CAASF,CAAT,IAAc,KAAlB,EAAyB;AACvB,aAAO,GAAP;AACD;;AACD,WAAOA,CAAC,CAACG,OAAF,CAAUF,CAAV,EAAaG,OAAb,CAAqB,QAArB,EAA+B,EAA/B,CAAP;AACD,GALM;;AA8BAtH,0CAAP,UAAmBsG,IAAnB,EAAiCiB,OAAjC,EAAkD1H,IAAlD,EAAwF;AAAtC;AAAAA,cAAqB,EAArB,EAAyB,KAAzB,EAAgC,KAAhC;AAAsC;;AACtF,QAAMO,IAAI,GAAG,KAAKoH,WAAL,CAAiBlB,IAAjB,EAAuBiB,OAAvB,CAAb;;AACA,QAAIA,OAAO,KAAK,eAAhB,EAAiC;AAC/B,UAAMtB,MAAM,GAAG,KAAKwB,aAAL,CAAmB5H,IAAnB,CAAf;AACA,WAAKc,OAAL,CAAa+G,aAAb,CAA2BtH,IAA3B,EAAiC;AAACgE,aAAK,EAAE6B;AAAR,OAAjC;AACD;;AACD,WAAO,KAAK0B,wBAAL,CAA8BvH,IAA9B,EAAoCkG,IAApC,EAA0CiB,OAA1C,EAAmD1H,IAAnD,CAAP;AACD,GAPM;;AAmBAG,uDAAP,UACEsG,IADF,EACWsB,KADX,EAC0BL,OAD1B,EAEE1H,IAFF,EAEwC;AAAtC;AAAAA,cAAqB,EAArB,EAAyB,KAAzB,EAAgC,KAAhC;AAAsC;;AAEtC,QAAI0H,OAAO,KAAK,eAAhB,EAAiC;AAC/BA,aAAO,GAAG,CAAC1H,IAAI,CAAC,CAAD,CAAL,EAAUA,IAAI,CAAC,CAAD,CAAJ,GAAU,GAAV,GAAgB,GAA1B,EAA+BA,IAAI,CAAC,CAAD,CAAJ,GAAU,GAAV,GAAgB,GAA/C,EAAoD,EAApD,EAAwDgI,IAAxD,CAA6D,GAA7D,CAAV;AACD;;AACD,QAAI,CAAC,KAAK/H,YAAL,CAAkB4D,GAAlB,CAAsB6D,OAAtB,CAAL,EAAqC;AACnC,WAAKzH,YAAL,CAAkB6D,GAAlB,CAAsB4D,OAAtB,EAA+B,IAAIxH,GAAJ,EAA/B;AACD;;AACD,QAAMuC,GAAG,GAAG,KAAKxC,YAAL,CAAkB0C,GAAlB,CAAsB+E,OAAtB,CAAZ;AACA,QAAMO,MAAM,GAAGxF,GAAG,CAACE,GAAJ,CAAQoF,KAAR,CAAf;AACA,QAAIE,MAAJ,EAAY,OAAOA,MAAP;AACZ,QAAMpG,IAAI,GAAG,KAAKqG,eAAL,CAAqBzB,IAArB,CAAb;AACAhE,OAAG,CAACqB,GAAJ,CAAQiE,KAAR,EAAelG,IAAf;AACA,WAAOA,IAAP;AACD,GAhBM;;AAiCA1B,6CAAP,UAAsBgI,GAAtB,EAA4B;AAC1B,QAAMrH,OAAO,GAAG,KAAKA,OAArB;AACA,QAAMqG,OAAO,GAAI,KAAK9G,IAAL,CAAU,eAAV,EAA2B;AAACkE,WAAK,EAAE;AAAC7B,eAAO,EAAE;AAAV;AAAR,KAA3B,EAA+D,CAAC5B,OAAO,CAAC+D,KAAR,CAAcsD,GAAd,CAAD,CAA/D,CAAjB;AACA,QAAMC,IAAI,GAAG,KAAK/H,IAAL,CAAU,cAAV,EAA0B;AAACkE,WAAK,EAAE;AAAC7B,eAAO,EAAE,cAAV;AAA0B8B,aAAK,EAAE,CAAjC;AAAoCE,cAAM,EAAE;AAA5C;AAAR,KAA1B,CAAb;AACA,QAAMH,KAAK,GAAG;AACZI,cAAQ,EAAE,UADE;AAEZjC,aAAO,EAAE,cAFG;AAGZ,qBAAe,SAHH;AAIZ,qBAAe;AAJH,KAAd;AAMA,QAAMnC,IAAI,GAAG,KAAKF,IAAL,CAAU,iBAAV,EAA6B;AAACkE,WAAK;AAAN,KAA7B,EAAsC,CAAC6D,IAAD,EAAOjB,OAAP,CAAtC,CAAb;AACArG,WAAO,CAACmE,MAAR,CAAenE,OAAO,CAACsB,MAAR,CAAe,KAAKhC,IAAL,CAAUiC,KAAV,CAAgB9B,IAA/B,CAAf,EAAqD,KAAKkB,SAA1D;AACAX,WAAO,CAACmE,MAAR,CAAe,KAAKxD,SAApB,EAA+BlB,IAA/B;AACA,QAAMqC,EAAE,GAAG,KAAKxC,IAAL,CAAUS,OAAV,CAAkB+B,EAAlB,GAAuB,KAAKxC,IAAL,CAAUS,OAAV,CAAkBD,KAApD;;AACM,aAA6BE,OAAO,CAAC4E,QAAR,CAAiByB,OAAjB,CAA7B;AAAA,QAACxB,IAAI,UAAL;AAAA,QAAOZ,KAAK,WAAZ;AAAA,QAAcsD,MAAM,YAApB;AAAA,QAAsBC,GAAG,SAAzB;;AACN,QAAMhD,CAAC,GAAG,CAACP,KAAK,GAAGY,IAAT,IAAiB/C,EAA3B;AACA,QAAM2C,CAAC,GAAG,CAACzE,OAAO,CAAC4E,QAAR,CAAiB0C,IAAjB,EAAuBE,GAAvB,GAA6BA,GAA9B,IAAqC1F,EAA/C;AACA,QAAM2F,CAAC,GAAG,CAACF,MAAM,GAAGC,GAAV,IAAiB1F,EAAjB,GAAsB2C,CAAhC;AACAzE,WAAO,CAAC4C,MAAR,CAAe,KAAKjC,SAApB;AACAX,WAAO,CAAC4C,MAAR,CAAenD,IAAf;AACA,WAAO;AAAC+E,OAAC,GAAF;AAAIC,OAAC,GAAL;AAAOgD,OAAC;AAAR,KAAP;AACD,GArBM;;AA4BApI,4CAAP,UAAqBH,IAArB,EAAwCoG,MAAxC,EAA8D;AAAtB;AAAAA;AAAsB;;AACtD,oBAAyBpG,IAAzB,EAA6B,CAA7B;AAAA,QAAC+C,MAAM,QAAP;AAAA,QAASyF,MAAM,QAAf;AAAA,QAAiBC,IAAI,QAArB;;AACNrC,UAAM,CAAC,aAAD,CAAN,GAAwB,KAAKpG,IAAL,CAAUsD,SAAV,CAAoBP,MAApB,CAAxB;AACA,QAAIyF,MAAJ,EAAYpC,MAAM,CAAC,YAAD,CAAN,GAAuB,QAAvB;AACZ,QAAIqC,IAAJ,EAAUrC,MAAM,CAAC,aAAD,CAAN,GAAwB,MAAxB;AACV,WAAOA,MAAP;AACD,GANM;;AAYAjG,0CAAP,UAAmBiG,MAAnB,EAAiC;AAC/B,QAAI,CAACA,MAAL,EAAa;AACXA,YAAM,GAAG,IAAIsC,kBAAJ,EAAT;AACD;;AACD,WAAO,CAAC,KAAK1I,IAAL,CAAUsD,SAAV,CAAoB8C,MAAM,CAACzD,GAAP,CAAW,aAAX,CAApB,CAAD,EACCyD,MAAM,CAACzD,GAAP,CAAW,YAAX,MAA6B,QAD9B,EAECyD,MAAM,CAACzD,GAAP,CAAW,aAAX,MAA8B,MAF/B,CAAP;AAGD,GAPM;;AA5jBOxC,yBAAe,QAAf;AAKAA,4BAAOwI,sBACdC,iCAAkBrJ,OADJ,GACW;AAC9BqB,SAAK,EAAE,CADuB;AAE9BkF,YAAQ,EAAE,EAFoB;AAG9B7C,oBAAgB,EAAE,KAHY;AAI9BG,qBAAiB,EAAE,KAJW;AAK9ByF,aAAS,EAAE,EALmB;AAM9BC,cAAU,EAAE,OANkB;AAO9BC,iBAAa,EAAE,KAPe;AAQ9BC,kBAAc,EAAE,EARc;AAS9BxD,YAAQ,EAAE,EAToB;AAU9ByD,gBAAY,EAAE,QAVgB;AAW9BC,iBAAa,EAAE,GAXe;AAY9BtJ,kBAAc,EAAE,IAZc;AAa9BI,QAAI,EAAE,IAbwB;AAc9BF,aAAS,EAAE;AAdmB,GADX,CAAP;AAqBAK,iCAA6B,EAA7B;AA2iBhB;AAAC,CAhlBD,CAMUyI,gCANV;;AAAsBO","names":["__extends","options","defaultFactory","defaultFont","Options_js_1","OPTIONS","jaxOptions","fontOptions","_this","factory","wrapperFactory","jax","cssStyles","StyleList_js_1","font","unknownCache","Map","CommonOutputJax","math","html","setDocument","node","createNode","toDOM","constructor","NAME","scale","metrics","adaptor","setStyle","lengths_js_1","pxPerEm","ex","params","x_height","root","setTeXclass","setScale","nodeMap","container","processMath","executeFilters","postFilters","bbox","wrap","getBBox","maps","getMetricMaps","_c","parent_1","parent","start","state","MathItem_js_1","METRICS","map","display","get","em","containerWidth","lineWidth","family","setMetrics","mtextInheritFont","outputData","mtextFamily","merrorInheritFont","merrorFamily","getFamily","test","getTestElement","measureMetrics","remove","domMaps","_g","has","set","keys","_j","i","_l","_o","values","_q","testInline","style","width","overflow","height","position","testDisplay","clone","firstChild","right","lastChild","append","fontFamily","fontSize","nodeSize","childNode","w","h","exFactor","getStyle","nodeBBox","left","Math","max","minScale","matchFontHeight","clear","addStyles","commonStyles","getStyles","styles","addWrapperStyles","addFontStyles","sheet","id","text","cssText","getKinds","kind","addClassStyles","getNodeClass","CLASS","document","type","def","content","ns","m","n","abs","toFixed","replace","variant","unknownText","cssFontStyles","setAttributes","measureTextNodeWithCache","chars","join","cached","measureTextNode","xml","base","bottom","top","d","italic","bold","Styles_js_1","__assign","OutputJax_js_1","mtextFont","merrorFont","mathmlSpacing","skipAttributes","displayAlign","displayIndent","exports"],"sources":["/home/kinzoku99/Desktop/ProjectIO/frontend/node_modules/mathjax-full/ts/output/common/OutputJax.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the abstract class for the CommonOutputJax\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {AbstractOutputJax} from '../../core/OutputJax.js';\nimport {MathDocument} from '../../core/MathDocument.js';\nimport {MathItem, Metrics, STATE} from '../../core/MathItem.js';\nimport {MmlNode} from '../../core/MmlTree/MmlNode.js';\nimport {FontData, FontDataClass, CharOptions, DelimiterData, CssFontData} from './FontData.js';\nimport {OptionList, separateOptions} from '../../util/Options.js';\nimport {CommonWrapper, AnyWrapper, AnyWrapperClass} from './Wrapper.js';\nimport {CommonWrapperFactory, AnyWrapperFactory} from './WrapperFactory.js';\nimport {percent} from '../../util/lengths.js';\nimport {StyleList, Styles} from '../../util/Styles.js';\nimport {StyleList as CssStyleList, CssStyles} from '../../util/StyleList.js';\n\n/*****************************************************************/\n\nexport interface ExtendedMetrics extends Metrics {\n  family: string;     // the font family for the surrounding text\n}\n\n/**\n * Maps linking a node to the test node it contains,\n *  and a map linking a node to the metrics within that node.\n */\nexport type MetricMap<N> = Map<N, ExtendedMetrics>;\ntype MetricDomMap<N> = Map<N, N>;\n\n/**\n * Maps for unknown characters\n */\nexport type UnknownBBox = {w: number, h: number, d: number};\nexport type UnknownMap = Map<string, UnknownBBox>;\nexport type UnknownVariantMap = Map<string, UnknownMap>;\n\n/*****************************************************************/\n\n/**\n *  The CommonOutputJax class on which the CHTML and SVG jax are built\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n * @template W  The Wrapper class\n * @template F  The WrapperFactory class\n * @template FD The FontData class\n * @template FC The FontDataClass object\n */\nexport abstract class CommonOutputJax<\n  N, T, D,\n  W extends AnyWrapper,\n  F extends AnyWrapperFactory,\n  FD extends FontData<any, any, any>,\n  FC extends FontDataClass<any, any, any>\n> extends AbstractOutputJax<N, T, D> {\n\n  /**\n   * The name of this output jax\n   */\n  public static NAME: string = 'Common';\n\n  /**\n   * @override\n   */\n  public static OPTIONS: OptionList = {\n      ...AbstractOutputJax.OPTIONS,\n    scale: 1,                      // global scaling factor for all expressions\n    minScale: .5,                  // smallest scaling factor to use\n    mtextInheritFont: false,       // true to make mtext elements use surrounding font\n    merrorInheritFont: false,      // true to make merror text use surrounding font\n    mtextFont: '',                 // font to use for mtext, if not inheriting (empty means use MathJax fonts)\n    merrorFont: 'serif',           // font to use for merror, if not inheriting (empty means use MathJax fonts)\n    mathmlSpacing: false,          // true for MathML spacing rules, false for TeX rules\n    skipAttributes: {},            // RFDa and other attributes NOT to copy to the output\n    exFactor: .5,                  // default size of ex in em units\n    displayAlign: 'center',        // default for indentalign when set to 'auto'\n    displayIndent: '0',            // default for indentshift when set to 'auto'\n    wrapperFactory: null,          // The wrapper factory to use\n    font: null,                    // The FontData object to use\n    cssStyles: null                // The CssStyles object to use\n  };\n\n  /**\n   *  The default styles for the output jax\n   */\n  public static commonStyles: CssStyleList = {};\n\n  /**\n   * Used for collecting styles needed for the output jax\n   */\n  public cssStyles: CssStyles;\n\n  /**\n   * The MathDocument for the math we find\n   */\n  public document: MathDocument<N, T, D>;\n\n  /**\n   * the MathItem currently being processed\n   */\n  public math: MathItem<N, T, D>;\n\n  /**\n   * The container element for the math\n   */\n  public container: N;\n\n  /**\n   * The top-level table, if any\n   */\n  public table: AnyWrapper;\n\n  /**\n   * The pixels per em for the math item being processed\n   */\n  public pxPerEm: number;\n\n  /**\n   * The data for the font in use\n   */\n  public font: FD;\n\n  /**\n   * The wrapper factory for the MathML nodes\n   */\n  public factory: F;\n\n  /**\n   * A map from the nodes in the expression currently being processed to the\n   * wrapper nodes for them (used by functions like core() to locate the wrappers\n   * from the core nodes)\n   */\n  public nodeMap: Map<MmlNode, W>;\n\n  /**\n   * Node used to test for in-line metric data\n   */\n  public testInline: N;\n\n  /**\n   * Node used to test for display metric data\n   */\n  public testDisplay: N;\n\n  /**\n   * Cache of unknonw character bounding boxes for this element\n   */\n  protected unknownCache: UnknownVariantMap;\n\n  /*****************************************************************/\n\n  /**\n   * Get the WrapperFactory and connect it to this output jax\n   * Get the cssStyle and font objects\n   *\n   * @param {OptionList} options         The configuration options\n   * @param {CommonWrapperFactory} defaultFactory  The default wrapper factory class\n   * @param {FC} defaultFont  The default FontData constructor\n   * @constructor\n   */\n  constructor(options: OptionList = null,\n              defaultFactory: typeof CommonWrapperFactory = null,\n              defaultFont: FC = null) {\n    const [jaxOptions, fontOptions] = separateOptions(options, defaultFont.OPTIONS);\n    super(jaxOptions);\n    this.factory = this.options.wrapperFactory ||\n      new defaultFactory<CommonOutputJax<N, T, D, W, F, FD, FC>, W,\n    AnyWrapperClass, CharOptions, DelimiterData, FD>();\n    this.factory.jax = this;\n    this.cssStyles = this.options.cssStyles || new CssStyles();\n    this.font = this.options.font || new defaultFont(fontOptions);\n    this.unknownCache = new Map();\n  }\n\n  /*****************************************************************/\n\n  /**\n   * Save the math document\n   * Create the mjx-container node\n   * Create the DOM output for the root MathML math node in the container\n   * Return the container node\n   *\n   * @override\n   */\n  public typeset(math: MathItem<N, T, D>, html: MathDocument<N, T, D>) {\n    this.setDocument(html);\n    let node = this.createNode();\n    this.toDOM(math, node, html);\n    return node;\n  }\n\n  /**\n   * @return {N}  The container DOM node for the typeset math\n   */\n  protected createNode(): N {\n    const jax = (this.constructor as typeof CommonOutputJax).NAME;\n    return this.html('mjx-container', {'class': 'MathJax', jax: jax});\n  }\n\n  /**\n   * @param {N} node   The container whose scale is to be set\n   */\n  protected setScale(node: N) {\n    const scale = this.math.metrics.scale * this.options.scale;\n    if (scale !== 1) {\n      this.adaptor.setStyle(node, 'fontSize', percent(scale));\n    }\n  }\n\n  /**\n   * Save the math document, if any, and the math item\n   * Set the document where HTML nodes will be created via the adaptor\n   * Recursively set the TeX classes for the nodes\n   * Set the scaling for the DOM node\n   * Create the nodeMap (maps MathML nodes to corresponding wrappers)\n   * Create the HTML output for the root MathML node in the container\n   * Clear the nodeMape\n   * Execute the post-filters\n   *\n   * @param {MathItem} math      The math item to convert\n   * @param {N} node             The contaier to place the result into\n   * @param {MathDocument} html  The document containing the math\n   */\n  public toDOM(math: MathItem<N, T, D>, node: N, html: MathDocument<N, T, D> = null) {\n    this.setDocument(html);\n    this.math = math;\n    this.pxPerEm = math.metrics.ex / this.font.params.x_height;\n    math.root.setTeXclass(null);\n    this.setScale(node);\n    this.nodeMap = new Map<MmlNode, W>();\n    this.container = node;\n    this.processMath(math.root, node);\n    this.nodeMap = null;\n    this.executeFilters(this.postFilters, math, html, node);\n  }\n\n  /**\n   * This is the actual typesetting function supplied by the subclass\n   *\n   * @param {MmlNode} math   The intenral MathML node of the root math element to process\n   * @param {N} node         The container node where the math is to be typeset\n   */\n  protected abstract processMath(math: MmlNode, node: N): void;\n\n  /*****************************************************************/\n\n  /**\n   * @param {MathItem} math      The MathItem to get the bounding box for\n   * @param {MathDocument} html  The MathDocument for the math\n   */\n  public getBBox(math: MathItem<N, T, D>, html: MathDocument<N, T, D>) {\n    this.setDocument(html);\n    this.math = math;\n    math.root.setTeXclass(null);\n    this.nodeMap = new Map<MmlNode, W>();\n    let bbox = this.factory.wrap(math.root).getBBox();\n    this.nodeMap = null;\n    return bbox;\n  }\n\n  /*****************************************************************/\n\n  /**\n   * @override\n   */\n  public getMetrics(html: MathDocument<N, T, D>) {\n    this.setDocument(html);\n    const adaptor = this.adaptor;\n    const maps = this.getMetricMaps(html);\n    for (const math of html.math) {\n      const parent = adaptor.parent(math.start.node);\n      if (math.state() < STATE.METRICS && parent) {\n        const map = maps[math.display ? 1 : 0];\n        const {em, ex, containerWidth, lineWidth, scale, family} = map.get(parent);\n        math.setMetrics(em, ex, containerWidth, lineWidth, scale);\n        if (this.options.mtextInheritFont) {\n          math.outputData.mtextFamily = family;\n        }\n        if (this.options.merrorInheritFont) {\n          math.outputData.merrorFamily = family;\n        }\n        math.state(STATE.METRICS);\n      }\n    }\n  }\n\n  /**\n   * @param {N} node            The container node whose metrics are to be measured\n   * @param {boolean} display   True if the metrics are for displayed math\n   * @return {Metrics}          Object containing em, ex, containerWidth, etc.\n   */\n  public getMetricsFor(node: N, display: boolean): ExtendedMetrics {\n    const getFamily = (this.options.mtextInheritFont || this.options.merrorInheritFont);\n    const test = this.getTestElement(node, display);\n    const metrics = this.measureMetrics(test, getFamily);\n    this.adaptor.remove(test);\n    return metrics;\n  }\n\n  /**\n   * Get a MetricMap for the math list\n   *\n   * @param {MathDocument} html  The math document whose math list is to be processed.\n   * @return {MetricMap[]}       The node-to-metrics maps for all the containers that have math\n   */\n  protected getMetricMaps(html: MathDocument<N, T, D>): MetricMap<N>[] {\n    const adaptor = this.adaptor;\n    const domMaps = [new Map() as MetricDomMap<N>, new Map() as MetricDomMap<N>];\n    //\n    // Add the test elements all at once (so only one reflow)\n    // Currently, we do one test for each container element for in-line and one for display math\n    //   (since we need different techniques for the two forms to avoid a WebKit bug).\n    //   This may need to be changed to handle floating elements better, since that has to be\n    //   done at the location of the math itself, not necessarily the end of the container.\n    //\n    for (const math of html.math) {\n      const node = adaptor.parent(math.start.node);\n      if (node && math.state() < STATE.METRICS) {\n        const map = domMaps[math.display ? 1 : 0];\n        if (!map.has(node)) {\n          map.set(node, this.getTestElement(node, math.display));\n        }\n      }\n    }\n    //\n    // Measure the metrics for all the mapped elements\n    //\n    const getFamily = this.options.mtextInheritFont || this.options.merrorInheritFont;\n    const maps = [new Map() as MetricMap<N>, new Map() as MetricMap<N>];\n    for (const i of maps.keys()) {\n      for (const node of domMaps[i].keys()) {\n        maps[i].set(node, this.measureMetrics(domMaps[i].get(node), getFamily));\n      }\n    }\n    //\n    // Remove the test elements\n    //\n    for (const i of maps.keys()) {\n      for (const node of domMaps[i].values()) {\n        adaptor.remove(node);\n      }\n    }\n    return maps;\n  }\n\n  /**\n   * @param {N} node    The math element to be measured\n   * @return {N}        The test elements that were added\n   */\n  protected getTestElement(node: N, display: boolean): N {\n    const adaptor = this.adaptor;\n    if (!this.testInline) {\n      this.testInline = this.html('mjx-test', {style: {\n        display:            'inline-block',\n        width:              '100%',\n        'font-style':       'normal',\n        'font-weight':      'normal',\n        'font-size':        '100%',\n        'font-size-adjust': 'none',\n        'text-indent':      0,\n        'text-transform':   'none',\n        'letter-spacing':   'normal',\n        'word-spacing':     'normal',\n        overflow:           'hidden',\n        height:             '1px',\n        'margin-right':     '-1px'\n      }}, [\n        this.html('mjx-left-box', {style: {\n          display: 'inline-block',\n          width: 0,\n          'float': 'left'\n        }}),\n        this.html('mjx-ex-box', {style: {\n          position: 'absolute',\n          overflow: 'hidden',\n          width: '1px', height: '60ex'\n        }}),\n        this.html('mjx-right-box', {style: {\n          display: 'inline-block',\n          width: 0,\n          'float': 'right'\n        }})\n      ]);\n      this.testDisplay = adaptor.clone(this.testInline);\n      adaptor.setStyle(this.testDisplay, 'display', 'table');\n      adaptor.setStyle(this.testDisplay, 'margin-right', '');\n      adaptor.setStyle(adaptor.firstChild(this.testDisplay) as N, 'display', 'none');\n      const right = adaptor.lastChild(this.testDisplay) as N;\n      adaptor.setStyle(right, 'display', 'table-cell');\n      adaptor.setStyle(right, 'width', '10000em');\n      adaptor.setStyle(right, 'float', '');\n    }\n    return adaptor.append(node, adaptor.clone(display ? this.testDisplay : this.testInline) as N) as N;\n  }\n\n  /**\n   * @param {N} node              The test node to measure\n   * @param {boolean} getFamily   True if font family of surroundings is to be determined\n   * @return {ExtendedMetrics}    The metric data for the given node\n   */\n  protected measureMetrics(node: N, getFamily: boolean): ExtendedMetrics {\n    const adaptor = this.adaptor;\n    const family = (getFamily ? adaptor.fontFamily(node) : '');\n    const em = adaptor.fontSize(node);\n    const [w, h] = adaptor.nodeSize(adaptor.childNode(node, 1) as N);\n    const ex = (w ? h / 60 : em * this.options.exFactor);\n    const containerWidth = (!w ? 1000000 : adaptor.getStyle(node, 'display') === 'table' ?\n                            adaptor.nodeSize(adaptor.lastChild(node) as N)[0] - 1 :\n                            adaptor.nodeBBox(adaptor.lastChild(node) as N).left -\n                            adaptor.nodeBBox(adaptor.firstChild(node) as N).left - 2);\n    const scale = Math.max(this.options.minScale,\n                           this.options.matchFontHeight ? ex / this.font.params.x_height / em : 1);\n    const lineWidth = 1000000;      // no linebreaking (otherwise would be a percentage of cwidth)\n    return {em, ex, containerWidth, lineWidth, scale, family};\n  }\n\n  /*****************************************************************/\n\n  /**\n   * @override\n   */\n  public styleSheet(html: MathDocument<N, T, D>) {\n    this.setDocument(html);\n    //\n    // Start with the common styles\n    //\n    this.cssStyles.clear();\n    this.cssStyles.addStyles((this.constructor as typeof CommonOutputJax).commonStyles);\n    //\n    // Add document-specific styles\n    //\n    if ('getStyles' in html) {\n      for (const styles of ((html as any).getStyles() as CssStyleList[])) {\n        this.cssStyles.addStyles(styles);\n      }\n    }\n    //\n    // Gather the CSS from the classes and font\n    //\n    this.addWrapperStyles(this.cssStyles);\n    this.addFontStyles(this.cssStyles);\n    //\n    // Create the stylesheet for the CSS\n    //\n    const sheet = this.html('style', {id: 'MJX-styles'}, [this.text('\\n' + this.cssStyles.cssText + '\\n')]);\n    return sheet as N;\n  }\n\n  /**\n   * @param {CssStyles} styles   The style object to add to\n   */\n  protected addFontStyles(styles: CssStyles) {\n    styles.addStyles(this.font.styles);\n  }\n\n  /**\n   * @param {CssStyles} styles   The style object to add to\n   */\n  protected addWrapperStyles(styles: CssStyles) {\n    for (const kind of this.factory.getKinds()) {\n      this.addClassStyles(this.factory.getNodeClass(kind), styles);\n    }\n  }\n\n  /**\n   * @param {typeof CommonWrapper} CLASS  The Wrapper class whose styles are to be added\n   * @param {CssStyles} styles            The style object to add to.\n   */\n  protected addClassStyles(CLASS: typeof CommonWrapper, styles: CssStyles) {\n    styles.addStyles(CLASS.styles);\n  }\n\n  /*****************************************************************/\n\n  /**\n   * @param {MathDocument} html  The document to be used\n   */\n  protected setDocument(html: MathDocument<N, T, D>) {\n    if (html) {\n      this.document = html;\n      this.adaptor.document = html.document;\n    }\n  }\n\n  /**\n   * @param {string} type      The type of HTML node to create\n   * @param {OptionList} def   The properties to set on the HTML node\n   * @param {(N|T)[]} content  Array of child nodes to set for the HTML node\n   * @param {string} ns        The namespace for the element\n   * @return {N}               The newly created DOM tree\n   */\n  public html(type: string, def: OptionList = {}, content: (N | T)[] = [], ns?: string): N {\n    return this.adaptor.node(type, def, content, ns);\n  }\n\n  /**\n   * @param {string} text  The text string for which to make a text node\n   *\n   * @return {T}  A text node with the given text\n   */\n  public text(text: string): T {\n    return this.adaptor.text(text);\n  }\n\n  /**\n   * @param {number} m    A number to be shown with a fixed number of digits\n   * @param {number=} n   The number of digits to use\n   * @return {string}     The formatted number\n   */\n  public fixed(m: number, n: number = 3): string {\n    if (Math.abs(m) < .0006) {\n      return '0';\n    }\n    return m.toFixed(n).replace(/\\.?0+$/, '');\n  }\n\n  /*****************************************************************/\n  /*\n   *  Methods for handling text that is not in the current MathJax font\n   */\n\n  /**\n   * Create a DOM node for text from a specific CSS font, or that is\n   *  not in the current MathJax font\n   *\n   * @param {string} text        The text to be displayed\n   * @param {string} variant     The name of the variant for the text\n   * @return {N}                 The text element containing the text\n   */\n  public abstract unknownText(text: string, variant: string): N;\n\n  /**\n   * Measure text from a specific font, or that isn't in the MathJax font\n   *\n   * @param {string} text        The text to measure\n   * @param {string} variant     The variant for the text\n   * @param {CssFontData} font   The family, italic, and bold data for explicit fonts\n   * @return {UnknownBBox}       The width, height, and depth of the text (in ems)\n   */\n  public measureText(text: string, variant: string, font: CssFontData = ['', false, false]): UnknownBBox {\n    const node = this.unknownText(text, variant);\n    if (variant === '-explicitFont') {\n      const styles = this.cssFontStyles(font);\n      this.adaptor.setAttributes(node, {style: styles});\n    }\n    return this.measureTextNodeWithCache(node, text, variant, font);\n  }\n\n  /**\n   * Get the size of a text node, caching the result, and using\n   *   a cached result, if there is one.\n   *\n   * @param {N} text         The text element to measure\n   * @param {string} chars   The string contained in the text node\n   * @param {string} variant     The variant for the text\n   * @param {CssFontData} font   The family, italic, and bold data for explicit fonts\n   * @return {UnknownBBox}   The width, height and depth for the text\n   */\n  public measureTextNodeWithCache(\n    text: N, chars: string, variant: string,\n    font: CssFontData = ['', false, false]\n  ): UnknownBBox {\n    if (variant === '-explicitFont') {\n      variant = [font[0], font[1] ? 'T' : 'F', font[2] ? 'T' : 'F', ''].join('-');\n    }\n    if (!this.unknownCache.has(variant)) {\n      this.unknownCache.set(variant, new Map());\n    }\n    const map = this.unknownCache.get(variant);\n    const cached = map.get(chars);\n    if (cached) return cached;\n    const bbox = this.measureTextNode(text);\n    map.set(chars, bbox);\n    return bbox;\n  }\n\n  /**\n   * Measure the width of a text element by placing it in the page\n   *  and looking up its size (fake the height and depth, since we can't measure that)\n   *\n   * @param {N} text            The text element to measure\n   * @return {UnknownBBox}      The width, height and depth for the text (in ems)\n   */\n  public abstract measureTextNode(text: N): UnknownBBox;\n\n  /**\n   * Measure the width, height and depth of an annotation-xml node's content\n   *\n   * @param{N} xml          The xml content node to be measured\n   * @return {UnknownBBox}  The width, height, and depth of the content\n   */\n  public measureXMLnode(xml: N): UnknownBBox {\n    const adaptor = this.adaptor;\n    const content =  this.html('mjx-xml-block', {style: {display: 'inline-block'}}, [adaptor.clone(xml)]);\n    const base = this.html('mjx-baseline', {style: {display: 'inline-block', width: 0, height: 0}});\n    const style = {\n      position: 'absolute',\n      display: 'inline-block',\n      'font-family': 'initial',\n      'line-height': 'normal'\n    };\n    const node = this.html('mjx-measure-xml', {style}, [base, content]);\n    adaptor.append(adaptor.parent(this.math.start.node), this.container);\n    adaptor.append(this.container, node);\n    const em = this.math.metrics.em * this.math.metrics.scale;\n    const {left, right, bottom, top} = adaptor.nodeBBox(content);\n    const w = (right - left) / em;\n    const h = (adaptor.nodeBBox(base).top - top) / em;\n    const d = (bottom - top) / em - h;\n    adaptor.remove(this.container);\n    adaptor.remove(node);\n    return {w, h, d};\n  }\n\n  /**\n   * @param {CssFontData} font   The family, style, and weight for the given font\n   * @param {StyleList} styles   The style object to add the font data to\n   * @return {StyleList}         The modified (or initialized) style object\n   */\n  public cssFontStyles(font: CssFontData, styles: StyleList = {}): StyleList {\n    const [family, italic, bold] = font;\n    styles['font-family'] = this.font.getFamily(family);\n    if (italic) styles['font-style'] = 'italic';\n    if (bold) styles['font-weight'] = 'bold';\n    return styles;\n  }\n\n  /**\n   * @param {Styles} styles   The style object to query\n   * @return {CssFontData}    The family, italic, and boolean values\n   */\n  public getFontData(styles: Styles): CssFontData {\n    if (!styles) {\n      styles = new Styles();\n    }\n    return [this.font.getFamily(styles.get('font-family')),\n            styles.get('font-style') === 'italic',\n            styles.get('font-weight') === 'bold'] as CssFontData;\n  }\n\n}\n"]},"metadata":{},"sourceType":"script"}