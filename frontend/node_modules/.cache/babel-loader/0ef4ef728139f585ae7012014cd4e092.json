{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MmlMfrac = void 0;\n\nvar MmlNode_js_1 = require(\"../MmlNode.js\");\n\nvar MmlMfrac = function (_super) {\n  __extends(MmlMfrac, _super);\n\n  function MmlMfrac() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(MmlMfrac.prototype, \"kind\", {\n    get: function () {\n      return 'mfrac';\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MmlMfrac.prototype, \"arity\", {\n    get: function () {\n      return 2;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MmlMfrac.prototype, \"linebreakContainer\", {\n    get: function () {\n      return true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  MmlMfrac.prototype.setTeXclass = function (prev) {\n    var e_1, _a;\n\n    this.getPrevClass(prev);\n\n    try {\n      for (var _b = __values(this.childNodes), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var child = _c.value;\n        child.setTeXclass(null);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    return this;\n  };\n\n  MmlMfrac.prototype.setChildInheritedAttributes = function (attributes, display, level, prime) {\n    if (!display || level > 0) {\n      level++;\n    }\n\n    this.childNodes[0].setInheritedAttributes(attributes, false, level, prime);\n    this.childNodes[1].setInheritedAttributes(attributes, false, level, true);\n  };\n\n  MmlMfrac.defaults = __assign(__assign({}, MmlNode_js_1.AbstractMmlBaseNode.defaults), {\n    linethickness: 'medium',\n    numalign: 'center',\n    denomalign: 'center',\n    bevelled: false\n  });\n  return MmlMfrac;\n}(MmlNode_js_1.AbstractMmlBaseNode);\n\nexports.MmlMfrac = MmlMfrac;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;AAOA;AAA8BA;;AAA9B;;AA4DC;;AA5CCC,wBAAWC,kBAAX,EAAW,MAAX,EAAe;SAAf;AACE,aAAO,OAAP;AACD,KAFc;qBAAA;;AAAA,GAAf;AAQAD,wBAAWC,kBAAX,EAAW,OAAX,EAAgB;SAAhB;AACE,aAAO,CAAP;AACD,KAFe;qBAAA;;AAAA,GAAhB;AAQAD,wBAAWC,kBAAX,EAAW,oBAAX,EAA6B;SAA7B;AACE,aAAO,IAAP;AACD,KAF4B;qBAAA;;AAAA,GAA7B;;AAQOA,mCAAP,UAAmBC,IAAnB,EAAgC;;;AAC9B,SAAKC,YAAL,CAAkBD,IAAlB;;;AACA,WAAoB,uBAAKE,UAAL,GAAeC,cAAnC,EAAmC,QAAnC,EAAmCA,cAAnC,EAAqC;AAAhC,YAAMC,KAAK,WAAX;AACHA,aAAK,CAACC,WAAN,CAAkB,IAAlB;AACD;;;;;;;;;;;;;AACD,WAAO,IAAP;AACD,GANM;;AAYGN,mDAAV,UAAsCO,UAAtC,EAAiEC,OAAjE,EAAmFC,KAAnF,EAAkGC,KAAlG,EAAgH;AAC9G,QAAI,CAACF,OAAD,IAAYC,KAAK,GAAG,CAAxB,EAA2B;AACzBA,WAAK;AACN;;AACD,SAAKN,UAAL,CAAgB,CAAhB,EAAmBQ,sBAAnB,CAA0CJ,UAA1C,EAAsD,KAAtD,EAA6DE,KAA7D,EAAoEC,KAApE;AACA,SAAKP,UAAL,CAAgB,CAAhB,EAAmBQ,sBAAnB,CAA0CJ,UAA1C,EAAsD,KAAtD,EAA6DE,KAA7D,EAAoE,IAApE;AACD,GANS;;AA/CIT,sBAAQY,sBACjBC,iCAAoBC,QADH,GACW;AAC/BC,iBAAa,EAAE,QADgB;AAE/BC,YAAQ,EAAE,QAFqB;AAG/BC,cAAU,EAAE,QAHmB;AAI/BC,YAAQ,EAAE;AAJqB,GADX,CAAR;AAuDhB;AAAC,CA5DD,CAA8BL,gCAA9B;;AAAaM","names":["__extends","Object","MmlMfrac","prev","getPrevClass","childNodes","_c","child","setTeXclass","attributes","display","level","prime","setInheritedAttributes","__assign","MmlNode_js_1","defaults","linethickness","numalign","denomalign","bevelled","exports"],"sources":["/home/kinzoku99/Desktop/ProjectIO/frontend/node_modules/mathjax-full/ts/core/MmlTree/MmlNodes/mfrac.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the MmlMfrac node\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {PropertyList} from '../../Tree/Node.js';\nimport {MmlNode, AbstractMmlBaseNode, AttributeList} from '../MmlNode.js';\n\n/*****************************************************************/\n/**\n *  Implements the MmlMfrac node class (subclass of AbstractMmlBaseNode)\n */\n\nexport class MmlMfrac extends AbstractMmlBaseNode {\n\n  /**\n   * @override\n   */\n  public static defaults: PropertyList = {\n    ...AbstractMmlBaseNode.defaults,\n    linethickness: 'medium',\n    numalign: 'center',\n    denomalign: 'center',\n    bevelled: false\n  };\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'mfrac';\n  }\n\n  /**\n   * <mfrac> requires two children\n   * @override\n   */\n  public get arity() {\n    return 2;\n  }\n\n  /**\n   * The children of <mfrac> can include line breaks\n   * @override\n   */\n  public get linebreakContainer() {\n    return true;\n  }\n\n  /**\n   * Update the children separately\n   * @override\n   */\n  public setTeXclass(prev: MmlNode) {\n    this.getPrevClass(prev);\n    for (const child of this.childNodes) {\n      child.setTeXclass(null);\n    }\n    return this;\n  }\n\n  /**\n   * Adjust the display level, and use prime style in denominator\n   * @override\n   */\n  protected setChildInheritedAttributes(attributes: AttributeList, display: boolean, level: number, prime: boolean) {\n    if (!display || level > 0) {\n      level++;\n    }\n    this.childNodes[0].setInheritedAttributes(attributes, false, level, prime);\n    this.childNodes[1].setInheritedAttributes(attributes, false, level, true);\n  }\n\n}\n"]},"metadata":{},"sourceType":"script"}