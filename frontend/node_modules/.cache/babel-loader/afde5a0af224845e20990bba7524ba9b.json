{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MmlMalignmark = void 0;\n\nvar MmlNode_js_1 = require(\"../MmlNode.js\");\n\nvar MmlMalignmark = function (_super) {\n  __extends(MmlMalignmark, _super);\n\n  function MmlMalignmark() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(MmlMalignmark.prototype, \"kind\", {\n    get: function () {\n      return 'malignmark';\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MmlMalignmark.prototype, \"arity\", {\n    get: function () {\n      return 0;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MmlMalignmark.prototype, \"isSpacelike\", {\n    get: function () {\n      return true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  MmlMalignmark.defaults = __assign(__assign({}, MmlNode_js_1.AbstractMmlNode.defaults), {\n    edge: 'left'\n  });\n  return MmlMalignmark;\n}(MmlNode_js_1.AbstractMmlNode);\n\nexports.MmlMalignmark = MmlMalignmark;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;AAOA;AAAmCA;;AAAnC;;AAiCC;;AApBCC,wBAAWC,uBAAX,EAAW,MAAX,EAAe;SAAf;AACE,aAAO,YAAP;AACD,KAFc;qBAAA;;AAAA,GAAf;AAQAD,wBAAWC,uBAAX,EAAW,OAAX,EAAgB;SAAhB;AACE,aAAO,CAAP;AACD,KAFe;qBAAA;;AAAA,GAAhB;AAQAD,wBAAWC,uBAAX,EAAW,aAAX,EAAsB;SAAtB;AACE,aAAO,IAAP;AACD,KAFqB;qBAAA;;AAAA,GAAtB;AAxBcA,2BAAQC,sBACjBC,6BAAgBC,QADC,GACO;AAC3BC,QAAI,EAAE;AADqB,GADP,CAAR;AA4BhB;AAAC,CAjCD,CAAmCF,4BAAnC;;AAAaG","names":["__extends","Object","MmlMalignmark","__assign","MmlNode_js_1","defaults","edge","exports"],"sources":["/home/kinzoku99/Desktop/ProjectIO/frontend/node_modules/mathjax-full/ts/core/MmlTree/MmlNodes/malignmark.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the MmlMalignmark node\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {PropertyList} from '../../Tree/Node.js';\nimport {AbstractMmlNode} from '../MmlNode.js';\n\n/*****************************************************************/\n/**\n *  Implements the MmlMalignmark node class (subclass of AbstractMmlNode)\n */\n\nexport class MmlMalignmark extends AbstractMmlNode {\n\n  /**\n   * @override\n   */\n  public static defaults: PropertyList = {\n    ...AbstractMmlNode.defaults,\n    edge: 'left'\n  };\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'malignmark';\n  }\n\n  /**\n   * No children allowed\n   * @override\n   */\n  public get arity() {\n    return 0;\n  }\n\n  /**\n   * <malignmark> is space-like\n   * @override\n   */\n  public get isSpacelike() {\n    return true;\n  }\n\n}\n"]},"metadata":{},"sourceType":"script"}