{"ast":null,"code":"\"use strict\";\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n  return to;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar NodeUtil_js_1 = require(\"./NodeUtil.js\");\n\nvar Stack = function () {\n  function Stack(_factory, _env, inner) {\n    this._factory = _factory;\n    this._env = _env;\n    this.global = {};\n    this.stack = [];\n    this.global = {\n      isInner: inner\n    };\n    this.stack = [this._factory.create('start', this.global)];\n\n    if (_env) {\n      this.stack[0].env = _env;\n    }\n\n    this.env = this.stack[0].env;\n  }\n\n  Object.defineProperty(Stack.prototype, \"env\", {\n    get: function () {\n      return this._env;\n    },\n    set: function (env) {\n      this._env = env;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  Stack.prototype.Push = function () {\n    var e_1, _a;\n\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    try {\n      for (var args_1 = __values(args), args_1_1 = args_1.next(); !args_1_1.done; args_1_1 = args_1.next()) {\n        var node = args_1_1.value;\n\n        if (!node) {\n          continue;\n        }\n\n        var item = NodeUtil_js_1.default.isNode(node) ? this._factory.create('mml', node) : node;\n        item.global = this.global;\n\n        var _b = __read(this.stack.length ? this.Top().checkItem(item) : [null, true], 2),\n            top_1 = _b[0],\n            success = _b[1];\n\n        if (!success) {\n          continue;\n        }\n\n        if (top_1) {\n          this.Pop();\n          this.Push.apply(this, __spreadArray([], __read(top_1)));\n          continue;\n        }\n\n        this.stack.push(item);\n\n        if (item.env) {\n          if (item.copyEnv) {\n            Object.assign(item.env, this.env);\n          }\n\n          this.env = item.env;\n        } else {\n          item.env = this.env;\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (args_1_1 && !args_1_1.done && (_a = args_1.return)) _a.call(args_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n\n  Stack.prototype.Pop = function () {\n    var item = this.stack.pop();\n\n    if (!item.isOpen) {\n      delete item.env;\n    }\n\n    this.env = this.stack.length ? this.Top().env : {};\n    return item;\n  };\n\n  Stack.prototype.Top = function (n) {\n    if (n === void 0) {\n      n = 1;\n    }\n\n    return this.stack.length < n ? null : this.stack[this.stack.length - n];\n  };\n\n  Stack.prototype.Prev = function (noPop) {\n    var top = this.Top();\n    return noPop ? top.First : top.Pop();\n  };\n\n  Stack.prototype.toString = function () {\n    return 'stack[\\n  ' + this.stack.join('\\n  ') + '\\n]';\n  };\n\n  return Stack;\n}();\n\nexports.default = Stack;","map":{"version":3,"mappings":"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","names":["_factory","_env","inner","global","isInner","stack","create","env","Object","Stack","args","args_1_1","node","item","NodeUtil_js_1","isNode","length","Top","checkItem","top_1","success","Pop","Push","apply","__spreadArray","push","copyEnv","assign","pop","isOpen","n","noPop","top","First","join"],"sources":["/home/kinzoku99/Desktop/ProjectIO/frontend/node_modules/mathjax-full/ts/input/tex/Stack.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2009-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview The Stack for the TeX parser.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\n\nimport NodeUtil from './NodeUtil.js';\nimport {MmlNode} from '../../core/MmlTree/MmlNode.js';\nimport {StackItem, EnvList} from './StackItem.js';\nimport StackItemFactory from './StackItemFactory.js';\n\n\nexport default class Stack {\n\n  /**\n   * @type {EnvList}\n   */\n  public global: EnvList = {};\n\n  /**\n   * The actual stack, a list of stack items.\n   * @type {Array.<StackItem>}\n   */\n  private stack: StackItem[] = [];\n\n  /**\n   * @constructor\n   * @param {StackItemFactory} factory The stack item factory.\n   * @param {EnvList} env The environment.\n   * @param {boolean} inner True if parser has been called recursively.\n   */\n  constructor(private _factory: StackItemFactory,\n              private _env: EnvList, inner: boolean) {\n    this.global = {isInner: inner};\n    this.stack = [ this._factory.create('start', this.global) ];\n    if (_env) {\n      this.stack[0].env = _env;\n    }\n    this.env = this.stack[0].env;\n  }\n\n\n  /**\n   * Set the environment of the stack.\n   * @param {EnvList} env The new environment.\n   */\n  public set env(env: EnvList) {\n    this._env = env;\n  }\n\n\n  /**\n   * Retrieves the environment of that stack.\n   * @return {EnvList} The current environment.\n   */\n  public get env(): EnvList {\n    return this._env;\n  }\n\n\n  /**\n   * Pushes items or nodes onto stack.\n   * @param {...StackItem|MmlNode} args A list of items to push.\n   */\n  public Push(...args: (StackItem | MmlNode)[]) {\n    for (const node of args) {\n      if (!node) {\n        continue;\n      }\n      const item = NodeUtil.isNode(node) ?\n        this._factory.create('mml', node) : node as StackItem;\n      item.global = this.global;\n      const [top, success] =\n        this.stack.length ? this.Top().checkItem(item) : [null, true];\n      if (!success) {\n        continue;\n      }\n      if (top) {\n        this.Pop();\n        this.Push(...top);\n        continue;\n      }\n      this.stack.push(item);\n      if (item.env) {\n        if (item.copyEnv) {\n          Object.assign(item.env, this.env);\n        }\n        this.env = item.env;\n      } else {\n        item.env = this.env;\n      }\n    }\n  }\n\n\n  /**\n   * Pop the topmost elements off the stack.\n   * @return {StackItem} A stack item.\n   */\n  public Pop(): StackItem {\n    const item = this.stack.pop();\n    if (!item.isOpen) {\n      delete item.env;\n    }\n    this.env = (this.stack.length ? this.Top().env : {});\n    return item;\n  }\n\n\n  /**\n   * Lookup the nth elements on the stack without removing them.\n   * @param {number=} n Position of element that should be returned. Default 1.\n   * @return {StackItem} Nth item on the stack.\n   */\n  public Top(n: number = 1): StackItem {\n    return this.stack.length < n ? null : this.stack[this.stack.length - n];\n  }\n\n\n  /**\n   * Lookup the topmost element on the stack, returning the Mml node in that\n   * item. Optionally pops the Mml node from that stack item.\n   * @param {boolean=} noPop Pop top item if true.\n   * @return {MmlNode} The Mml node in the topmost stack item.\n   */\n  public Prev(noPop?: boolean): MmlNode | void {\n    const top = this.Top();\n    return noPop ? top.First : top.Pop();\n  }\n\n\n  /**\n   * @override\n   */\n  public toString() {\n    return 'stack[\\n  ' + this.stack.join('\\n  ') + '\\n]';\n  }\n\n}\n"]},"metadata":{},"sourceType":"script"}