{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MmlInferredMrow = exports.MmlMrow = void 0;\n\nvar MmlNode_js_1 = require(\"../MmlNode.js\");\n\nvar MmlMrow = function (_super) {\n  __extends(MmlMrow, _super);\n\n  function MmlMrow() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._core = null;\n    return _this;\n  }\n\n  Object.defineProperty(MmlMrow.prototype, \"kind\", {\n    get: function () {\n      return 'mrow';\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MmlMrow.prototype, \"isSpacelike\", {\n    get: function () {\n      var e_1, _a;\n\n      try {\n        for (var _b = __values(this.childNodes), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var child = _c.value;\n\n          if (!child.isSpacelike) {\n            return false;\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      return true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MmlMrow.prototype, \"isEmbellished\", {\n    get: function () {\n      var e_2, _a;\n\n      var embellished = false;\n      var i = 0;\n\n      try {\n        for (var _b = __values(this.childNodes), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var child = _c.value;\n\n          if (child) {\n            if (child.isEmbellished) {\n              if (embellished) {\n                return false;\n              }\n\n              embellished = true;\n              this._core = i;\n            } else if (!child.isSpacelike) {\n              return false;\n            }\n          }\n\n          i++;\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n\n      return embellished;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  MmlMrow.prototype.core = function () {\n    if (!this.isEmbellished || this._core == null) {\n      return this;\n    }\n\n    return this.childNodes[this._core];\n  };\n\n  MmlMrow.prototype.coreMO = function () {\n    if (!this.isEmbellished || this._core == null) {\n      return this;\n    }\n\n    return this.childNodes[this._core].coreMO();\n  };\n\n  MmlMrow.prototype.nonSpaceLength = function () {\n    var e_3, _a;\n\n    var n = 0;\n\n    try {\n      for (var _b = __values(this.childNodes), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var child = _c.value;\n\n        if (child && !child.isSpacelike) {\n          n++;\n        }\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n\n    return n;\n  };\n\n  MmlMrow.prototype.firstNonSpace = function () {\n    var e_4, _a;\n\n    try {\n      for (var _b = __values(this.childNodes), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var child = _c.value;\n\n        if (child && !child.isSpacelike) {\n          return child;\n        }\n      }\n    } catch (e_4_1) {\n      e_4 = {\n        error: e_4_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_4) throw e_4.error;\n      }\n    }\n\n    return null;\n  };\n\n  MmlMrow.prototype.lastNonSpace = function () {\n    var i = this.childNodes.length;\n\n    while (--i >= 0) {\n      var child = this.childNodes[i];\n\n      if (child && !child.isSpacelike) {\n        return child;\n      }\n    }\n\n    return null;\n  };\n\n  MmlMrow.prototype.setTeXclass = function (prev) {\n    var e_5, _a, e_6, _b;\n\n    if (this.getProperty('open') != null || this.getProperty('close') != null) {\n      this.getPrevClass(prev);\n      prev = null;\n\n      try {\n        for (var _c = __values(this.childNodes), _d = _c.next(); !_d.done; _d = _c.next()) {\n          var child = _d.value;\n          prev = child.setTeXclass(prev);\n        }\n      } catch (e_5_1) {\n        e_5 = {\n          error: e_5_1\n        };\n      } finally {\n        try {\n          if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n        } finally {\n          if (e_5) throw e_5.error;\n        }\n      }\n\n      if (this.texClass == null) {\n        this.texClass = MmlNode_js_1.TEXCLASS.INNER;\n      }\n    } else {\n      try {\n        for (var _e = __values(this.childNodes), _f = _e.next(); !_f.done; _f = _e.next()) {\n          var child = _f.value;\n          prev = child.setTeXclass(prev);\n        }\n      } catch (e_6_1) {\n        e_6 = {\n          error: e_6_1\n        };\n      } finally {\n        try {\n          if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n        } finally {\n          if (e_6) throw e_6.error;\n        }\n      }\n\n      if (this.childNodes[0]) {\n        this.updateTeXclass(this.childNodes[0]);\n      }\n    }\n\n    return prev;\n  };\n\n  MmlMrow.defaults = __assign({}, MmlNode_js_1.AbstractMmlNode.defaults);\n  return MmlMrow;\n}(MmlNode_js_1.AbstractMmlNode);\n\nexports.MmlMrow = MmlMrow;\n\nvar MmlInferredMrow = function (_super) {\n  __extends(MmlInferredMrow, _super);\n\n  function MmlInferredMrow() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(MmlInferredMrow.prototype, \"kind\", {\n    get: function () {\n      return 'inferredMrow';\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MmlInferredMrow.prototype, \"isInferred\", {\n    get: function () {\n      return true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MmlInferredMrow.prototype, \"notParent\", {\n    get: function () {\n      return true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  MmlInferredMrow.prototype.toString = function () {\n    return '[' + this.childNodes.join(',') + ']';\n  };\n\n  MmlInferredMrow.defaults = MmlMrow.defaults;\n  return MmlInferredMrow;\n}(MmlMrow);\n\nexports.MmlInferredMrow = MmlInferredMrow;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;AAOA;AAA6BA;;AAA7B;AAAA;;AAYYC,kBAAgB,IAAhB;;AA8IX;;AAzICC,wBAAWC,iBAAX,EAAW,MAAX,EAAe;SAAf;AACE,aAAO,MAAP;AACD,KAFc;qBAAA;;AAAA,GAAf;AASAD,wBAAWC,iBAAX,EAAW,aAAX,EAAsB;SAAtB;;;;AACE,aAAoB,uBAAKC,UAAL,GAAeC,cAAnC,EAAmC,QAAnC,EAAmCA,cAAnC,EAAqC;AAAhC,cAAMC,KAAK,WAAX;;AACH,cAAI,CAACA,KAAK,CAACC,WAAX,EAAwB;AACtB,mBAAO,KAAP;AACD;AACF;;;;;;;;;;;;;AACD,aAAO,IAAP;AACD,KAPqB;qBAAA;;AAAA,GAAtB;AAeAL,wBAAWC,iBAAX,EAAW,eAAX,EAAwB;SAAxB;;;AACE,UAAIK,WAAW,GAAG,KAAlB;AACA,UAAIC,CAAC,GAAG,CAAR;;;AACA,aAAoB,uBAAKL,UAAL,GAAeC,cAAnC,EAAmC,QAAnC,EAAmCA,cAAnC,EAAqC;AAAhC,cAAMC,KAAK,WAAX;;AACH,cAAIA,KAAJ,EAAW;AACT,gBAAIA,KAAK,CAACI,aAAV,EAAyB;AACvB,kBAAIF,WAAJ,EAAiB;AACf,uBAAO,KAAP;AACD;;AACDA,yBAAW,GAAG,IAAd;AACA,mBAAKG,KAAL,GAAaF,CAAb;AACD,aAND,MAMO,IAAI,CAACH,KAAK,CAACC,WAAX,EAAwB;AAC7B,qBAAO,KAAP;AACD;AACF;;AACDE,WAAC;AACF;;;;;;;;;;;;;AACD,aAAOD,WAAP;AACD,KAlBuB;qBAAA;;AAAA,GAAxB;;AAuBOL,2BAAP;AACE,QAAI,CAAC,KAAKO,aAAN,IAAuB,KAAKC,KAAL,IAAc,IAAzC,EAA+C;AAC7C,aAAO,IAAP;AACD;;AACD,WAAO,KAAKP,UAAL,CAAgB,KAAKO,KAArB,CAAP;AACD,GALM;;AAUAR,6BAAP;AACE,QAAI,CAAC,KAAKO,aAAN,IAAuB,KAAKC,KAAL,IAAc,IAAzC,EAA+C;AAC7C,aAAO,IAAP;AACD;;AACD,WAAO,KAAKP,UAAL,CAAgB,KAAKO,KAArB,EAA4BC,MAA5B,EAAP;AACD,GALM;;AAUAT,qCAAP;;;AACE,QAAIU,CAAC,GAAG,CAAR;;;AACA,WAAoB,uBAAKT,UAAL,GAAeC,cAAnC,EAAmC,QAAnC,EAAmCA,cAAnC,EAAqC;AAAhC,YAAMC,KAAK,WAAX;;AACH,YAAIA,KAAK,IAAI,CAACA,KAAK,CAACC,WAApB,EAAiC;AAC/BM,WAAC;AACF;AACF;;;;;;;;;;;;;AACD,WAAOA,CAAP;AACD,GARM;;AAaAV,oCAAP;;;;AACE,WAAoB,uBAAKC,UAAL,GAAeC,cAAnC,EAAmC,QAAnC,EAAmCA,cAAnC,EAAqC;AAAhC,YAAMC,KAAK,WAAX;;AACH,YAAIA,KAAK,IAAI,CAACA,KAAK,CAACC,WAApB,EAAiC;AAC/B,iBAAOD,KAAP;AACD;AACF;;;;;;;;;;;;;AACD,WAAO,IAAP;AACD,GAPM;;AAYAH,mCAAP;AACE,QAAIM,CAAC,GAAG,KAAKL,UAAL,CAAgBU,MAAxB;;AACA,WAAO,EAAEL,CAAF,IAAO,CAAd,EAAiB;AACf,UAAIH,KAAK,GAAG,KAAKF,UAAL,CAAgBK,CAAhB,CAAZ;;AACA,UAAIH,KAAK,IAAI,CAACA,KAAK,CAACC,WAApB,EAAiC;AAC/B,eAAOD,KAAP;AACD;AACF;;AACD,WAAO,IAAP;AACD,GATM;;AAcAH,kCAAP,UAAmBY,IAAnB,EAAgC;;;AAC9B,QAAI,KAAKC,WAAL,CAAiB,MAAjB,KAA4B,IAA5B,IAAoC,KAAKA,WAAL,CAAiB,OAAjB,KAA6B,IAArE,EAA2E;AAQzE,WAAKC,YAAL,CAAkBF,IAAlB;AACAA,UAAI,GAAG,IAAP;;;AACA,aAAoB,uBAAKX,UAAL,GAAec,cAAnC,EAAmC,QAAnC,EAAmCA,cAAnC,EAAqC;AAAhC,cAAMZ,KAAK,WAAX;AACHS,cAAI,GAAGT,KAAK,CAACa,WAAN,CAAkBJ,IAAlB,CAAP;AACD;;;;;;;;;;;;;AACD,UAAI,KAAKK,QAAL,IAAiB,IAArB,EAA2B;AACzB,aAAKA,QAAL,GAAgBC,sBAASC,KAAzB;AACD;AACF,KAhBD,MAgBO;;AAIL,aAAoB,uBAAKlB,UAAL,GAAemB,cAAnC,EAAmC,QAAnC,EAAmCA,cAAnC,EAAqC;AAAhC,cAAMjB,KAAK,WAAX;AACHS,cAAI,GAAGT,KAAK,CAACa,WAAN,CAAkBJ,IAAlB,CAAP;AACD;;;;;;;;;;;;;AACD,UAAI,KAAKX,UAAL,CAAgB,CAAhB,CAAJ,EAAwB;AACtB,aAAKoB,cAAL,CAAoB,KAAKpB,UAAL,CAAgB,CAAhB,CAApB;AACD;AACF;;AACD,WAAOW,IAAP;AACD,GA7BM;;AAtHOZ,qBAAQsB,aACjBJ,6BAAgBK,QADC,CAAR;AAqJhB;AAAC,CA1JD,CAA6BL,4BAA7B;;AAAaM;;AAkKb;AAAqC3B;;AAArC;;AAmCC;;AAzBCE,wBAAW0B,yBAAX,EAAW,MAAX,EAAe;SAAf;AACE,aAAO,cAAP;AACD,KAFc;qBAAA;;AAAA,GAAf;AAOA1B,wBAAW0B,yBAAX,EAAW,YAAX,EAAqB;SAArB;AACE,aAAO,IAAP;AACD,KAFoB;qBAAA;;AAAA,GAArB;AAOA1B,wBAAW0B,yBAAX,EAAW,WAAX,EAAoB;SAApB;AACE,aAAO,IAAP;AACD,KAFmB;qBAAA;;AAAA,GAApB;;AAOOA,uCAAP;AACE,WAAO,MAAM,KAAKxB,UAAL,CAAgByB,IAAhB,CAAqB,GAArB,CAAN,GAAkC,GAAzC;AACD,GAFM;;AA1BOD,6BAAyBzB,OAAO,CAACuB,QAAjC;AA8BhB;AAAC,CAnCD,CAAqCvB,OAArC;;AAAawB","names":["__extends","_this","Object","MmlMrow","childNodes","_c","child","isSpacelike","embellished","i","isEmbellished","_core","coreMO","n","length","prev","getProperty","getPrevClass","_d","setTeXclass","texClass","MmlNode_js_1","INNER","_f","updateTeXclass","__assign","defaults","exports","MmlInferredMrow","join"],"sources":["/home/kinzoku99/Desktop/ProjectIO/frontend/node_modules/mathjax-full/ts/core/MmlTree/MmlNodes/mrow.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the MmlMrow node\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {PropertyList} from '../../Tree/Node.js';\nimport {MmlNode, AbstractMmlNode, TEXCLASS} from '../MmlNode.js';\n\n/*****************************************************************/\n/**\n *  Implements the MmlMrow node class (subclass of AbstractMmlNode)\n */\n\nexport class MmlMrow extends AbstractMmlNode {\n\n  /**\n   * @override\n   */\n  public static defaults: PropertyList = {\n    ...AbstractMmlNode.defaults\n  };\n\n  /**\n   * The index of the core child, when acting as an embellish mrow\n   */\n  protected _core: number = null;\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'mrow';\n  }\n\n  /**\n   * An mrow is space-like if all its children are.\n   *\n   * @override\n   */\n  public get isSpacelike() {\n    for (const child of this.childNodes) {\n      if (!child.isSpacelike) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * An mrow is embellished if it contains one embellished operator\n   * and any number of space-like nodes\n   *\n   * @override\n   */\n  public get isEmbellished() {\n    let embellished = false;\n    let i = 0;\n    for (const child of this.childNodes) {\n      if (child) {\n        if (child.isEmbellished) {\n          if (embellished) {\n            return false;\n          }\n          embellished = true;\n          this._core = i;\n        } else if (!child.isSpacelike) {\n          return false;\n        }\n      }\n      i++;\n    }\n    return embellished;\n  }\n\n  /**\n   * @override\n   */\n  public core(): MmlNode {\n    if (!this.isEmbellished || this._core == null) {\n      return this;\n    }\n    return this.childNodes[this._core];\n  }\n\n  /**\n   * @override\n   */\n  public coreMO(): MmlNode {\n    if (!this.isEmbellished || this._core == null) {\n      return this;\n    }\n    return this.childNodes[this._core].coreMO();\n  }\n\n  /**\n   * @return {number}  The number of non-spacelike child nodes\n   */\n  public nonSpaceLength(): number {\n    let n = 0;\n    for (const child of this.childNodes) {\n      if (child && !child.isSpacelike) {\n        n++;\n      }\n    }\n    return n;\n  }\n\n  /**\n   * @return {MmlNode|null}  The first non-space-like child node\n   */\n  public firstNonSpace(): MmlNode | null {\n    for (const child of this.childNodes) {\n      if (child && !child.isSpacelike) {\n        return child;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @return {MmlNode|null}  The last non-space-like child node\n   */\n  public lastNonSpace(): MmlNode | null {\n    let i = this.childNodes.length;\n    while (--i >= 0) {\n      let child = this.childNodes[i];\n      if (child && !child.isSpacelike) {\n        return child;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @override\n   */\n  public setTeXclass(prev: MmlNode) {\n    if (this.getProperty('open') != null || this.getProperty('close') != null) {\n      //\n      // <mrow> looks like it came from \\left...\\right\n      //   so treat as subexpression (TeX class INNER).\n      // Use prev = null for the initial element in the\n      //   delimiters, since there is nothing previous to\n      //   it in what would be the TeX math list.\n      //\n      this.getPrevClass(prev);\n      prev = null;\n      for (const child of this.childNodes) {\n        prev = child.setTeXclass(prev);\n      }\n      if (this.texClass == null) {\n        this.texClass = TEXCLASS.INNER;\n      }\n    } else {\n      //\n      //  Normal <mrow>, so treat as though mrow is not there\n      //\n      for (const child of this.childNodes) {\n        prev = child.setTeXclass(prev);\n      }\n      if (this.childNodes[0]) {\n        this.updateTeXclass(this.childNodes[0]);\n      }\n    }\n    return prev;\n  }\n\n}\n\n\n/*****************************************************************/\n/**\n *  Implements the MmlInferredMrow node class (subclass of MmlMrow)\n */\n\nexport class MmlInferredMrow extends MmlMrow {\n\n  /**\n   * @override\n   */\n  public static defaults: PropertyList = MmlMrow.defaults;\n\n  /**\n   * @return {string}  The inferred-mrow kind\n   */\n  public get kind(): string {\n    return 'inferredMrow';\n  }\n\n  /**\n   * @return {boolean}  This is inferred\n   */\n  public get isInferred(): boolean {\n    return true;\n  }\n\n  /**\n   * @override\n   */\n  public get notParent() {\n    return true;\n  }\n\n  /**\n   * Show the child nodes in brackets\n   */\n  public toString() {\n    return '[' + this.childNodes.join(',') + ']';\n  }\n\n}\n"]},"metadata":{},"sourceType":"script"}