{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n  return to;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BitFieldClass = exports.BitField = void 0;\n\nvar BitField = function () {\n  function BitField() {\n    this.bits = 0;\n  }\n\n  BitField.allocate = function () {\n    var e_1, _a;\n\n    var names = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      names[_i] = arguments[_i];\n    }\n\n    try {\n      for (var names_1 = __values(names), names_1_1 = names_1.next(); !names_1_1.done; names_1_1 = names_1.next()) {\n        var name_1 = names_1_1.value;\n\n        if (this.has(name_1)) {\n          throw new Error('Bit already allocated for ' + name_1);\n        }\n\n        if (this.next === BitField.MAXBIT) {\n          throw new Error('Maximum number of bits already allocated');\n        }\n\n        this.names.set(name_1, this.next);\n        this.next <<= 1;\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (names_1_1 && !names_1_1.done && (_a = names_1.return)) _a.call(names_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n\n  BitField.has = function (name) {\n    return this.names.has(name);\n  };\n\n  BitField.prototype.set = function (name) {\n    this.bits |= this.getBit(name);\n  };\n\n  BitField.prototype.clear = function (name) {\n    this.bits &= ~this.getBit(name);\n  };\n\n  BitField.prototype.isSet = function (name) {\n    return !!(this.bits & this.getBit(name));\n  };\n\n  BitField.prototype.reset = function () {\n    this.bits = 0;\n  };\n\n  BitField.prototype.getBit = function (name) {\n    var bit = this.constructor.names.get(name);\n\n    if (!bit) {\n      throw new Error('Unknown bit-field name: ' + name);\n    }\n\n    return bit;\n  };\n\n  BitField.MAXBIT = 1 << 31;\n  BitField.next = 1;\n  BitField.names = new Map();\n  return BitField;\n}();\n\nexports.BitField = BitField;\n\nfunction BitFieldClass() {\n  var names = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    names[_i] = arguments[_i];\n  }\n\n  var Bits = function (_super) {\n    __extends(Bits, _super);\n\n    function Bits() {\n      return _super !== null && _super.apply(this, arguments) || this;\n    }\n\n    return Bits;\n  }(BitField);\n\n  Bits.allocate.apply(Bits, __spreadArray([], __read(names)));\n  return Bits;\n}\n\nexports.BitFieldClass = BitFieldClass;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA;AAAA;AAoBY,gBAAe,CAAf;AAmEX;;AA9DeA,sBAAd;;;AAAuB;;SAAA,yCAAkB;AAAlBC;;;;AACrB,WAAmB,+BAAKC,0BAAxB,EAAwB,eAAxB,EAAwBA,0BAAxB,EAA0B;AAArB,YAAMC,MAAI,kBAAV;;AACH,YAAI,KAAKC,GAAL,CAASD,MAAT,CAAJ,EAAoB;AAClB,gBAAM,IAAIE,KAAJ,CAAU,+BAA+BF,MAAzC,CAAN;AACD;;AACD,YAAI,KAAKG,IAAL,KAAcN,QAAQ,CAACO,MAA3B,EAAmC;AACjC,gBAAM,IAAIF,KAAJ,CAAU,0CAAV,CAAN;AACD;;AACD,aAAKJ,KAAL,CAAWO,GAAX,CAAeL,MAAf,EAAqB,KAAKG,IAA1B;AACA,aAAKA,IAAL,KAAc,CAAd;AACD;;;;;;;;;;;;AACF,GAXa;;AAiBAN,iBAAd,UAAkBS,IAAlB,EAA8B;AAC5B,WAAO,KAAKR,KAAL,CAAWG,GAAX,CAAeK,IAAf,CAAP;AACD,GAFa;;AAOPT,2BAAP,UAAWS,IAAX,EAAuB;AACrB,SAAKC,IAAL,IAAa,KAAKC,MAAL,CAAYF,IAAZ,CAAb;AACD,GAFM;;AAOAT,6BAAP,UAAaS,IAAb,EAAyB;AACvB,SAAKC,IAAL,IAAa,CAAC,KAAKC,MAAL,CAAYF,IAAZ,CAAd;AACD,GAFM;;AAQAT,6BAAP,UAAaS,IAAb,EAAyB;AACvB,WAAO,CAAC,EAAE,KAAKC,IAAL,GAAY,KAAKC,MAAL,CAAYF,IAAZ,CAAd,CAAR;AACD,GAFM;;AAOAT,6BAAP;AACE,SAAKU,IAAL,GAAY,CAAZ;AACD,GAFM;;AAQGV,8BAAV,UAAiBS,IAAjB,EAA6B;AAC3B,QAAMG,GAAG,GAAI,KAAKC,WAAL,CAAqCZ,KAArC,CAA2Ca,GAA3C,CAA+CL,IAA/C,CAAb;;AACA,QAAI,CAACG,GAAL,EAAU;AACR,YAAM,IAAIP,KAAJ,CAAU,6BAA6BI,IAAvC,CAAN;AACD;;AACD,WAAOG,GAAP;AACD,GANS;;AA1EOZ,oBAAS,KAAK,EAAd;AAKAA,kBAAe,CAAf;AAKAA,mBAA6B,IAAIe,GAAJ,EAA7B;AAwEnB;AAvFA;;AAAaC;;AA6Fb,SAAgBC,aAAhB,GAA6B;AAAC;;OAAA,yCAAkB;AAAlBhB;;;AAC5B,MAAMiB,IAAI;AAAiBC;;AAAd;;AAAyB;;AAAD;AAAC,GAA5B,CAAiBnB,QAAjB,CAAV;;AACAkB,MAAI,CAACE,QAAL,CAAaC,KAAb,OAAIC,yBAAarB,KAAb,EAAJ;AACA,SAAOiB,IAAP;AACD;;AAJDF","names":["BitField","names","names_1_1","name_1","has","Error","next","MAXBIT","set","name","bits","getBit","bit","constructor","get","Map","exports","BitFieldClass","Bits","__extends","allocate","apply","__spreadArray"],"sources":["/home/kinzoku99/Desktop/ProjectIO/frontend/node_modules/mathjax-full/ts/util/BitField.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2018-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements bit-fields with extendable field names\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nexport class BitField {\n\n  /**\n   * The largest bit available\n   */\n  protected static MAXBIT = 1 << 31;\n\n  /**\n   * The next bit to be allocated\n   */\n  protected static next: number = 1;\n\n  /**\n   * The map of names to bit positions\n   */\n  protected static names: Map<string, number> = new Map();\n\n  /**\n   * The bits that are set\n   */\n  protected bits: number = 0;\n\n  /**\n   * @param {string} names    The names of the bit positions to reserve\n   */\n  public static allocate(...names: string[]) {\n    for (const name of names) {\n      if (this.has(name)) {\n        throw new Error('Bit already allocated for ' + name);\n      }\n      if (this.next === BitField.MAXBIT) {\n        throw new Error('Maximum number of bits already allocated');\n      }\n      this.names.set(name, this.next);\n      this.next <<= 1;\n    }\n  }\n\n  /**\n   * @param {string} name   The name of the bit to check for being defined\n   * @return {boolean}      True if the named bit is already allocated\n   */\n  public static has(name: string): boolean {\n    return this.names.has(name);\n  }\n\n  /**\n   * @param {string} name    The name of the bit position to set\n   */\n  public set(name: string) {\n    this.bits |= this.getBit(name);\n  }\n\n  /**\n   * @param {string} name    The name of the bit position to clear\n   */\n  public clear(name: string) {\n    this.bits &= ~this.getBit(name);\n  }\n\n  /**\n   * @param {string} name   The name of the bit to check if set\n   * @return {boolean}      True if the named bit is set\n   */\n  public isSet(name: string): boolean {\n    return !!(this.bits & this.getBit(name));\n  }\n\n  /**\n   * Clear all bits\n   */\n  public reset() {\n    this.bits = 0;\n  }\n\n  /**\n   * @param {string} name   The name whose bit position is needed (error if not defined)\n   * @return {number}       The position of the named bit\n   */\n  protected getBit(name: string): number {\n    const bit = (this.constructor as typeof BitField).names.get(name);\n    if (!bit) {\n      throw new Error('Unknown bit-field name: ' + name);\n    }\n    return bit;\n  }\n\n}\n\n/**\n * @param {string[]} names    The name of the positions to allocate initially\n * @return {typeof AbstractBitField}  The bit-field class with names allocated\n */\nexport function BitFieldClass(...names: string[]): typeof BitField {\n  const Bits = class extends BitField {};\n  Bits.allocate(...names);\n  return Bits;\n}\n"]},"metadata":{},"sourceType":"script"}