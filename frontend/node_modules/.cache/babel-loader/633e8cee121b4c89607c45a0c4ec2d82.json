{"ast":null,"code":"\"use strict\";\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Attributes = exports.INHERIT = void 0;\nexports.INHERIT = '_inherit_';\n\nvar Attributes = function () {\n  function Attributes(defaults, global) {\n    this.global = global;\n    this.defaults = Object.create(global);\n    this.inherited = Object.create(this.defaults);\n    this.attributes = Object.create(this.inherited);\n    Object.assign(this.defaults, defaults);\n  }\n\n  Attributes.prototype.set = function (name, value) {\n    this.attributes[name] = value;\n  };\n\n  Attributes.prototype.setList = function (list) {\n    Object.assign(this.attributes, list);\n  };\n\n  Attributes.prototype.get = function (name) {\n    var value = this.attributes[name];\n\n    if (value === exports.INHERIT) {\n      value = this.global[name];\n    }\n\n    return value;\n  };\n\n  Attributes.prototype.getExplicit = function (name) {\n    if (!this.attributes.hasOwnProperty(name)) {\n      return undefined;\n    }\n\n    return this.attributes[name];\n  };\n\n  Attributes.prototype.getList = function () {\n    var e_1, _a;\n\n    var names = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      names[_i] = arguments[_i];\n    }\n\n    var values = {};\n\n    try {\n      for (var names_1 = __values(names), names_1_1 = names_1.next(); !names_1_1.done; names_1_1 = names_1.next()) {\n        var name_1 = names_1_1.value;\n        values[name_1] = this.get(name_1);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (names_1_1 && !names_1_1.done && (_a = names_1.return)) _a.call(names_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    return values;\n  };\n\n  Attributes.prototype.setInherited = function (name, value) {\n    this.inherited[name] = value;\n  };\n\n  Attributes.prototype.getInherited = function (name) {\n    return this.inherited[name];\n  };\n\n  Attributes.prototype.getDefault = function (name) {\n    return this.defaults[name];\n  };\n\n  Attributes.prototype.isSet = function (name) {\n    return this.attributes.hasOwnProperty(name) || this.inherited.hasOwnProperty(name);\n  };\n\n  Attributes.prototype.hasDefault = function (name) {\n    return name in this.defaults;\n  };\n\n  Attributes.prototype.getExplicitNames = function () {\n    return Object.keys(this.attributes);\n  };\n\n  Attributes.prototype.getInheritedNames = function () {\n    return Object.keys(this.inherited);\n  };\n\n  Attributes.prototype.getDefaultNames = function () {\n    return Object.keys(this.defaults);\n  };\n\n  Attributes.prototype.getGlobalNames = function () {\n    return Object.keys(this.global);\n  };\n\n  Attributes.prototype.getAllAttributes = function () {\n    return this.attributes;\n  };\n\n  Attributes.prototype.getAllInherited = function () {\n    return this.inherited;\n  };\n\n  Attributes.prototype.getAllDefaults = function () {\n    return this.defaults;\n  };\n\n  Attributes.prototype.getAllGlobals = function () {\n    return this.global;\n  };\n\n  return Attributes;\n}();\n\nexports.Attributes = Attributes;","map":{"version":3,"mappings":"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","names":["exports","defaults","global","Object","create","inherited","attributes","assign","Attributes","name","value","list","hasOwnProperty","undefined","names","values","names_1_1","name_1","get","keys"],"sources":["/home/kinzoku99/Desktop/ProjectIO/frontend/node_modules/mathjax-full/ts/core/MmlTree/Attributes.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview Implements Attribute class for MmlNodes\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {PropertyList, Property} from '../Tree/Node.js';\n\n/**\n * A constant for when a property should be inherited from the global defaults lists\n */\nexport const INHERIT = '_inherit_';\n\n/******************************************************************/\n/**\n * Implements the Attributes class for MmlNodes\n *  (These can be set explicitly, inherited from parent nodes,\n *   taken from a default list of values, or taken from global\n *   defaults.)\n */\n\nexport class Attributes {\n  /**\n   * The attributes explicitly set on a node\n   */\n  protected attributes: PropertyList;\n  /**\n   * The attributes inherited from parent nodes\n   */\n  protected inherited: PropertyList;\n  /**\n   * The default attributes for the node type\n   */\n  protected defaults: PropertyList;\n  /**\n   * Global attributes from the math node itself\n   */\n  protected global: PropertyList;\n\n  /**\n   * @param {PropertyList} defaults  The defaults for this node type\n   * @param {PropertyList} global    The global properties (from the math node)\n   *\n   * @constructor\n   */\n  constructor(defaults: PropertyList, global: PropertyList) {\n    this.global = global;\n    this.defaults = Object.create(global);\n    this.inherited = Object.create(this.defaults);\n    this.attributes = Object.create(this.inherited);\n    Object.assign(this.defaults, defaults);\n  }\n\n  /**\n   * @param {string} name     The name of the attribute to set\n   * @param {Property} value  The value to give the named attribute\n   */\n  public set(name: string, value: Property) {\n    this.attributes[name] = value;\n  }\n\n  /**\n   * @param {PropertyList} list  An object containing the properties to set\n   */\n  public setList(list: PropertyList) {\n    Object.assign(this.attributes, list);\n  }\n\n  /**\n   * @param {string} name  The name of the attribute whose value is to be returned\n   * @return {Property}    The value of the named attribute (including inheritance and defaults)\n   */\n  public get(name: string): Property {\n    let value = this.attributes[name];\n    if (value === INHERIT) {\n      value = this.global[name];\n    }\n    return value;\n  }\n\n  /**\n   * @param {string} name  The value of the attribute whose value is to be returned\n   * @return {Property}    The attribute whose name was given if it is explicit on the\n   *                       node (not inherited or defaulted), null otherwise\n   */\n  public getExplicit(name: string): Property {\n    if (!this.attributes.hasOwnProperty(name)) {\n      return undefined;\n    }\n    return this.attributes[name];\n  }\n\n  /**\n   * @param {string[]} names  The names of attributes whose values are to be returned\n   * @return {PropertyList}   An object containing the attributes and their values\n   */\n  public getList(...names: string[]): PropertyList {\n    let values: PropertyList = {};\n    for (const name of names) {\n      values[name] = this.get(name);\n    }\n    return values;\n  }\n\n  /**\n   * @param {string} name  The name of an inherited attribute to be set\n   * @param {Property} value  The value to assign to the named attribute\n   */\n  public setInherited(name: string, value: Property) {\n    this.inherited[name] = value;\n  }\n\n  /**\n   * @param {string} name  The name of an inherited attribute whose value is to be returned\n   * @return {Property}    The value of the named attribute if it is inherited, null otherwise\n   */\n  public getInherited(name: string): Property {\n    return this.inherited[name];\n  }\n\n  /**\n   * @param {string} name  The name of a default attribute whose value is to be returned\n   * @return {Property}    The value of the named attribute if a default exists for it, null otherwise\n   */\n  public getDefault(name: string): Property {\n    return this.defaults[name];\n  }\n\n  /**\n   * @param {string} name  The name of a attribute to check\n   * @return {boolean}     True if attribute is set explicitly or inherited\n   *                         from an explicit mstyle or math attribute\n   */\n  public isSet(name: string): boolean {\n    return this.attributes.hasOwnProperty(name) || this.inherited.hasOwnProperty(name);\n  }\n\n  /**\n   * @param {string} name  The name of an attribute to test for the existence of a default\n   * @return {boolean}     True of there is a default for the named attribute, false otherwise\n   */\n  public hasDefault(name: string): boolean {\n    return (name in this.defaults);\n  }\n\n  /**\n   * @return {string[]}  The names of all the attributes explicitly set on the node\n   */\n  public getExplicitNames(): string[] {\n    return Object.keys(this.attributes);\n  }\n\n  /**\n   * @return {string[]}  The names of all the inherited attributes for the node\n   */\n  public getInheritedNames(): string[] {\n    return Object.keys(this.inherited);\n  }\n\n  /**\n   * @return {string[]}  The names of all the default attributes for the node\n   */\n  public getDefaultNames(): string[] {\n    return Object.keys(this.defaults);\n  }\n\n  /**\n   * @return {string[]}  The names of all the global attributes\n   */\n  public getGlobalNames(): string[] {\n    return Object.keys(this.global);\n  }\n\n  /**\n   * @return {PropertyList}  The attribute object\n   */\n  public getAllAttributes(): PropertyList {\n    return this.attributes;\n  }\n\n  /**\n   * @return {PropertyList}  The inherited object\n   */\n  public getAllInherited(): PropertyList {\n    return this.inherited;\n  }\n\n  /**\n   * @return {PropertyList}  The defaults object\n   */\n  public getAllDefaults(): PropertyList {\n    return this.defaults;\n  }\n\n  /**\n   * @return {PropertyList}  The global object\n   */\n  public getAllGlobals(): PropertyList {\n    return this.global;\n  }\n\n}\n"]},"metadata":{},"sourceType":"script"}