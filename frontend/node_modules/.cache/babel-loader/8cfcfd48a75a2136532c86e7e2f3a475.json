{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TeXFont = void 0;\n\nvar FontData_js_1 = require(\"../FontData.js\");\n\nvar tex_js_1 = require(\"../../common/fonts/tex.js\");\n\nvar bold_italic_js_1 = require(\"./tex/bold-italic.js\");\n\nvar bold_js_1 = require(\"./tex/bold.js\");\n\nvar double_struck_js_1 = require(\"./tex/double-struck.js\");\n\nvar fraktur_bold_js_1 = require(\"./tex/fraktur-bold.js\");\n\nvar fraktur_js_1 = require(\"./tex/fraktur.js\");\n\nvar italic_js_1 = require(\"./tex/italic.js\");\n\nvar largeop_js_1 = require(\"./tex/largeop.js\");\n\nvar monospace_js_1 = require(\"./tex/monospace.js\");\n\nvar normal_js_1 = require(\"./tex/normal.js\");\n\nvar sans_serif_bold_italic_js_1 = require(\"./tex/sans-serif-bold-italic.js\");\n\nvar sans_serif_bold_js_1 = require(\"./tex/sans-serif-bold.js\");\n\nvar sans_serif_italic_js_1 = require(\"./tex/sans-serif-italic.js\");\n\nvar sans_serif_js_1 = require(\"./tex/sans-serif.js\");\n\nvar script_bold_js_1 = require(\"./tex/script-bold.js\");\n\nvar script_js_1 = require(\"./tex/script.js\");\n\nvar smallop_js_1 = require(\"./tex/smallop.js\");\n\nvar tex_calligraphic_bold_js_1 = require(\"./tex/tex-calligraphic-bold.js\");\n\nvar tex_calligraphic_js_1 = require(\"./tex/tex-calligraphic.js\");\n\nvar tex_mathit_js_1 = require(\"./tex/tex-mathit.js\");\n\nvar tex_oldstyle_bold_js_1 = require(\"./tex/tex-oldstyle-bold.js\");\n\nvar tex_oldstyle_js_1 = require(\"./tex/tex-oldstyle.js\");\n\nvar tex_size3_js_1 = require(\"./tex/tex-size3.js\");\n\nvar tex_size4_js_1 = require(\"./tex/tex-size4.js\");\n\nvar tex_variant_js_1 = require(\"./tex/tex-variant.js\");\n\nvar delimiters_js_1 = require(\"../../common/fonts/tex/delimiters.js\");\n\nvar TeXFont = function (_super) {\n  __extends(TeXFont, _super);\n\n  function TeXFont(options) {\n    var e_1, _a;\n\n    if (options === void 0) {\n      options = null;\n    }\n\n    var _this = _super.call(this, options) || this;\n\n    var CLASS = _this.constructor;\n\n    try {\n      for (var _b = __values(Object.keys(CLASS.variantCacheIds)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var variant = _c.value;\n        _this.variant[variant].cacheID = 'TEX-' + CLASS.variantCacheIds[variant];\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    return _this;\n  }\n\n  TeXFont.defaultDelimiters = delimiters_js_1.delimiters;\n  TeXFont.defaultChars = {\n    'normal': normal_js_1.normal,\n    'bold': bold_js_1.bold,\n    'italic': italic_js_1.italic,\n    'bold-italic': bold_italic_js_1.boldItalic,\n    'double-struck': double_struck_js_1.doubleStruck,\n    'fraktur': fraktur_js_1.fraktur,\n    'bold-fraktur': fraktur_bold_js_1.frakturBold,\n    'script': script_js_1.script,\n    'bold-script': script_bold_js_1.scriptBold,\n    'sans-serif': sans_serif_js_1.sansSerif,\n    'bold-sans-serif': sans_serif_bold_js_1.sansSerifBold,\n    'sans-serif-italic': sans_serif_italic_js_1.sansSerifItalic,\n    'sans-serif-bold-italic': sans_serif_bold_italic_js_1.sansSerifBoldItalic,\n    'monospace': monospace_js_1.monospace,\n    '-smallop': smallop_js_1.smallop,\n    '-largeop': largeop_js_1.largeop,\n    '-size3': tex_size3_js_1.texSize3,\n    '-size4': tex_size4_js_1.texSize4,\n    '-tex-calligraphic': tex_calligraphic_js_1.texCalligraphic,\n    '-tex-bold-calligraphic': tex_calligraphic_bold_js_1.texCalligraphicBold,\n    '-tex-mathit': tex_mathit_js_1.texMathit,\n    '-tex-oldstyle': tex_oldstyle_js_1.texOldstyle,\n    '-tex-bold-oldstyle': tex_oldstyle_bold_js_1.texOldstyleBold,\n    '-tex-variant': tex_variant_js_1.texVariant\n  };\n  TeXFont.variantCacheIds = {\n    'normal': 'N',\n    'bold': 'B',\n    'italic': 'I',\n    'bold-italic': 'BI',\n    'double-struck': 'D',\n    'fraktur': 'F',\n    'bold-fraktur': 'BF',\n    'script': 'S',\n    'bold-script': 'BS',\n    'sans-serif': 'SS',\n    'bold-sans-serif': 'BSS',\n    'sans-serif-italic': 'SSI',\n    'sans-serif-bold-italic': 'SSBI',\n    'monospace': 'M',\n    '-smallop': 'SO',\n    '-largeop': 'LO',\n    '-size3': 'S3',\n    '-size4': 'S4',\n    '-tex-calligraphic': 'C',\n    '-tex-bold-calligraphic': 'BC',\n    '-tex-mathit': 'MI',\n    '-tex-oldstyle': 'OS',\n    '-tex-bold-oldstyle': 'BOS',\n    '-tex-variant': 'V'\n  };\n  return TeXFont;\n}(tex_js_1.CommonTeXFontMixin(FontData_js_1.SVGFontData));\n\nexports.TeXFont = TeXFont;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;AAEA;;AAGA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AAMA;AACAA;;AAsEE,mBAAYC,OAAZ,EAAsC;;;AAA1B;AAAAA;AAA0B;;AAAtC,gBACEC,kBAAMD,OAAN,KAAc,IADhB;;AAKE,QAAME,KAAK,GAAGC,KAAI,CAACC,WAAnB;;;AACA,WAAsB,wBAAM,CAACC,IAAP,CAAYH,KAAK,CAACI,eAAlB,IAAkCC,cAAxD,EAAwD,QAAxD,EAAwDA,cAAxD,EAA0D;AAArD,YAAMC,OAAO,WAAb;AACHL,aAAI,CAACK,OAAL,CAAaA,OAAb,EAAsBC,OAAtB,GAAgC,SAASP,KAAK,CAACI,eAAN,CAAsBE,OAAtB,CAAzC;AACD;;;;;;;;;;;;;;AACF;;AA1EgBE,8BAAoDC,0BAApD;AAKAD,yBAA2C;AAC1D,cAAUE,kBADgD;AAE1D,YAAQC,cAFkD;AAG1D,cAAUC,kBAHgD;AAI1D,mBAAeC,2BAJ2C;AAK1D,qBAAiBC,+BALyC;AAM1D,eAAWC,oBAN+C;AAO1D,oBAAgBC,6BAP0C;AAQ1D,cAAUC,kBARgD;AAS1D,mBAAeC,2BAT2C;AAU1D,kBAAcC,yBAV4C;AAW1D,uBAAmBC,kCAXuC;AAY1D,yBAAqBC,sCAZqC;AAa1D,8BAA0BC,+CAbgC;AAc1D,iBAAaC,wBAd6C;AAe1D,gBAAYC,oBAf8C;AAgB1D,gBAAYC,oBAhB8C;AAiB1D,cAAUC,uBAjBgD;AAkB1D,cAAUC,uBAlBgD;AAmB1D,yBAAqBC,qCAnBqC;AAoB1D,8BAA0BC,8CApBgC;AAqB1D,mBAAeC,yBArB2C;AAsB1D,qBAAiBC,6BAtByC;AAuB1D,0BAAsBC,sCAvBoC;AAwB1D,oBAAgBC;AAxB0C,GAA3C;AA8BAzB,4BAA4C;AAC3D,cAAU,GADiD;AAE3D,YAAQ,GAFmD;AAG3D,cAAU,GAHiD;AAI3D,mBAAe,IAJ4C;AAK3D,qBAAiB,GAL0C;AAM3D,eAAW,GANgD;AAO3D,oBAAgB,IAP2C;AAQ3D,cAAU,GARiD;AAS3D,mBAAe,IAT4C;AAU3D,kBAAc,IAV6C;AAW3D,uBAAmB,KAXwC;AAY3D,yBAAqB,KAZsC;AAa3D,8BAA0B,MAbiC;AAc3D,iBAAa,GAd8C;AAe3D,gBAAY,IAf+C;AAgB3D,gBAAY,IAhB+C;AAiB3D,cAAU,IAjBiD;AAkB3D,cAAU,IAlBiD;AAmB3D,yBAAqB,GAnBsC;AAoB3D,8BAA0B,IApBiC;AAqB3D,mBAAe,IArB4C;AAsB3D,qBAAiB,IAtB0C;AAuB3D,0BAAsB,KAvBqC;AAwB3D,oBAAgB;AAxB2C,GAA5C;AAyCnB;AAlFA,EACA0B,4BAAuFC,yBAAvF,CADA;;AAAaC","names":["__extends","options","_super","CLASS","_this","constructor","keys","variantCacheIds","_c","variant","cacheID","TeXFont","delimiters_js_1","normal_js_1","bold_js_1","italic_js_1","bold_italic_js_1","double_struck_js_1","fraktur_js_1","fraktur_bold_js_1","script_js_1","script_bold_js_1","sans_serif_js_1","sans_serif_bold_js_1","sans_serif_italic_js_1","sans_serif_bold_italic_js_1","monospace_js_1","smallop_js_1","largeop_js_1","tex_size3_js_1","tex_size4_js_1","tex_calligraphic_js_1","tex_calligraphic_bold_js_1","tex_mathit_js_1","tex_oldstyle_js_1","tex_oldstyle_bold_js_1","tex_variant_js_1","tex_js_1","FontData_js_1","exports"],"sources":["/home/kinzoku99/Desktop/ProjectIO/frontend/node_modules/mathjax-full/ts/output/svg/fonts/tex.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  The MathJax TeXFont object\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {SVGFontData, SVGFontDataClass, SVGCharOptions, SVGVariantData, SVGDelimiterData,\n        DelimiterMap, CharMapMap} from '../FontData.js';\nimport {CommonTeXFontMixin} from '../../common/fonts/tex.js';\nimport {OptionList} from '../../../util/Options.js';\n\nimport {boldItalic} from './tex/bold-italic.js';\nimport {bold} from './tex/bold.js';\nimport {doubleStruck} from './tex/double-struck.js';\nimport {frakturBold} from './tex/fraktur-bold.js';\nimport {fraktur} from './tex/fraktur.js';\nimport {italic} from './tex/italic.js';\nimport {largeop} from './tex/largeop.js';\nimport {monospace} from './tex/monospace.js';\nimport {normal} from './tex/normal.js';\nimport {sansSerifBoldItalic} from './tex/sans-serif-bold-italic.js';\nimport {sansSerifBold} from './tex/sans-serif-bold.js';\nimport {sansSerifItalic} from './tex/sans-serif-italic.js';\nimport {sansSerif} from './tex/sans-serif.js';\nimport {scriptBold} from './tex/script-bold.js';\nimport {script} from './tex/script.js';\nimport {smallop} from './tex/smallop.js';\nimport {texCalligraphicBold} from './tex/tex-calligraphic-bold.js';\nimport {texCalligraphic} from './tex/tex-calligraphic.js';\nimport {texMathit} from './tex/tex-mathit.js';\nimport {texOldstyleBold} from './tex/tex-oldstyle-bold.js';\nimport {texOldstyle} from './tex/tex-oldstyle.js';\nimport {texSize3} from './tex/tex-size3.js';\nimport {texSize4} from './tex/tex-size4.js';\nimport {texVariant} from './tex/tex-variant.js';\n\nimport {delimiters} from '../../common/fonts/tex/delimiters.js';\n\n/***********************************************************************************/\n/**\n *  The TeXFont class\n */\nexport class TeXFont extends\nCommonTeXFontMixin<SVGCharOptions, SVGVariantData, SVGDelimiterData, SVGFontDataClass>(SVGFontData) {\n\n  /**\n   *  The stretchy delimiter data\n   */\n  protected static defaultDelimiters: DelimiterMap<SVGDelimiterData> = delimiters;\n\n  /**\n   *  The character data by variant\n   */\n  protected static defaultChars: CharMapMap<SVGCharOptions> = {\n    'normal': normal,\n    'bold': bold,\n    'italic': italic,\n    'bold-italic': boldItalic,\n    'double-struck': doubleStruck,\n    'fraktur': fraktur,\n    'bold-fraktur': frakturBold,\n    'script': script,\n    'bold-script': scriptBold,\n    'sans-serif': sansSerif,\n    'bold-sans-serif': sansSerifBold,\n    'sans-serif-italic': sansSerifItalic,\n    'sans-serif-bold-italic': sansSerifBoldItalic,\n    'monospace': monospace,\n    '-smallop': smallop,\n    '-largeop': largeop,\n    '-size3': texSize3,\n    '-size4': texSize4,\n    '-tex-calligraphic': texCalligraphic,\n    '-tex-bold-calligraphic': texCalligraphicBold,\n    '-tex-mathit': texMathit,\n    '-tex-oldstyle': texOldstyle,\n    '-tex-bold-oldstyle': texOldstyleBold,\n    '-tex-variant': texVariant\n  };\n\n  /**\n   * The cacheIDs to use for the variants in font-caching\n   */\n  protected static variantCacheIds: {[name: string]: string} = {\n    'normal': 'N',\n    'bold': 'B',\n    'italic': 'I',\n    'bold-italic': 'BI',\n    'double-struck': 'D',\n    'fraktur': 'F',\n    'bold-fraktur': 'BF',\n    'script': 'S',\n    'bold-script': 'BS',\n    'sans-serif': 'SS',\n    'bold-sans-serif': 'BSS',\n    'sans-serif-italic': 'SSI',\n    'sans-serif-bold-italic': 'SSBI',\n    'monospace': 'M',\n    '-smallop': 'SO',\n    '-largeop': 'LO',\n    '-size3': 'S3',\n    '-size4': 'S4',\n    '-tex-calligraphic': 'C',\n    '-tex-bold-calligraphic': 'BC',\n    '-tex-mathit': 'MI',\n    '-tex-oldstyle': 'OS',\n    '-tex-bold-oldstyle': 'BOS',\n    '-tex-variant': 'V'\n  };\n\n  /**\n   * @override\n   */\n  constructor(options: OptionList = null) {\n    super(options);\n    //\n    //  Add the cacheIDs to the variants\n    //\n    const CLASS = this.constructor as typeof TeXFont;\n    for (const variant of Object.keys(CLASS.variantCacheIds)) {\n      this.variant[variant].cacheID = 'TEX-' + CLASS.variantCacheIds[variant];\n    }\n  }\n\n}\n"]},"metadata":{},"sourceType":"script"}