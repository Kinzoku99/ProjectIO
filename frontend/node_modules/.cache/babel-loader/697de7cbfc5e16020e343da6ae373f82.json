{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CommonMnMixin = void 0;\n\nfunction CommonMnMixin(Base) {\n  return function (_super) {\n    __extends(class_1, _super);\n\n    function class_1() {\n      return _super !== null && _super.apply(this, arguments) || this;\n    }\n\n    class_1.prototype.remapChars = function (chars) {\n      if (chars.length) {\n        var text = this.font.getRemappedChar('mn', chars[0]);\n\n        if (text) {\n          var c = this.unicodeChars(text, this.variant);\n\n          if (c.length === 1) {\n            chars[0] = c[0];\n          } else {\n            chars = c.concat(chars.slice(1));\n          }\n        }\n      }\n\n      return chars;\n    };\n\n    return class_1;\n  }(Base);\n}\n\nexports.CommonMnMixin = CommonMnMixin;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA,SAAgBA,aAAhB,CAA4DC,IAA5D,EAAmE;AAEjE;AAAqBC;;AAAd;;AAsBN;;AAjBQC,mCAAP,UAAkBC,KAAlB,EAAiC;AAI/B,UAAIA,KAAK,CAACC,MAAV,EAAkB;AAChB,YAAMC,IAAI,GAAG,KAAKC,IAAL,CAAUC,eAAV,CAA0B,IAA1B,EAAgCJ,KAAK,CAAC,CAAD,CAArC,CAAb;;AACA,YAAIE,IAAJ,EAAU;AACR,cAAMG,CAAC,GAAG,KAAKC,YAAL,CAAkBJ,IAAlB,EAAwB,KAAKK,OAA7B,CAAV;;AACA,cAAIF,CAAC,CAACJ,MAAF,KAAa,CAAjB,EAAoB;AAClBD,iBAAK,CAAC,CAAD,CAAL,GAAWK,CAAC,CAAC,CAAD,CAAZ;AACD,WAFD,MAEO;AACLL,iBAAK,GAAGK,CAAC,CAACG,MAAF,CAASR,KAAK,CAACS,KAAN,CAAY,CAAZ,CAAT,CAAR;AACD;AACF;AACF;;AACD,aAAOT,KAAP;AACD,KAhBM;;AAiBT;AAtBO,GAAP,CAAqBH,IAArB;AAwBD;;AA1BDa","names":["CommonMnMixin","Base","__extends","class_1","chars","length","text","font","getRemappedChar","c","unicodeChars","variant","concat","slice","exports"],"sources":["/home/kinzoku99/Desktop/ProjectIO/frontend/node_modules/mathjax-full/ts/output/common/Wrappers/mn.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2018-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the CommonMn wrapper mixin for the MmlMn object\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {AnyWrapper, WrapperConstructor, Constructor} from '../Wrapper.js';\n\n/*****************************************************************/\n/**\n * The CommonMn interface\n */\nexport interface CommonMn extends AnyWrapper {\n}\n\n/**\n * Shorthand for the CommonMn constructor\n */\nexport type MnConstructor = Constructor<CommonMn>;\n\n/*****************************************************************/\n/**\n * The CommonMn wrapper mixin for the MmlMn object\n *\n * @template T  The Wrapper class constructor type\n */\nexport function CommonMnMixin<T extends WrapperConstructor>(Base: T): MnConstructor & T {\n\n  return class extends Base {\n\n    /**\n     * @override\n     */\n    public remapChars(chars: number[]) {\n      //\n      //  Convert a leading hyphen to a minus\n      //\n      if (chars.length) {\n        const text = this.font.getRemappedChar('mn', chars[0]);\n        if (text) {\n          const c = this.unicodeChars(text, this.variant);\n          if (c.length === 1) {\n            chars[0] = c[0];\n          } else {\n            chars = c.concat(chars.slice(1));\n          }\n        }\n      }\n      return chars;\n    }\n  };\n\n}\n"]},"metadata":{},"sourceType":"script"}