{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MmlMo = void 0;\n\nvar MmlNode_js_1 = require(\"../MmlNode.js\");\n\nvar OperatorDictionary_js_1 = require(\"../OperatorDictionary.js\");\n\nvar string_js_1 = require(\"../../../util/string.js\");\n\nvar MmlMo = function (_super) {\n  __extends(MmlMo, _super);\n\n  function MmlMo() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._texClass = null;\n    _this.lspace = 5 / 18;\n    _this.rspace = 5 / 18;\n    return _this;\n  }\n\n  Object.defineProperty(MmlMo.prototype, \"texClass\", {\n    get: function () {\n      if (this._texClass === null) {\n        var mo = this.getText();\n\n        var _a = __read(this.handleExplicitForm(this.getForms()), 3),\n            form1 = _a[0],\n            form2 = _a[1],\n            form3 = _a[2];\n\n        var OPTABLE_1 = this.constructor.OPTABLE;\n        var def = OPTABLE_1[form1][mo] || OPTABLE_1[form2][mo] || OPTABLE_1[form3][mo];\n        return def ? def[2] : MmlNode_js_1.TEXCLASS.REL;\n      }\n\n      return this._texClass;\n    },\n    set: function (value) {\n      this._texClass = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MmlMo.prototype, \"kind\", {\n    get: function () {\n      return 'mo';\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MmlMo.prototype, \"isEmbellished\", {\n    get: function () {\n      return true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MmlMo.prototype, \"hasNewLine\", {\n    get: function () {\n      return this.attributes.get('linebreak') === 'newline';\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  MmlMo.prototype.coreParent = function () {\n    var embellished = this;\n    var parent = this;\n    var math = this.factory.getNodeClass('math');\n\n    while (parent && parent.isEmbellished && parent.coreMO() === this && !(parent instanceof math)) {\n      embellished = parent;\n      parent = parent.parent;\n    }\n\n    return embellished;\n  };\n\n  MmlMo.prototype.coreText = function (parent) {\n    if (!parent) {\n      return '';\n    }\n\n    if (parent.isEmbellished) {\n      return parent.coreMO().getText();\n    }\n\n    while (((parent.isKind('mrow') || parent.isKind('TeXAtom') || parent.isKind('mstyle') || parent.isKind('mphantom')) && parent.childNodes.length === 1 || parent.isKind('munderover')) && parent.childNodes[0]) {\n      parent = parent.childNodes[0];\n    }\n\n    return parent.isToken ? parent.getText() : '';\n  };\n\n  MmlMo.prototype.hasSpacingAttributes = function () {\n    return this.attributes.isSet('lspace') || this.attributes.isSet('rspace');\n  };\n\n  Object.defineProperty(MmlMo.prototype, \"isAccent\", {\n    get: function () {\n      var accent = false;\n      var node = this.coreParent().parent;\n\n      if (node) {\n        var key = node.isKind('mover') ? node.childNodes[node.over].coreMO() ? 'accent' : '' : node.isKind('munder') ? node.childNodes[node.under].coreMO() ? 'accentunder' : '' : node.isKind('munderover') ? this === node.childNodes[node.over].coreMO() ? 'accent' : this === node.childNodes[node.under].coreMO() ? 'accentunder' : '' : '';\n\n        if (key) {\n          var value = node.attributes.getExplicit(key);\n          accent = value !== undefined ? accent : this.attributes.get('accent');\n        }\n      }\n\n      return accent;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  MmlMo.prototype.setTeXclass = function (prev) {\n    var _a = this.attributes.getList('form', 'fence'),\n        form = _a.form,\n        fence = _a.fence;\n\n    if (this.getProperty('texClass') === undefined && (this.attributes.isSet('lspace') || this.attributes.isSet('rspace'))) {\n      return null;\n    }\n\n    if (fence && this.texClass === MmlNode_js_1.TEXCLASS.REL) {\n      if (form === 'prefix') {\n        this.texClass = MmlNode_js_1.TEXCLASS.OPEN;\n      }\n\n      if (form === 'postfix') {\n        this.texClass = MmlNode_js_1.TEXCLASS.CLOSE;\n      }\n    }\n\n    return this.adjustTeXclass(prev);\n  };\n\n  MmlMo.prototype.adjustTeXclass = function (prev) {\n    var texClass = this.texClass;\n    var prevClass = this.prevClass;\n\n    if (texClass === MmlNode_js_1.TEXCLASS.NONE) {\n      return prev;\n    }\n\n    if (prev) {\n      if (prev.getProperty('autoOP') && (texClass === MmlNode_js_1.TEXCLASS.BIN || texClass === MmlNode_js_1.TEXCLASS.REL)) {\n        prevClass = prev.texClass = MmlNode_js_1.TEXCLASS.ORD;\n      }\n\n      prevClass = this.prevClass = prev.texClass || MmlNode_js_1.TEXCLASS.ORD;\n      this.prevLevel = this.attributes.getInherited('scriptlevel');\n    } else {\n      prevClass = this.prevClass = MmlNode_js_1.TEXCLASS.NONE;\n    }\n\n    if (texClass === MmlNode_js_1.TEXCLASS.BIN && (prevClass === MmlNode_js_1.TEXCLASS.NONE || prevClass === MmlNode_js_1.TEXCLASS.BIN || prevClass === MmlNode_js_1.TEXCLASS.OP || prevClass === MmlNode_js_1.TEXCLASS.REL || prevClass === MmlNode_js_1.TEXCLASS.OPEN || prevClass === MmlNode_js_1.TEXCLASS.PUNCT)) {\n      this.texClass = MmlNode_js_1.TEXCLASS.ORD;\n    } else if (prevClass === MmlNode_js_1.TEXCLASS.BIN && (texClass === MmlNode_js_1.TEXCLASS.REL || texClass === MmlNode_js_1.TEXCLASS.CLOSE || texClass === MmlNode_js_1.TEXCLASS.PUNCT)) {\n      prev.texClass = this.prevClass = MmlNode_js_1.TEXCLASS.ORD;\n    } else if (texClass === MmlNode_js_1.TEXCLASS.BIN) {\n      var child = this;\n      var parent_1 = this.parent;\n\n      while (parent_1 && parent_1.parent && parent_1.isEmbellished && (parent_1.childNodes.length === 1 || !parent_1.isKind('mrow') && parent_1.core() === child)) {\n        child = parent_1;\n        parent_1 = parent_1.parent;\n      }\n\n      if (parent_1.childNodes[parent_1.childNodes.length - 1] === child) {\n        this.texClass = MmlNode_js_1.TEXCLASS.ORD;\n      }\n    }\n\n    return this;\n  };\n\n  MmlMo.prototype.setInheritedAttributes = function (attributes, display, level, prime) {\n    if (attributes === void 0) {\n      attributes = {};\n    }\n\n    if (display === void 0) {\n      display = false;\n    }\n\n    if (level === void 0) {\n      level = 0;\n    }\n\n    if (prime === void 0) {\n      prime = false;\n    }\n\n    _super.prototype.setInheritedAttributes.call(this, attributes, display, level, prime);\n\n    var mo = this.getText();\n    this.checkOperatorTable(mo);\n    this.checkPseudoScripts(mo);\n    this.checkPrimes(mo);\n    this.checkMathAccent(mo);\n  };\n\n  MmlMo.prototype.checkOperatorTable = function (mo) {\n    var e_1, _a;\n\n    var _b = __read(this.handleExplicitForm(this.getForms()), 3),\n        form1 = _b[0],\n        form2 = _b[1],\n        form3 = _b[2];\n\n    this.attributes.setInherited('form', form1);\n    var OPTABLE = this.constructor.OPTABLE;\n    var def = OPTABLE[form1][mo] || OPTABLE[form2][mo] || OPTABLE[form3][mo];\n\n    if (def) {\n      if (this.getProperty('texClass') === undefined) {\n        this.texClass = def[2];\n      }\n\n      try {\n        for (var _c = __values(Object.keys(def[3] || {})), _d = _c.next(); !_d.done; _d = _c.next()) {\n          var name_1 = _d.value;\n          this.attributes.setInherited(name_1, def[3][name_1]);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      this.lspace = (def[0] + 1) / 18;\n      this.rspace = (def[1] + 1) / 18;\n    } else {\n      var range = OperatorDictionary_js_1.getRange(mo);\n\n      if (range) {\n        if (this.getProperty('texClass') === undefined) {\n          this.texClass = range[2];\n        }\n\n        var spacing = this.constructor.MMLSPACING[range[2]];\n        this.lspace = (spacing[0] + 1) / 18;\n        this.rspace = (spacing[1] + 1) / 18;\n      }\n    }\n  };\n\n  MmlMo.prototype.getForms = function () {\n    var core = this;\n    var parent = this.parent;\n    var Parent = this.Parent;\n\n    while (Parent && Parent.isEmbellished) {\n      core = parent;\n      parent = Parent.parent;\n      Parent = Parent.Parent;\n    }\n\n    if (parent && parent.isKind('mrow') && parent.nonSpaceLength() !== 1) {\n      if (parent.firstNonSpace() === core) {\n        return ['prefix', 'infix', 'postfix'];\n      }\n\n      if (parent.lastNonSpace() === core) {\n        return ['postfix', 'infix', 'prefix'];\n      }\n    }\n\n    return ['infix', 'prefix', 'postfix'];\n  };\n\n  MmlMo.prototype.handleExplicitForm = function (forms) {\n    if (this.attributes.isSet('form')) {\n      var form_1 = this.attributes.get('form');\n      forms = [form_1].concat(forms.filter(function (name) {\n        return name !== form_1;\n      }));\n    }\n\n    return forms;\n  };\n\n  MmlMo.prototype.checkPseudoScripts = function (mo) {\n    var PSEUDOSCRIPTS = this.constructor.pseudoScripts;\n    if (!mo.match(PSEUDOSCRIPTS)) return;\n    var parent = this.coreParent().Parent;\n    var isPseudo = !parent || !(parent.isKind('msubsup') && !parent.isKind('msub'));\n    this.setProperty('pseudoscript', isPseudo);\n\n    if (isPseudo) {\n      this.attributes.setInherited('lspace', 0);\n      this.attributes.setInherited('rspace', 0);\n    }\n  };\n\n  MmlMo.prototype.checkPrimes = function (mo) {\n    var PRIMES = this.constructor.primes;\n    if (!mo.match(PRIMES)) return;\n    var REMAP = this.constructor.remapPrimes;\n    var primes = string_js_1.unicodeString(string_js_1.unicodeChars(mo).map(function (c) {\n      return REMAP[c];\n    }));\n    this.setProperty('primes', primes);\n  };\n\n  MmlMo.prototype.checkMathAccent = function (mo) {\n    var parent = this.Parent;\n    if (this.getProperty('mathaccent') !== undefined || !parent || !parent.isKind('munderover')) return;\n    var base = parent.childNodes[0];\n    if (base.isEmbellished && base.coreMO() === this) return;\n    var MATHACCENT = this.constructor.mathaccents;\n\n    if (mo.match(MATHACCENT)) {\n      this.setProperty('mathaccent', true);\n    }\n  };\n\n  MmlMo.defaults = __assign(__assign({}, MmlNode_js_1.AbstractMmlTokenNode.defaults), {\n    form: 'infix',\n    fence: false,\n    separator: false,\n    lspace: 'thickmathspace',\n    rspace: 'thickmathspace',\n    stretchy: false,\n    symmetric: false,\n    maxsize: 'infinity',\n    minsize: '0em',\n    largeop: false,\n    movablelimits: false,\n    accent: false,\n    linebreak: 'auto',\n    lineleading: '1ex',\n    linebreakstyle: 'before',\n    indentalign: 'auto',\n    indentshift: '0',\n    indenttarget: '',\n    indentalignfirst: 'indentalign',\n    indentshiftfirst: 'indentshift',\n    indentalignlast: 'indentalign',\n    indentshiftlast: 'indentshift'\n  });\n  MmlMo.MMLSPACING = OperatorDictionary_js_1.MMLSPACING;\n  MmlMo.OPTABLE = OperatorDictionary_js_1.OPTABLE;\n  MmlMo.pseudoScripts = new RegExp(['^[\"\\'*`', '\\u00AA', '\\u00B0', '\\u00B2-\\u00B4', '\\u00B9', '\\u00BA', '\\u2018-\\u201F', '\\u2032-\\u2037\\u2057', '\\u2070\\u2071', '\\u2074-\\u207F', '\\u2080-\\u208E', ']+$'].join(''));\n  MmlMo.primes = new RegExp(['^[\"\\'`', '\\u2018-\\u201F', ']+$'].join(''));\n  MmlMo.remapPrimes = {\n    0x0022: 0x2033,\n    0x0027: 0x2032,\n    0x0060: 0x2035,\n    0x2018: 0x2035,\n    0x2019: 0x2032,\n    0x201A: 0x2032,\n    0x201B: 0x2035,\n    0x201C: 0x2036,\n    0x201D: 0x2033,\n    0x201E: 0x2033,\n    0x201F: 0x2036\n  };\n  MmlMo.mathaccents = new RegExp(['^[', '\\u00B4\\u0301\\u02CA', '\\u0060\\u0300\\u02CB', '\\u00A8\\u0308', '\\u007E\\u0303\\u02DC', '\\u00AF\\u0304\\u02C9', '\\u02D8\\u0306', '\\u02C7\\u030C', '\\u005E\\u0302\\u02C6', '\\u2192\\u20D7', '\\u02D9\\u0307', '\\u02DA\\u030A', '\\u20DB', '\\u20DC', ']$'].join(''));\n  return MmlMo;\n}(MmlNode_js_1.AbstractMmlTokenNode);\n\nexports.MmlMo = MmlMo;","map":{"version":3,"mappings":"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","names":["__extends","_this","Object","MmlMo","_texClass","mo","getText","handleExplicitForm","getForms","form1","form2","form3","OPTABLE_1","constructor","OPTABLE","def","MmlNode_js_1","REL","value","attributes","get","embellished","parent","math","factory","getNodeClass","isEmbellished","coreMO","isKind","childNodes","length","isToken","isSet","accent","node","coreParent","key","over","under","getExplicit","undefined","prev","getList","form","fence","getProperty","texClass","OPEN","CLOSE","adjustTeXclass","prevClass","NONE","BIN","ORD","prevLevel","getInherited","OP","PUNCT","child","parent_1","core","display","level","prime","_super","setInheritedAttributes","call","checkOperatorTable","checkPseudoScripts","checkPrimes","checkMathAccent","setInherited","keys","_d","name_1","lspace","rspace","range","OperatorDictionary_js_1","spacing","MMLSPACING","Parent","nonSpaceLength","firstNonSpace","lastNonSpace","forms","form_1","concat","filter","name","PSEUDOSCRIPTS","pseudoScripts","match","isPseudo","setProperty","PRIMES","primes","REMAP","remapPrimes","string_js_1","map","c","base","MATHACCENT","mathaccents","__assign","defaults","separator","stretchy","symmetric","maxsize","minsize","largeop","movablelimits","linebreak","lineleading","linebreakstyle","indentalign","indentshift","indenttarget","indentalignfirst","indentshiftfirst","indentalignlast","indentshiftlast","RegExp","join","exports"],"sources":["/home/kinzoku99/Desktop/ProjectIO/frontend/node_modules/mathjax-full/ts/core/MmlTree/MmlNodes/mo.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the MmlMo node\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {PropertyList} from '../../Tree/Node.js';\nimport {AbstractMmlTokenNode, MmlNode, AttributeList, TEXCLASS} from '../MmlNode.js';\nimport {MmlMrow} from './mrow.js';\nimport {MmlMover, MmlMunder, MmlMunderover} from './munderover.js';\nimport {OperatorList, OPTABLE, getRange, MMLSPACING} from '../OperatorDictionary.js';\nimport {unicodeChars, unicodeString} from '../../../util/string.js';\n\n/*****************************************************************/\n/**\n *  Implements the MmlMo node class (subclass of AbstractMmlTokenNode)\n */\n\nexport class MmlMo extends AbstractMmlTokenNode {\n\n  /**\n   * @override\n   */\n  public static defaults: PropertyList = {\n    ...AbstractMmlTokenNode.defaults,\n    form: 'infix',\n    fence: false,\n    separator: false,\n    lspace: 'thickmathspace',\n    rspace: 'thickmathspace',\n    stretchy: false,\n    symmetric: false,\n    maxsize: 'infinity',\n    minsize: '0em', // MathML says '1em', but that is larger than some natural sizes\n    largeop: false,\n    movablelimits: false,\n    accent: false,\n    linebreak: 'auto',\n    lineleading: '1ex',\n    linebreakstyle: 'before',\n    indentalign: 'auto',\n    indentshift: '0',\n    indenttarget: '',\n    indentalignfirst: 'indentalign',\n    indentshiftfirst: 'indentshift',\n    indentalignlast: 'indentalign',\n    indentshiftlast: 'indentshift'\n  };\n\n  /**\n   * The MathML spacing values for the TeX classes\n   */\n  public static MMLSPACING = MMLSPACING;\n\n  /**\n   * The Operator Dictionary\n   */\n  public static OPTABLE: {[form: string]: OperatorList} = OPTABLE;\n\n  /**\n   * Pattern for matching when the contents is one ore more pseudoscripts\n   */\n  public static pseudoScripts = new RegExp([\n    '^[\"\\'*`',\n    '\\u00AA',               // FEMININE ORDINAL INDICATOR\n    '\\u00B0',               // DEGREE SIGN\n    '\\u00B2-\\u00B4',        // SUPERSCRIPT 2 and 3, ACUTE ACCENT\n    '\\u00B9',               // SUPERSCRIPT ONE\n    '\\u00BA',               // MASCULINE ORDINAL INDICATOR\n    '\\u2018-\\u201F',        // Various double and single quotation marks (up and down)\n    '\\u2032-\\u2037\\u2057',  // Primes and reversed primes (forward and reversed)\n    '\\u2070\\u2071',         // SUPERSCRIPT 0 and i\n    '\\u2074-\\u207F',        // SUPERCRIPT 4 through 9, -, =, (, ), and n\n    '\\u2080-\\u208E',        // SUBSCRIPT 0 through 9, -, =, (, ).\n    ']+$'\n  ].join(''));\n\n  /**\n   * Pattern for when contents is a collection of primes\n   */\n   protected static primes = new RegExp([\n     '^[\"\\'`',\n     '\\u2018-\\u201F',        // Various double and single quotation marks (up and down)\n     ']+$'\n   ].join(''));\n\n   /**\n    * Default map for remapping prime characters\n    */\n  protected static remapPrimes: {[n: number]: number} = {\n     0x0022: 0x2033,   // double quotes\n     0x0027: 0x2032,   // single quote\n     0x0060: 0x2035,   // back quote\n     0x2018: 0x2035,   // open single quote\n     0x2019: 0x2032,   // close single quote\n     0x201A: 0x2032,   // low open single quote\n     0x201B: 0x2035,   // reversed open single quote\n     0x201C: 0x2036,   // open double quote\n     0x201D: 0x2033,   // close double quote\n     0x201E: 0x2033,   // low open double quote\n     0x201F: 0x2036,   // reversed open double quote\n  };\n\n  /**\n   * Regular expression matching characters that are marked as math accents\n   */\n  protected static mathaccents = new RegExp([\n    '^[',\n    '\\u00B4\\u0301\\u02CA',  // acute\n    '\\u0060\\u0300\\u02CB',  // grave\n    '\\u00A8\\u0308',        // ddot\n    '\\u007E\\u0303\\u02DC',  // tilde\n    '\\u00AF\\u0304\\u02C9',  // bar\n    '\\u02D8\\u0306',        // breve\n    '\\u02C7\\u030C',        // check\n    '\\u005E\\u0302\\u02C6',  // hat\n    '\\u2192\\u20D7',        // vec\n    '\\u02D9\\u0307',        // dot\n    '\\u02DA\\u030A',        // mathring\n    '\\u20DB',              // dddot\n    '\\u20DC',              // ddddot\n    ']$'\n  ].join(''));\n\n  /**\n   * The internal TeX class of the node (for use with getter/setter below)\n   */\n  public _texClass: number = null;\n\n  /**\n   * Use a getter to look up the TeX class from the operator table if it hasn't\n   * been set yet (but don't save it in case the form changes when it is in its\n   * location).\n   */\n  public get texClass() {\n    if (this._texClass === null) {\n      let mo = this.getText();\n      let [form1, form2, form3] = this.handleExplicitForm(this.getForms());\n      let OPTABLE = (this.constructor as typeof MmlMo).OPTABLE;\n      let def = OPTABLE[form1][mo] || OPTABLE[form2][mo] || OPTABLE[form3][mo];\n      return def ? def[2] : TEXCLASS.REL;\n    }\n    return this._texClass;\n  }\n\n  /**\n   * Use a setter to store the actual value in _texClass;\n   */\n  public set texClass(value: number) {\n    this._texClass = value;\n  }\n\n  /**\n   * The default MathML spacing on the left\n   */\n  /* tslint:disable-next-line:whitespace */\n  public lspace = 5/18;\n\n  /**\n   * The default MathML spacing on the right\n   */\n  /* tslint:disable-next-line:whitespace */\n  public rspace = 5/18;\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'mo';\n  }\n\n  /**\n   * All <mo> are considered embellished\n   * @override\n   */\n  public get isEmbellished() {\n    return true;\n  }\n\n  /**\n   * @return {boolean}  Is <mo> marked as an explicit linebreak?\n   */\n  public get hasNewLine(): boolean {\n    return this.attributes.get('linebreak') === 'newline';\n  }\n\n  /**\n   * @return {MmlNode}  The node that is the outermost embellished operator\n   *                    with this node as its core\n   */\n  public coreParent(): MmlNode {\n    let embellished = this as MmlNode;\n    let parent = this as MmlNode;\n    let math = this.factory.getNodeClass('math');\n    while (parent && parent.isEmbellished && parent.coreMO() === this && !(parent instanceof math)) {\n      embellished = parent;\n      parent = (parent as MmlNode).parent;\n    }\n    return embellished;\n  }\n\n  /**\n   * @param {MmlNode} parent  The node whose core text is to be obtained\n   * @return {string}         The text of the core MO of the given parent element\n   */\n  public coreText(parent: MmlNode): string {\n    if (!parent) {\n      return '';\n    }\n    if (parent.isEmbellished) {\n      return (parent.coreMO() as MmlMo).getText();\n    }\n    while ((((parent.isKind('mrow') || parent.isKind('TeXAtom') || parent.isKind('mstyle') ||\n              parent.isKind('mphantom')) && parent.childNodes.length === 1) ||\n            parent.isKind('munderover')) && parent.childNodes[0]) {\n      parent = parent.childNodes[0] as MmlNode;\n    }\n    return (parent.isToken ? (parent as AbstractMmlTokenNode).getText() : '');\n  }\n\n  /**\n   * @override\n   */\n  public hasSpacingAttributes() {\n    return this.attributes.isSet('lspace') ||\n      this.attributes.isSet('rspace');\n  }\n\n  /**\n   * @return {boolean}  True is this mo is an accent in an munderover construction\n   */\n  get isAccent(): boolean {\n    let accent = false;\n    const node = this.coreParent().parent;\n    if (node) {\n      const key = (node.isKind('mover') ?\n                   ((node.childNodes[(node as MmlMover).over] as MmlNode).coreMO() ?\n                    'accent' : '') :\n                   node.isKind('munder') ?\n                   ((node.childNodes[(node as MmlMunder).under] as MmlNode).coreMO() ?\n                    'accentunder' : '') :\n                   node.isKind('munderover') ?\n                   (this === (node.childNodes[(node as MmlMunderover).over] as MmlNode).coreMO() ?\n                    'accent' :\n                    this === (node.childNodes[(node as MmlMunderover).under] as MmlNode).coreMO() ?\n                    'accentunder' : '') :\n                   '');\n      if (key) {\n        const value = node.attributes.getExplicit(key);\n        accent = (value !== undefined ? accent : this.attributes.get('accent')) as boolean;\n      }\n    }\n    return accent;\n  }\n\n  /**\n   * Produce the texClass based on the operator dictionary values\n   *\n   * @override\n   */\n  public setTeXclass(prev: MmlNode): MmlNode {\n    let {form, fence} = this.attributes.getList('form', 'fence') as {form: string, fence: string};\n    if (this.getProperty('texClass') === undefined &&\n        (this.attributes.isSet('lspace') || this.attributes.isSet('rspace'))) {\n      return null;\n    }\n    if (fence && this.texClass === TEXCLASS.REL) {\n      if (form === 'prefix') {\n        this.texClass = TEXCLASS.OPEN;\n      }\n      if (form === 'postfix') {\n        this.texClass = TEXCLASS.CLOSE;\n      }\n    }\n    return this.adjustTeXclass(prev);\n  }\n  /**\n   * Follow the TeXBook rules for adjusting the TeX class once its neighbors are known\n   *\n   * @param {MmlNode} prev  The node appearing before this one in the output\n   * @return {MmlNode}      The last node displayed (this node)\n   */\n  public adjustTeXclass(prev: MmlNode): MmlNode {\n    let texClass = this.texClass;\n    let prevClass = this.prevClass;\n    if (texClass === TEXCLASS.NONE) {\n      return prev;\n    }\n    if (prev) {\n      if (prev.getProperty('autoOP') && (texClass === TEXCLASS.BIN || texClass === TEXCLASS.REL)) {\n        prevClass = prev.texClass = TEXCLASS.ORD;\n      }\n      prevClass = this.prevClass = (prev.texClass || TEXCLASS.ORD);\n      this.prevLevel = this.attributes.getInherited('scriptlevel') as number;\n    } else {\n      prevClass = this.prevClass = TEXCLASS.NONE;\n    }\n    if (texClass === TEXCLASS.BIN &&\n        (prevClass === TEXCLASS.NONE || prevClass === TEXCLASS.BIN || prevClass === TEXCLASS.OP ||\n         prevClass === TEXCLASS.REL || prevClass === TEXCLASS.OPEN || prevClass === TEXCLASS.PUNCT)) {\n      this.texClass = TEXCLASS.ORD;\n    } else if (prevClass === TEXCLASS.BIN &&\n               (texClass === TEXCLASS.REL || texClass === TEXCLASS.CLOSE || texClass === TEXCLASS.PUNCT)) {\n      prev.texClass = this.prevClass = TEXCLASS.ORD;\n    } else if (texClass === TEXCLASS.BIN) {\n      //\n      // Check if node is the last one in its container since the rule\n      // above only takes effect if there is a node that follows.\n      //\n      let child: MmlNode = this;\n      let parent = this.parent;\n      while (parent && parent.parent && parent.isEmbellished &&\n             (parent.childNodes.length === 1 ||\n              (!parent.isKind('mrow') && parent.core() === child))) {\n        child = parent;\n        parent = parent.parent;\n      }\n      if (parent.childNodes[parent.childNodes.length - 1] === child) {\n        this.texClass = TEXCLASS.ORD;\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Do the normal inheritance, then look up the attributes from the operator dictionary.\n   * If there is no dictionary entry, get the TeX class from the Unicode range list.\n   *\n   * @override\n   */\n  public setInheritedAttributes(attributes: AttributeList = {},\n                                display: boolean = false, level: number = 0, prime: boolean = false) {\n    super.setInheritedAttributes(attributes, display, level, prime);\n    let mo = this.getText();\n    this.checkOperatorTable(mo);\n    this.checkPseudoScripts(mo);\n    this.checkPrimes(mo);\n    this.checkMathAccent(mo);\n  }\n\n  /**\n   * Set the attributes from the operator table\n   *\n   * @param {string} mo   The test of the mo element\n   */\n  protected checkOperatorTable(mo: string) {\n    let [form1, form2, form3] = this.handleExplicitForm(this.getForms());\n    this.attributes.setInherited('form', form1);\n    let OPTABLE = (this.constructor as typeof MmlMo).OPTABLE;\n    let def = OPTABLE[form1][mo] || OPTABLE[form2][mo] || OPTABLE[form3][mo];\n    if (def) {\n      if (this.getProperty('texClass') === undefined) {\n        this.texClass = def[2];\n      }\n      for (const name of Object.keys(def[3] || {})) {\n        this.attributes.setInherited(name, def[3][name]);\n      }\n      this.lspace = (def[0] + 1) / 18;\n      this.rspace = (def[1] + 1) / 18;\n    } else {\n      let range = getRange(mo);\n      if (range) {\n        if (this.getProperty('texClass') === undefined) {\n          this.texClass = range[2];\n        }\n        const spacing = (this.constructor as typeof MmlMo).MMLSPACING[range[2]];\n        this.lspace = (spacing[0] + 1) / 18;\n        this.rspace = (spacing[1] + 1) / 18;\n      }\n    }\n  }\n\n  /**\n   * @return {[string, string, string]}  The list of form attribute values in the\n   *                                     order they should be tested, based on the\n   *                                     position of the element in its parent.\n   */\n  public getForms(): [string, string, string] {\n    let core: MmlNode = this;\n    let parent = this.parent;\n    let Parent = this.Parent;\n    while (Parent && Parent.isEmbellished) {\n      core = parent;\n      parent = Parent.parent;\n      Parent = Parent.Parent;\n    }\n    if (parent && parent.isKind('mrow') && (parent as MmlMrow).nonSpaceLength() !== 1) {\n      if ((parent as MmlMrow).firstNonSpace() === core) {\n        return ['prefix', 'infix', 'postfix'];\n      }\n      if ((parent as MmlMrow).lastNonSpace() === core) {\n        return ['postfix', 'infix', 'prefix'];\n      }\n    }\n    return ['infix', 'prefix', 'postfix'];\n  }\n\n  /**\n   * @param {string[]} forms     The three forms in the default order they are to be tested\n   * @return {string[]}          The forms in the new order, if there is an explicit form attribute\n   */\n  protected handleExplicitForm(forms: string[]): string[] {\n    if (this.attributes.isSet('form')) {\n      const form = this.attributes.get('form') as string;\n      forms = [form].concat(forms.filter(name => (name !== form)));\n    }\n    return forms;\n  }\n\n  /**\n   * Mark the mo as a pseudoscript if it is one.  True means it is,\n   *   false means it is a pseudo-script character, but in an msup (so needs a variant form)\n   *\n   * @param {string} mo   The test of the mo element\n   */\n  protected checkPseudoScripts(mo: string) {\n    const PSEUDOSCRIPTS = (this.constructor as typeof MmlMo).pseudoScripts;\n    if (!mo.match(PSEUDOSCRIPTS)) return;\n    const parent = this.coreParent().Parent;\n    const isPseudo = !parent || !(parent.isKind('msubsup') && !parent.isKind('msub'));\n    this.setProperty('pseudoscript', isPseudo);\n    if (isPseudo) {\n      this.attributes.setInherited('lspace', 0);\n      this.attributes.setInherited('rspace', 0);\n    }\n  }\n\n  /**\n   * Determine whether the mo consists of primes, and remap them if so.\n   *\n   * @param {string} mo   The test of the mo element\n   */\n  protected checkPrimes(mo: string) {\n    const PRIMES = (this.constructor as typeof MmlMo).primes;\n    if (!mo.match(PRIMES)) return;\n    const REMAP = (this.constructor as typeof MmlMo).remapPrimes;\n    const primes = unicodeString(unicodeChars(mo).map(c => REMAP[c]));\n    this.setProperty('primes', primes);\n  }\n\n  /**\n   * Determine whether the mo is a mathaccent character\n   *\n   * @param {string} mo   The test of the mo element\n   */\n  protected checkMathAccent(mo: string) {\n    const parent = this.Parent;\n    if (this.getProperty('mathaccent') !== undefined || !parent || !parent.isKind('munderover')) return;\n    const base = parent.childNodes[0] as MmlNode;\n    if (base.isEmbellished && base.coreMO() === this) return;\n    const MATHACCENT = (this.constructor as typeof MmlMo).mathaccents;\n    if (mo.match(MATHACCENT)) {\n      this.setProperty('mathaccent', true);\n    }\n  }\n\n}\n"]},"metadata":{},"sourceType":"script"}