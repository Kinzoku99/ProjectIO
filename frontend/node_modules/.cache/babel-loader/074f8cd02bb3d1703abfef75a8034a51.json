{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AbstractHandler = void 0;\n\nvar MathDocument_js_1 = require(\"./MathDocument.js\");\n\nvar DefaultMathDocument = function (_super) {\n  __extends(DefaultMathDocument, _super);\n\n  function DefaultMathDocument() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  return DefaultMathDocument;\n}(MathDocument_js_1.AbstractMathDocument);\n\nvar AbstractHandler = function () {\n  function AbstractHandler(adaptor, priority) {\n    if (priority === void 0) {\n      priority = 5;\n    }\n\n    this.documentClass = DefaultMathDocument;\n    this.adaptor = adaptor;\n    this.priority = priority;\n  }\n\n  Object.defineProperty(AbstractHandler.prototype, \"name\", {\n    get: function () {\n      return this.constructor.NAME;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  AbstractHandler.prototype.handlesDocument = function (_document) {\n    return false;\n  };\n\n  AbstractHandler.prototype.create = function (document, options) {\n    return new this.documentClass(document, this.adaptor, options);\n  };\n\n  AbstractHandler.NAME = 'generic';\n  return AbstractHandler;\n}();\n\nexports.AbstractHandler = AbstractHandler;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;AA6DA;AAA2CA;;AAA3C;;AAA2E;;AAAD;AAA1E,EAA2CC,sCAA3C;;AAUA;AA4BE,2BAAYC,OAAZ,EAA0CC,QAA1C,EAA8D;AAApB;AAAAA;AAAoB;;AAPvD,yBAAwEC,mBAAxE;AAQL,SAAKF,OAAL,GAAeA,OAAf;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACD;;AAKDE,wBAAWC,yBAAX,EAAW,MAAX,EAAe;SAAf;AACE,aAAQ,KAAKC,WAAL,CAA4CC,IAApD;AACD,KAFc;qBAAA;;AAAA,GAAf;;AAOOF,8CAAP,UAAuBG,SAAvB,EAAqC;AACnC,WAAO,KAAP;AACD,GAFM;;AAOAH,qCAAP,UAAcI,QAAd,EAA6BC,OAA7B,EAAgD;AAC9C,WAAO,IAAI,KAAKC,aAAT,CAAuBF,QAAvB,EAAiC,KAAKR,OAAtC,EAA+CS,OAA/C,CAAP;AACD,GAFM;;AA7COL,yBAAe,SAAf;AAiDhB;AAtDA;;AAAsBO","names":["__extends","MathDocument_js_1","adaptor","priority","DefaultMathDocument","Object","AbstractHandler","constructor","NAME","_document","document","options","documentClass","exports"],"sources":["/home/kinzoku99/Desktop/ProjectIO/frontend/node_modules/mathjax-full/ts/core/Handler.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Interfaces and abstract classes for Handler objects\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {MathDocument, AbstractMathDocument, MathDocumentConstructor} from './MathDocument.js';\nimport {OptionList} from '../util/Options.js';\nimport {DOMAdaptor} from '../core/DOMAdaptor.js';\n\n/*****************************************************************/\n/**\n *  The Handler interface\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport interface Handler<N, T, D> {\n  /**\n   * The name of the handler class\n   */\n  name: string;\n\n  /**\n   * The DOM Adaptor to use for managing HTML elements\n   */\n  adaptor: DOMAdaptor<N, T, D>;\n\n  /**\n   * The priority for the handler when handlers are polled\n   *   to see which one can process a given document.\n   */\n  priority: number;\n\n  /**\n   * The class implementing the MathDocument for this handler\n   *   (so it can be subclassed by extensions as needed)\n   */\n  documentClass: MathDocumentConstructor<AbstractMathDocument<N, T, D>>;\n\n  /**\n   * Checks to see if the handler can process a given document\n   *\n   * @param {any} document  The document to be processed (string, window, etc.)\n   * @return {boolean}      True if this handler can process the given document\n   */\n  handlesDocument(document: any): boolean;\n\n  /**\n   * Creates a MathDocument for the given handler\n   *\n   * @param {any} document        The document to be handled\n   * @param {OptionList} options  The options for the handling of the document\n   * @return {MathDocument}       The MathDocument object that manages the processing\n   */\n  create(document: any, options: OptionList): MathDocument<N, T, D>;\n}\n\n/*****************************************************************/\n/**\n *  The default MathDocument class (subclasses use their own)\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nclass DefaultMathDocument<N, T, D> extends AbstractMathDocument<N, T, D> {}\n\n/*****************************************************************/\n/**\n *  The Handler interface\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport abstract class AbstractHandler<N, T, D> implements Handler<N, T, D> {\n\n  /**\n   * The name of this class\n   */\n  public static NAME: string = 'generic';\n\n  /**\n   * The DOM Adaptor to use for managing HTML elements\n   */\n  public adaptor: DOMAdaptor<N, T, D>;\n\n  /**\n   * The priority for this handler\n   */\n  public priority: number;\n\n  /**\n   * The class implementing the MathDocument for this handler\n   *   (so it can be subclassed by extensions as needed)\n   */\n  public documentClass: MathDocumentConstructor<AbstractMathDocument<N, T, D>> = DefaultMathDocument;\n\n  /**\n   * @param {number} priority  The priority to use for this handler\n   *\n   * @constructor\n   */\n  constructor(adaptor: DOMAdaptor<N, T, D>, priority: number = 5) {\n    this.adaptor = adaptor;\n    this.priority = priority;\n  }\n\n  /**\n   * @return {string}  The name of this handler class\n   */\n  public get name(): string {\n    return (this.constructor as typeof AbstractHandler).NAME;\n  }\n\n  /**\n   * @override\n   */\n  public handlesDocument(_document: any) {\n    return false;\n  }\n\n  /**\n   * @override\n   */\n  public create(document: any, options: OptionList) {\n    return new this.documentClass(document, this.adaptor, options) as MathDocument<N, T, D>;\n  }\n\n}\n"]},"metadata":{},"sourceType":"script"}