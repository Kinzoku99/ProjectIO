{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MmlMaction = void 0;\n\nvar MmlNode_js_1 = require(\"../MmlNode.js\");\n\nvar MmlMaction = function (_super) {\n  __extends(MmlMaction, _super);\n\n  function MmlMaction() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(MmlMaction.prototype, \"kind\", {\n    get: function () {\n      return 'maction';\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MmlMaction.prototype, \"arity\", {\n    get: function () {\n      return 1;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MmlMaction.prototype, \"selected\", {\n    get: function () {\n      var selection = this.attributes.get('selection');\n      var i = Math.max(1, Math.min(this.childNodes.length, selection)) - 1;\n      return this.childNodes[i] || this.factory.create('mrow');\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MmlMaction.prototype, \"isEmbellished\", {\n    get: function () {\n      return this.selected.isEmbellished;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MmlMaction.prototype, \"isSpacelike\", {\n    get: function () {\n      return this.selected.isSpacelike;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  MmlMaction.prototype.core = function () {\n    return this.selected.core();\n  };\n\n  MmlMaction.prototype.coreMO = function () {\n    return this.selected.coreMO();\n  };\n\n  MmlMaction.prototype.verifyAttributes = function (options) {\n    _super.prototype.verifyAttributes.call(this, options);\n\n    if (this.attributes.get('actiontype') !== 'toggle' && this.attributes.getExplicit('selection') !== undefined) {\n      var attributes = this.attributes.getAllAttributes();\n      delete attributes.selection;\n    }\n  };\n\n  MmlMaction.prototype.setTeXclass = function (prev) {\n    if (this.attributes.get('actiontype') === 'tooltip' && this.childNodes[1]) {\n      this.childNodes[1].setTeXclass(null);\n    }\n\n    var selected = this.selected;\n    prev = selected.setTeXclass(prev);\n    this.updateTeXclass(selected);\n    return prev;\n  };\n\n  MmlMaction.prototype.nextToggleSelection = function () {\n    var selection = Math.max(1, this.attributes.get('selection') + 1);\n\n    if (selection > this.childNodes.length) {\n      selection = 1;\n    }\n\n    this.attributes.set('selection', selection);\n  };\n\n  MmlMaction.defaults = __assign(__assign({}, MmlNode_js_1.AbstractMmlNode.defaults), {\n    actiontype: 'toggle',\n    selection: 1\n  });\n  return MmlMaction;\n}(MmlNode_js_1.AbstractMmlNode);\n\nexports.MmlMaction = MmlMaction;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;AAOA;AAAgCA;;AAAhC;;AAsGC;;AAxFCC,wBAAWC,oBAAX,EAAW,MAAX,EAAe;SAAf;AACE,aAAO,SAAP;AACD,KAFc;qBAAA;;AAAA,GAAf;AAQAD,wBAAWC,oBAAX,EAAW,OAAX,EAAgB;SAAhB;AACE,aAAO,CAAP;AACD,KAFe;qBAAA;;AAAA,GAAhB;AAOAD,wBAAWC,oBAAX,EAAW,UAAX,EAAmB;SAAnB;AACE,UAAMC,SAAS,GAAG,KAAKC,UAAL,CAAgBC,GAAhB,CAAoB,WAApB,CAAlB;AACA,UAAMC,CAAC,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYD,IAAI,CAACE,GAAL,CAAS,KAAKC,UAAL,CAAgBC,MAAzB,EAAiCR,SAAjC,CAAZ,IAA2D,CAArE;AACA,aAAO,KAAKO,UAAL,CAAgBJ,CAAhB,KAAsB,KAAKM,OAAL,CAAaC,MAAb,CAAoB,MAApB,CAA7B;AACD,KAJkB;qBAAA;;AAAA,GAAnB;AASAZ,wBAAWC,oBAAX,EAAW,eAAX,EAAwB;SAAxB;AACE,aAAO,KAAKY,QAAL,CAAcC,aAArB;AACD,KAFuB;qBAAA;;AAAA,GAAxB;AAOAd,wBAAWC,oBAAX,EAAW,aAAX,EAAsB;SAAtB;AACE,aAAO,KAAKY,QAAL,CAAcE,WAArB;AACD,KAFqB;qBAAA;;AAAA,GAAtB;;AAOOd,8BAAP;AACE,WAAO,KAAKY,QAAL,CAAcG,IAAd,EAAP;AACD,GAFM;;AAOAf,gCAAP;AACE,WAAO,KAAKY,QAAL,CAAcI,MAAd,EAAP;AACD,GAFM;;AAOGhB,0CAAV,UAA2BiB,OAA3B,EAAgD;AAC9CC,qBAAMC,gBAAN,CAAsBC,IAAtB,CAAsB,IAAtB,EAAuBH,OAAvB;;AACA,QAAI,KAAKf,UAAL,CAAgBC,GAAhB,CAAoB,YAApB,MAAsC,QAAtC,IACA,KAAKD,UAAL,CAAgBmB,WAAhB,CAA4B,WAA5B,MAA6CC,SADjD,EAC4D;AAC1D,UAAMpB,UAAU,GAAG,KAAKA,UAAL,CAAgBqB,gBAAhB,EAAnB;AACA,aAAOrB,UAAU,CAACD,SAAlB;AACD;AACF,GAPS;;AAeHD,qCAAP,UAAmBwB,IAAnB,EAAgC;AAC9B,QAAI,KAAKtB,UAAL,CAAgBC,GAAhB,CAAoB,YAApB,MAAsC,SAAtC,IAAmD,KAAKK,UAAL,CAAgB,CAAhB,CAAvD,EAA2E;AACzE,WAAKA,UAAL,CAAgB,CAAhB,EAAmBiB,WAAnB,CAA+B,IAA/B;AACD;;AACD,QAAIb,QAAQ,GAAG,KAAKA,QAApB;AACAY,QAAI,GAAGZ,QAAQ,CAACa,WAAT,CAAqBD,IAArB,CAAP;AACA,SAAKE,cAAL,CAAoBd,QAApB;AACA,WAAOY,IAAP;AACD,GARM;;AAaAxB,6CAAP;AACE,QAAIC,SAAS,GAAGI,IAAI,CAACC,GAAL,CAAS,CAAT,EAAa,KAAKJ,UAAL,CAAgBC,GAAhB,CAAoB,WAApB,IAA8C,CAA3D,CAAhB;;AACA,QAAIF,SAAS,GAAG,KAAKO,UAAL,CAAgBC,MAAhC,EAAwC;AACtCR,eAAS,GAAG,CAAZ;AACD;;AACD,SAAKC,UAAL,CAAgByB,GAAhB,CAAoB,WAApB,EAAiC1B,SAAjC;AACD,GANM;;AAzFOD,wBAAQ4B,sBACjBC,6BAAgBC,QADC,GACO;AAC3BC,cAAU,EAAE,QADe;AAE3B9B,aAAS,EAAE;AAFgB,GADP,CAAR;AAiGhB;AAAC,CAtGD,CAAgC4B,4BAAhC;;AAAaG","names":["__extends","Object","MmlMaction","selection","attributes","get","i","Math","max","min","childNodes","length","factory","create","selected","isEmbellished","isSpacelike","core","coreMO","options","_super","verifyAttributes","call","getExplicit","undefined","getAllAttributes","prev","setTeXclass","updateTeXclass","set","__assign","MmlNode_js_1","defaults","actiontype","exports"],"sources":["/home/kinzoku99/Desktop/ProjectIO/frontend/node_modules/mathjax-full/ts/core/MmlTree/MmlNodes/maction.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the MmlMaction node\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {PropertyList} from '../../Tree/Node.js';\nimport {MmlNode, AbstractMmlNode} from '../MmlNode.js';\n\n/*****************************************************************/\n/**\n *  Implements the MmlMaction node class (subclass of AbstractMmlNode)\n */\n\nexport class MmlMaction extends AbstractMmlNode {\n\n  /**\n   * @override\n   */\n  public static defaults: PropertyList = {\n    ...AbstractMmlNode.defaults,\n    actiontype: 'toggle',\n    selection: 1\n  };\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'maction';\n  }\n\n  /**\n   * At least one child\n   * @override\n   */\n  public get arity() {\n    return 1;\n  }\n\n  /**\n   * @return {MmlNode}  The selected child node (or an mrow if none selected)\n   */\n  public get selected(): MmlNode {\n    const selection = this.attributes.get('selection') as number;\n    const i = Math.max(1, Math.min(this.childNodes.length, selection)) - 1;\n    return this.childNodes[i] || this.factory.create('mrow');\n  }\n\n  /**\n   * @override\n   */\n  public get isEmbellished() {\n    return this.selected.isEmbellished;\n  }\n\n  /**\n   * @override\n   */\n  public get isSpacelike() {\n    return this.selected.isSpacelike;\n  }\n\n  /**\n   * @override\n   */\n  public core(): MmlNode {\n    return this.selected.core();\n  }\n\n  /**\n   * @override\n   */\n  public coreMO(): MmlNode {\n    return this.selected.coreMO();\n  }\n\n  /**\n   * @override\n   */\n  protected verifyAttributes(options: PropertyList) {\n    super.verifyAttributes(options);\n    if (this.attributes.get('actiontype') !== 'toggle' &&\n        this.attributes.getExplicit('selection') !== undefined) {\n      const attributes = this.attributes.getAllAttributes();\n      delete attributes.selection;\n    }\n  }\n\n  /**\n   * Get the TeX class from the selceted node\n   * For tooltips, set TeX classes within the tip as a separate math list\n   *\n   * @override\n   */\n  public setTeXclass(prev: MmlNode) {\n    if (this.attributes.get('actiontype') === 'tooltip' && this.childNodes[1]) {\n      this.childNodes[1].setTeXclass(null);\n    }\n    let selected = this.selected;\n    prev = selected.setTeXclass(prev);\n    this.updateTeXclass(selected);\n    return prev;\n  }\n\n  /**\n   * Select the next child for a toggle action\n   */\n  public nextToggleSelection() {\n    let selection = Math.max(1, (this.attributes.get('selection') as number) + 1);\n    if (selection > this.childNodes.length) {\n      selection = 1;\n    }\n    this.attributes.set('selection', selection);\n  }\n\n}\n"]},"metadata":{},"sourceType":"script"}