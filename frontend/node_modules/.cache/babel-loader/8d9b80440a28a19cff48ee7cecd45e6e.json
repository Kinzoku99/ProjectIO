{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar _a;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar StackItem_js_1 = require(\"./StackItem.js\");\n\nvar Factory_js_1 = require(\"../../core/Tree/Factory.js\");\n\nvar DummyItem = function (_super) {\n  __extends(DummyItem, _super);\n\n  function DummyItem() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  return DummyItem;\n}(StackItem_js_1.BaseItem);\n\nvar StackItemFactory = function (_super) {\n  __extends(StackItemFactory, _super);\n\n  function StackItemFactory() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.defaultKind = 'dummy';\n    _this.configuration = null;\n    return _this;\n  }\n\n  StackItemFactory.DefaultStackItems = (_a = {}, _a[DummyItem.prototype.kind] = DummyItem, _a);\n  return StackItemFactory;\n}(Factory_js_1.AbstractFactory);\n\nexports.default = StackItemFactory;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;;AAEA;;AAGA;AAAwBA;;AAAxB;;AAAmC;;AAAD;AAAlC,EAAwBC,uBAAxB;;AASA;AAA8CD;;AAA9C;AAAA;;AAaSE,wBAAc,OAAd;AAOAA,0BAA8B,IAA9B;;AAER;;AAjBeC,wCAAiBC,SAC7BA,GAACC,SAAS,CAACC,SAAV,CAAoBC,IAArB,IAA4BF,SADC,IAAjB;AAiBhB;AAAC,CAtBD,CAA8CG,4BAA9C;;kBAAqBL","names":["__extends","StackItem_js_1","_this","StackItemFactory","_a","DummyItem","prototype","kind","Factory_js_1"],"sources":["/home/kinzoku99/Desktop/ProjectIO/frontend/node_modules/mathjax-full/ts/input/tex/StackItemFactory.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2009-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview A factory for stack items. This allows particular items to be\n *     overwritten later.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\nimport {StackItemClass, StackItem, BaseItem} from './StackItem.js';\nimport ParseOptions from './ParseOptions.js';\nimport {AbstractFactory} from '../../core/Tree/Factory.js';\n\n\nclass DummyItem extends BaseItem {}\n\n/**\n * The StackItemFactory is initially populated with the default stack item\n * classes. They can be changed, deleted or added to, if and when necessary.\n *\n * @constructor\n * @extends {AbstractFactory}\n */\nexport default class StackItemFactory extends AbstractFactory<StackItem, StackItemClass> {\n\n  /**\n   * @override\n   */\n  public static DefaultStackItems: {[kind: string]: StackItemClass} = {\n    [DummyItem.prototype.kind]: DummyItem\n  };\n\n\n  /**\n   * @override\n   */\n  public defaultKind = 'dummy';\n\n\n  /**\n   * The parser configuration.\n   * @type {ParseOptions}\n   */\n  public configuration: ParseOptions = null;\n\n}\n"]},"metadata":{},"sourceType":"script"}