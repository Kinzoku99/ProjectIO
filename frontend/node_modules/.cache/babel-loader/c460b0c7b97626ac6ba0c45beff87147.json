{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HTMLMathItem = void 0;\n\nvar MathItem_js_1 = require(\"../../core/MathItem.js\");\n\nvar HTMLMathItem = function (_super) {\n  __extends(HTMLMathItem, _super);\n\n  function HTMLMathItem(math, jax, display, start, end) {\n    if (display === void 0) {\n      display = true;\n    }\n\n    if (start === void 0) {\n      start = {\n        node: null,\n        n: 0,\n        delim: ''\n      };\n    }\n\n    if (end === void 0) {\n      end = {\n        node: null,\n        n: 0,\n        delim: ''\n      };\n    }\n\n    return _super.call(this, math, jax, display, start, end) || this;\n  }\n\n  Object.defineProperty(HTMLMathItem.prototype, \"adaptor\", {\n    get: function () {\n      return this.inputJax.adaptor;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  HTMLMathItem.prototype.updateDocument = function (_html) {\n    if (this.state() < MathItem_js_1.STATE.INSERTED) {\n      if (this.inputJax.processStrings) {\n        var node = this.start.node;\n\n        if (node === this.end.node) {\n          if (this.end.n && this.end.n < this.adaptor.value(this.end.node).length) {\n            this.adaptor.split(this.end.node, this.end.n);\n          }\n\n          if (this.start.n) {\n            node = this.adaptor.split(this.start.node, this.start.n);\n          }\n\n          this.adaptor.replace(this.typesetRoot, node);\n        } else {\n          if (this.start.n) {\n            node = this.adaptor.split(node, this.start.n);\n          }\n\n          while (node !== this.end.node) {\n            var next = this.adaptor.next(node);\n            this.adaptor.remove(node);\n            node = next;\n          }\n\n          this.adaptor.insert(this.typesetRoot, node);\n\n          if (this.end.n < this.adaptor.value(node).length) {\n            this.adaptor.split(node, this.end.n);\n          }\n\n          this.adaptor.remove(node);\n        }\n      } else {\n        this.adaptor.replace(this.typesetRoot, this.start.node);\n      }\n\n      this.start.node = this.end.node = this.typesetRoot;\n      this.start.n = this.end.n = 0;\n      this.state(MathItem_js_1.STATE.INSERTED);\n    }\n  };\n\n  HTMLMathItem.prototype.updateStyleSheet = function (document) {\n    document.addStyleSheet();\n  };\n\n  HTMLMathItem.prototype.removeFromDocument = function (restore) {\n    if (restore === void 0) {\n      restore = false;\n    }\n\n    if (this.state() >= MathItem_js_1.STATE.TYPESET) {\n      var adaptor = this.adaptor;\n      var node = this.start.node;\n      var math = adaptor.text('');\n\n      if (restore) {\n        var text = this.start.delim + this.math + this.end.delim;\n\n        if (this.inputJax.processStrings) {\n          math = adaptor.text(text);\n        } else {\n          var doc = adaptor.parse(text, 'text/html');\n          math = adaptor.firstChild(adaptor.body(doc));\n        }\n      }\n\n      if (adaptor.parent(node)) {\n        adaptor.replace(math, node);\n      }\n\n      this.start.node = this.end.node = math;\n      this.start.n = this.end.n = 0;\n    }\n  };\n\n  return HTMLMathItem;\n}(MathItem_js_1.AbstractMathItem);\n\nexports.HTMLMathItem = HTMLMathItem;","map":{"version":3,"mappings":"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","names":["__extends","math","jax","display","start","end","node","n","delim","_super","Object","HTMLMathItem","inputJax","adaptor","_html","state","MathItem_js_1","INSERTED","processStrings","value","length","split","replace","typesetRoot","next","remove","insert","document","addStyleSheet","restore","TYPESET","text","doc","parse","firstChild","body","parent","exports"],"sources":["/home/kinzoku99/Desktop/ProjectIO/frontend/node_modules/mathjax-full/ts/handlers/html/HTMLMathItem.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the HTMLMathItem class\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {AbstractMathItem, Location, STATE} from '../../core/MathItem.js';\nimport {InputJax} from '../../core/InputJax.js';\nimport {HTMLDocument} from './HTMLDocument.js';\n\n/*****************************************************************/\n/**\n *  Implements the HTMLMathItem class (extends AbstractMathItem)\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport class HTMLMathItem<N, T, D> extends AbstractMathItem<N, T, D> {\n\n  /**\n   * Easy access to DOM adaptor\n   */\n  get adaptor() {\n    return this.inputJax.adaptor;\n  }\n\n  /**\n   * @override\n   */\n  constructor(math: string, jax: InputJax<N, T, D>, display: boolean = true,\n              start: Location<N, T> = {node: null, n: 0, delim: ''},\n              end: Location<N, T> = {node: null, n: 0, delim: ''}) {\n    super(math, jax, display, start, end);\n  }\n\n  /**\n   * Insert the typeset MathItem into the document at the right location\n   *   If the starting and ending nodes are the same:\n   *     Split the text to isolate the math and its delimiters\n   *     Replace the math by the typeset version\n   *   Otherewise (spread over several nodes)\n   *     Split the start node, if needed\n   *     Remove nodes until we reach the end node\n   *     Insert the math before the end node\n   *     Split the end node, if needed\n   *     Remove the end node\n   *\n   * @override\n   */\n  public updateDocument(_html: HTMLDocument<N, T, D>) {\n    if (this.state() < STATE.INSERTED) {\n      if (this.inputJax.processStrings) {\n        let node = this.start.node as T;\n        if (node === this.end.node) {\n          if (this.end.n && this.end.n < this.adaptor.value(this.end.node).length) {\n            this.adaptor.split(this.end.node, this.end.n);\n          }\n          if (this.start.n) {\n            node = this.adaptor.split(this.start.node as T, this.start.n);\n          }\n          this.adaptor.replace(this.typesetRoot, node);\n        } else {\n          if (this.start.n) {\n            node = this.adaptor.split(node, this.start.n);\n          }\n          while (node !== this.end.node) {\n            let next = this.adaptor.next(node) as T;\n            this.adaptor.remove(node);\n            node = next;\n          }\n          this.adaptor.insert(this.typesetRoot, node);\n          if (this.end.n < this.adaptor.value(node).length) {\n            this.adaptor.split(node, this.end.n);\n          }\n          this.adaptor.remove(node);\n        }\n      } else {\n        this.adaptor.replace(this.typesetRoot, this.start.node);\n      }\n      this.start.node = this.end.node = this.typesetRoot;\n      this.start.n = this.end.n = 0;\n      this.state(STATE.INSERTED);\n    }\n  }\n\n  /**\n   * Update the style sheet for any changes due to rerendering\n   *\n   * @param {HTMLDocument} document   The document whose styles are to be updated\n   */\n  public updateStyleSheet(document: HTMLDocument<N, T, D>) {\n    document.addStyleSheet();\n  }\n\n  /**\n   * Remove the typeset math from the document, and put back the original\n   *  expression and its delimiters, if requested.\n   *\n   * @override\n   */\n  public removeFromDocument(restore: boolean = false) {\n    if (this.state() >= STATE.TYPESET) {\n      const adaptor = this.adaptor;\n      let node = this.start.node;\n      let math: N | T = adaptor.text('');\n      if (restore) {\n        let text = this.start.delim + this.math + this.end.delim;\n        if (this.inputJax.processStrings) {\n          math = adaptor.text(text);\n        } else {\n          const doc = adaptor.parse(text, 'text/html');\n          math = adaptor.firstChild(adaptor.body(doc));\n        }\n      }\n      if (adaptor.parent(node)) {\n        adaptor.replace(math, node);\n      }\n      this.start.node = this.end.node = math;\n      this.start.n = this.end.n = 0;\n    }\n  }\n\n}\n"]},"metadata":{},"sourceType":"script"}