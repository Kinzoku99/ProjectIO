{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SVGWrapper = void 0;\n\nvar Wrapper_js_1 = require(\"../common/Wrapper.js\");\n\nvar svg_js_1 = require(\"../svg.js\");\n\nvar SVGWrapper = function (_super) {\n  __extends(SVGWrapper, _super);\n\n  function SVGWrapper() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.element = null;\n    return _this;\n  }\n\n  SVGWrapper.prototype.toSVG = function (parent) {\n    this.addChildren(this.standardSVGnode(parent));\n  };\n\n  SVGWrapper.prototype.addChildren = function (parent) {\n    var e_1, _a;\n\n    var x = 0;\n\n    try {\n      for (var _b = __values(this.childNodes), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var child = _c.value;\n        child.toSVG(parent);\n\n        if (child.element) {\n          child.place(x + child.bbox.L * child.bbox.rscale, 0);\n        }\n\n        x += (child.bbox.L + child.bbox.w + child.bbox.R) * child.bbox.rscale;\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n\n  SVGWrapper.prototype.standardSVGnode = function (parent) {\n    var svg = this.createSVGnode(parent);\n    this.handleStyles();\n    this.handleScale();\n    this.handleColor();\n    this.handleAttributes();\n    return svg;\n  };\n\n  SVGWrapper.prototype.createSVGnode = function (parent) {\n    this.element = this.svg('g', {\n      'data-mml-node': this.node.kind\n    });\n    var href = this.node.attributes.get('href');\n\n    if (href) {\n      parent = this.adaptor.append(parent, this.svg('a', {\n        href: href\n      }));\n\n      var _a = this.getBBox(),\n          h = _a.h,\n          d = _a.d,\n          w = _a.w;\n\n      this.adaptor.append(this.element, this.svg('rect', {\n        'data-hitbox': true,\n        fill: 'none',\n        stroke: 'none',\n        'pointer-events': 'all',\n        width: this.fixed(w),\n        height: this.fixed(h + d),\n        y: this.fixed(-d)\n      }));\n    }\n\n    this.adaptor.append(parent, this.element);\n    return this.element;\n  };\n\n  SVGWrapper.prototype.handleStyles = function () {\n    if (!this.styles) return;\n    var styles = this.styles.cssText;\n\n    if (styles) {\n      this.adaptor.setAttribute(this.element, 'style', styles);\n    }\n  };\n\n  SVGWrapper.prototype.handleScale = function () {\n    if (this.bbox.rscale !== 1) {\n      var scale = 'scale(' + this.fixed(this.bbox.rscale / 1000, 3) + ')';\n      this.adaptor.setAttribute(this.element, 'transform', scale);\n    }\n  };\n\n  SVGWrapper.prototype.handleColor = function () {\n    var adaptor = this.adaptor;\n    var attributes = this.node.attributes;\n    var mathcolor = attributes.getExplicit('mathcolor');\n    var color = attributes.getExplicit('color');\n    var mathbackground = attributes.getExplicit('mathbackground');\n    var background = attributes.getExplicit('background');\n\n    if (mathcolor || color) {\n      adaptor.setAttribute(this.element, 'fill', mathcolor || color);\n      adaptor.setAttribute(this.element, 'stroke', mathcolor || color);\n    }\n\n    if (mathbackground || background) {\n      var _a = this.getBBox(),\n          h = _a.h,\n          d = _a.d,\n          w = _a.w;\n\n      var rect = this.svg('rect', {\n        fill: mathbackground || background,\n        x: 0,\n        y: this.fixed(-d),\n        width: this.fixed(w),\n        height: this.fixed(h + d),\n        'data-bgcolor': true\n      });\n      var child = adaptor.firstChild(this.element);\n\n      if (child) {\n        adaptor.insert(rect, child);\n      } else {\n        adaptor.append(this.element, rect);\n      }\n    }\n  };\n\n  SVGWrapper.prototype.handleAttributes = function () {\n    var e_2, _a, e_3, _b;\n\n    var attributes = this.node.attributes;\n    var defaults = attributes.getAllDefaults();\n    var skip = SVGWrapper.skipAttributes;\n\n    try {\n      for (var _c = __values(attributes.getExplicitNames()), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var name_1 = _d.value;\n\n        if (skip[name_1] === false || !(name_1 in defaults) && !skip[name_1] && !this.adaptor.hasAttribute(this.element, name_1)) {\n          this.adaptor.setAttribute(this.element, name_1, attributes.getExplicit(name_1));\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    if (attributes.get('class')) {\n      var names = attributes.get('class').trim().split(/ +/);\n\n      try {\n        for (var names_1 = __values(names), names_1_1 = names_1.next(); !names_1_1.done; names_1_1 = names_1.next()) {\n          var name_2 = names_1_1.value;\n          this.adaptor.addClass(this.element, name_2);\n        }\n      } catch (e_3_1) {\n        e_3 = {\n          error: e_3_1\n        };\n      } finally {\n        try {\n          if (names_1_1 && !names_1_1.done && (_b = names_1.return)) _b.call(names_1);\n        } finally {\n          if (e_3) throw e_3.error;\n        }\n      }\n    }\n  };\n\n  SVGWrapper.prototype.place = function (x, y, element) {\n    if (element === void 0) {\n      element = null;\n    }\n\n    if (!(x || y)) return;\n\n    if (!element) {\n      element = this.element;\n      y = this.handleId(y);\n    }\n\n    var translate = \"translate(\" + this.fixed(x) + \",\" + this.fixed(y) + \")\";\n    var transform = this.adaptor.getAttribute(element, 'transform') || '';\n    this.adaptor.setAttribute(element, 'transform', translate + (transform ? ' ' + transform : ''));\n  };\n\n  SVGWrapper.prototype.handleId = function (y) {\n    if (!this.node.attributes || !this.node.attributes.get('id')) {\n      return y;\n    }\n\n    var adaptor = this.adaptor;\n    var h = this.getBBox().h;\n    var children = adaptor.childNodes(this.element);\n    children.forEach(function (child) {\n      return adaptor.remove(child);\n    });\n    var g = this.svg('g', {\n      'data-idbox': true,\n      transform: \"translate(0,\" + this.fixed(-h) + \")\"\n    }, children);\n    adaptor.append(this.element, this.svg('text', {\n      'data-id-align': true\n    }, [this.text('')]));\n    adaptor.append(this.element, g);\n    return y + h;\n  };\n\n  SVGWrapper.prototype.firstChild = function () {\n    var adaptor = this.adaptor;\n    var child = adaptor.firstChild(this.element);\n\n    if (child && adaptor.kind(child) === 'text' && adaptor.getAttribute(child, 'data-id-align')) {\n      child = adaptor.firstChild(adaptor.next(child));\n    }\n\n    if (child && adaptor.kind(child) === 'rect' && adaptor.getAttribute(child, 'data-hitbox')) {\n      child = adaptor.next(child);\n    }\n\n    return child;\n  };\n\n  SVGWrapper.prototype.placeChar = function (n, x, y, parent, variant) {\n    var e_4, _a;\n\n    if (variant === void 0) {\n      variant = null;\n    }\n\n    if (variant === null) {\n      variant = this.variant;\n    }\n\n    var C = n.toString(16).toUpperCase();\n\n    var _b = __read(this.getVariantChar(variant, n), 4),\n        w = _b[2],\n        data = _b[3];\n\n    if ('p' in data) {\n      var path = data.p ? 'M' + data.p + 'Z' : '';\n      this.place(x, y, this.adaptor.append(parent, this.charNode(variant, C, path)));\n    } else if ('c' in data) {\n      var g = this.adaptor.append(parent, this.svg('g', {\n        'data-c': C\n      }));\n      this.place(x, y, g);\n      x = 0;\n\n      try {\n        for (var _c = __values(this.unicodeChars(data.c, variant)), _d = _c.next(); !_d.done; _d = _c.next()) {\n          var n_1 = _d.value;\n          x += this.placeChar(n_1, x, y, g, variant);\n        }\n      } catch (e_4_1) {\n        e_4 = {\n          error: e_4_1\n        };\n      } finally {\n        try {\n          if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n        } finally {\n          if (e_4) throw e_4.error;\n        }\n      }\n    } else if (data.unknown) {\n      var char = String.fromCodePoint(n);\n      var text = this.adaptor.append(parent, this.jax.unknownText(char, variant));\n      this.place(x, y, text);\n      return this.jax.measureTextNodeWithCache(text, char, variant).w;\n    }\n\n    return w;\n  };\n\n  SVGWrapper.prototype.charNode = function (variant, C, path) {\n    var cache = this.jax.options.fontCache;\n    return cache !== 'none' ? this.useNode(variant, C, path) : this.pathNode(C, path);\n  };\n\n  SVGWrapper.prototype.pathNode = function (C, path) {\n    return this.svg('path', {\n      'data-c': C,\n      d: path\n    });\n  };\n\n  SVGWrapper.prototype.useNode = function (variant, C, path) {\n    var use = this.svg('use', {\n      'data-c': C\n    });\n    var id = '#' + this.jax.fontCache.cachePath(variant, C, path);\n    this.adaptor.setAttribute(use, 'href', id, svg_js_1.XLINKNS);\n    return use;\n  };\n\n  SVGWrapper.prototype.drawBBox = function () {\n    var _a = this.getBBox(),\n        w = _a.w,\n        h = _a.h,\n        d = _a.d;\n\n    var box = this.svg('g', {\n      style: {\n        opacity: .25\n      }\n    }, [this.svg('rect', {\n      fill: 'red',\n      height: this.fixed(h),\n      width: this.fixed(w)\n    }), this.svg('rect', {\n      fill: 'green',\n      height: this.fixed(d),\n      width: this.fixed(w),\n      y: this.fixed(-d)\n    })]);\n    var node = this.element || this.parent.element;\n    this.adaptor.append(node, box);\n  };\n\n  SVGWrapper.prototype.html = function (type, def, content) {\n    if (def === void 0) {\n      def = {};\n    }\n\n    if (content === void 0) {\n      content = [];\n    }\n\n    return this.jax.html(type, def, content);\n  };\n\n  SVGWrapper.prototype.svg = function (type, def, content) {\n    if (def === void 0) {\n      def = {};\n    }\n\n    if (content === void 0) {\n      content = [];\n    }\n\n    return this.jax.svg(type, def, content);\n  };\n\n  SVGWrapper.prototype.text = function (text) {\n    return this.jax.text(text);\n  };\n\n  SVGWrapper.prototype.fixed = function (x, n) {\n    if (n === void 0) {\n      n = 1;\n    }\n\n    return this.jax.fixed(x * 1000, n);\n  };\n\n  SVGWrapper.kind = 'unknown';\n  return SVGWrapper;\n}(Wrapper_js_1.CommonWrapper);\n\nexports.SVGWrapper = SVGWrapper;","map":{"version":3,"mappings":"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","names":["__extends","_this","SVGWrapper","parent","addChildren","standardSVGnode","x","childNodes","_c","child","toSVG","element","place","bbox","L","rscale","w","R","svg","createSVGnode","handleStyles","handleScale","handleColor","handleAttributes","node","kind","href","attributes","get","adaptor","append","getBBox","h","d","fill","stroke","width","fixed","height","y","styles","cssText","setAttribute","scale","mathcolor","getExplicit","color","mathbackground","background","rect","firstChild","insert","defaults","getAllDefaults","skip","skipAttributes","getExplicitNames","_d","name_1","hasAttribute","names","trim","split","names_1_1","name_2","addClass","handleId","translate","transform","getAttribute","children","forEach","remove","g","text","next","n","variant","C","toString","toUpperCase","getVariantChar","data","path","p","charNode","unicodeChars","c","n_1","placeChar","unknown","char","String","fromCodePoint","jax","unknownText","measureTextNodeWithCache","cache","options","fontCache","useNode","pathNode","use","id","cachePath","svg_js_1","box","style","opacity","type","def","content","html","Wrapper_js_1","exports"],"sources":["/home/kinzoku99/Desktop/ProjectIO/frontend/node_modules/mathjax-full/ts/output/svg/Wrapper.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2018-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the SVGWrapper class\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {OptionList} from '../../util/Options.js';\nimport {CommonWrapper, AnyWrapperClass, Constructor} from '../common/Wrapper.js';\nimport {SVG, XLINKNS} from '../svg.js';\nimport {SVGWrapperFactory} from './WrapperFactory.js';\nimport {SVGFontData, SVGDelimiterData, SVGCharOptions} from './FontData.js';\n\nexport {Constructor, StringMap} from '../common/Wrapper.js';\n\n/*****************************************************************/\n\n/**\n * Shorthand for makeing a SVGWrapper constructor\n */\nexport type SVGConstructor<N, T, D> = Constructor<SVGWrapper<N, T, D>>;\n\n\n/*****************************************************************/\n/**\n *  The type of the SVGWrapper class (used when creating the wrapper factory for this class)\n */\nexport interface SVGWrapperClass extends AnyWrapperClass {\n\n  kind: string;\n\n}\n\n/*****************************************************************/\n/**\n *  The base SVGWrapper class\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport class SVGWrapper<N, T, D> extends\nCommonWrapper<\n  SVG<N, T, D>,\n  SVGWrapper<N, T, D>,\n  SVGWrapperClass,\n  SVGCharOptions,\n  SVGDelimiterData,\n  SVGFontData\n> {\n\n  /**\n   * The kind of wrapper\n   */\n  public static kind: string = 'unknown';\n\n  /**\n   * The factory used to create more SVGWrappers\n   */\n  protected factory: SVGWrapperFactory<N, T, D>;\n\n  /**\n   * @override\n   */\n  public parent: SVGWrapper<N, T, D>;\n  /**\n   * @override\n   */\n  public childNodes: SVGWrapper<N, T, D>[];\n\n  /**\n   * The SVG element generated for this wrapped node\n   */\n  public element: N = null;\n\n  /**\n   * @override\n   */\n  public font: SVGFontData;\n\n  /*******************************************************************/\n\n  /**\n   * Create the HTML for the wrapped node.\n   *\n   * @param {N} parent  The HTML node where the output is added\n   */\n  public toSVG(parent: N) {\n    this.addChildren(this.standardSVGnode(parent));\n  }\n\n  /**\n   * @param {N} parent  The element in which to add the children\n   */\n  public addChildren(parent: N) {\n    let x = 0;\n    for (const child of this.childNodes) {\n      child.toSVG(parent);\n      if (child.element) {\n        child.place(x + child.bbox.L * child.bbox.rscale, 0);\n      }\n      x += (child.bbox.L + child.bbox.w + child.bbox.R) * child.bbox.rscale;\n    }\n  }\n\n  /*******************************************************************/\n\n  /**\n   * Create the standard SVG element for the given wrapped node.\n   *\n   * @param {N} parent  The HTML element in which the node is to be created\n   * @returns {N}  The root of the HTML tree for the wrapped node's output\n   */\n  protected standardSVGnode(parent: N): N {\n    const svg = this.createSVGnode(parent);\n    this.handleStyles();\n    this.handleScale();\n    this.handleColor();\n    this.handleAttributes();\n    return svg;\n  }\n\n  /**\n   * @param {N} parent  The HTML element in which the node is to be created\n   * @returns {N}  The root of the HTML tree for the wrapped node's output\n   */\n  protected createSVGnode(parent: N): N {\n    this.element = this.svg('g', {'data-mml-node': this.node.kind});\n    const href = this.node.attributes.get('href');\n    if (href) {\n      parent = this.adaptor.append(parent, this.svg('a', {href: href})) as N;\n      const {h, d, w} = this.getBBox();\n      this.adaptor.append(this.element, this.svg('rect', {\n        'data-hitbox': true, fill: 'none', stroke: 'none', 'pointer-events': 'all',\n        width: this.fixed(w), height: this.fixed(h + d), y: this.fixed(-d)\n      }));\n    }\n    this.adaptor.append(parent, this.element) as N;\n    return this.element;\n  }\n\n  /**\n   * Set the CSS styles for the svg element\n   */\n  protected handleStyles() {\n    if (!this.styles) return;\n    const styles = this.styles.cssText;\n    if (styles) {\n      this.adaptor.setAttribute(this.element, 'style', styles);\n    }\n  }\n\n  /**\n   * Set the (relative) scaling factor for the node\n   */\n  protected handleScale() {\n    if (this.bbox.rscale !== 1) {\n      const scale = 'scale(' + this.fixed(this.bbox.rscale / 1000, 3) + ')';\n      this.adaptor.setAttribute(this.element, 'transform', scale);\n    }\n  }\n\n  /**\n   * Add the foreground and background colors\n   * (Only look at explicit attributes, since inherited ones will\n   *  be applied to a parent element, and we will inherit from that)\n   */\n  protected handleColor() {\n    const adaptor = this.adaptor;\n    const attributes = this.node.attributes;\n    const mathcolor = attributes.getExplicit('mathcolor') as string;\n    const color = attributes.getExplicit('color') as string;\n    const mathbackground = attributes.getExplicit('mathbackground') as string;\n    const background = attributes.getExplicit('background') as string;\n    if (mathcolor || color) {\n      adaptor.setAttribute(this.element, 'fill', mathcolor || color);\n      adaptor.setAttribute(this.element, 'stroke', mathcolor || color);\n    }\n    if (mathbackground || background) {\n      let {h, d, w} = this.getBBox();\n      let rect = this.svg('rect', {\n        fill: mathbackground || background,\n        x: 0, y: this.fixed(-d),\n        width: this.fixed(w),\n        height: this.fixed(h + d),\n        'data-bgcolor': true\n      });\n      let child = adaptor.firstChild(this.element);\n      if (child) {\n        adaptor.insert(rect, child);\n      } else {\n        adaptor.append(this.element, rect);\n      }\n    }\n  }\n\n  /**\n   * Copy RDFa, aria, and other tags from the MathML to the SVG output nodes.\n   * Don't copy those in the skipAttributes list, or anything that already exists\n   * as a property of the node (e.g., no \"onlick\", etc.).  If a name in the\n   * skipAttributes object is set to false, then the attribute WILL be copied.\n   * Add the class to any other classes already in use.\n   */\n  protected handleAttributes() {\n    const attributes = this.node.attributes;\n    const defaults = attributes.getAllDefaults();\n    const skip = SVGWrapper.skipAttributes;\n    for (const name of attributes.getExplicitNames()) {\n      if (skip[name] === false || (!(name in defaults) && !skip[name] &&\n                                   !this.adaptor.hasAttribute(this.element, name))) {\n        this.adaptor.setAttribute(this.element, name, attributes.getExplicit(name) as string);\n      }\n    }\n    if (attributes.get('class')) {\n      const names = (attributes.get('class') as string).trim().split(/ +/);\n      for (const name of names) {\n        this.adaptor.addClass(this.element, name);\n      }\n    }\n  }\n\n  /*******************************************************************/\n\n  /**\n   * @param {number} x   The x-offset for the element\n   * @param {number} y   The y-offset for the element\n   * @param {N} element  The element to be placed\n   */\n  public place(x: number, y: number, element: N = null) {\n    if (!(x || y)) return;\n    if (!element) {\n      element = this.element;\n      y = this.handleId(y);\n    }\n    const translate = `translate(${this.fixed(x)},${this.fixed(y)})`;\n    const transform = this.adaptor.getAttribute(element, 'transform') || '';\n    this.adaptor.setAttribute(element, 'transform', translate + (transform ? ' ' + transform : ''));\n  }\n\n  /**\n   * Firefox and Safari don't scroll to the top of the element with an Id, so\n   *   we shift the element up and then translate its contents down in order to\n   *   correct for their positioning.  Also, Safari will go to the baseline of\n   *   a <text> element (e.g., when mtextInheritFont is true), so add a text\n   *   element to help Safari get the right location.\n   *\n   * @param {number} y     The current offset of the element\n   * @return {number}      The new offset for the element if it has an id\n   */\n  protected handleId(y: number): number {\n    if (!this.node.attributes || !this.node.attributes.get('id')) {\n      return y;\n    }\n    const adaptor = this.adaptor;\n    const h = this.getBBox().h;\n    //\n    //  Remove the element's children and put them into a <g> with transform\n    //\n    const children =  adaptor.childNodes(this.element);\n    children.forEach(child => adaptor.remove(child));\n    const g = this.svg('g', {'data-idbox': true, transform: `translate(0,${this.fixed(-h)})`}, children);\n    //\n    //  Add the text element (not transformed) and the transformed <g>\n    //\n    adaptor.append(this.element, this.svg('text', {'data-id-align': true} , [this.text('')]));\n    adaptor.append(this.element, g);\n    return y + h;\n  }\n\n  /**\n   * Return the first child element, skipping id align boxes and href hit boxes\n   *\n   * @return {N}   The first \"real\" child element\n   */\n  public firstChild(): N {\n    const adaptor = this.adaptor;\n    let child = adaptor.firstChild(this.element);\n    if (child && adaptor.kind(child) === 'text' && adaptor.getAttribute(child, 'data-id-align')) {\n      child = adaptor.firstChild(adaptor.next(child));\n    }\n    if (child && adaptor.kind(child) === 'rect' && adaptor.getAttribute(child, 'data-hitbox')) {\n      child = adaptor.next(child);\n    }\n    return child;\n  }\n\n  /**\n   * @param {number} n        The character number\n   * @param {number} x        The x-position of the character\n   * @param {number} y        The y-position of the character\n   * @param {N} parent        The container for the character\n   * @param {string} variant  The variant to use for the character\n   * @return {number}         The width of the character\n   */\n  public placeChar(n: number, x: number, y: number, parent: N, variant: string = null): number {\n    if (variant === null) {\n      variant = this.variant;\n    }\n    const C = n.toString(16).toUpperCase();\n    const [ , , w, data] = this.getVariantChar(variant, n);\n    if ('p' in data) {\n      const path = (data.p ? 'M' + data.p + 'Z' : '');\n      this.place(x, y, this.adaptor.append(parent, this.charNode(variant, C, path)));\n    } else if ('c' in data) {\n      const g = this.adaptor.append(parent, this.svg('g', {'data-c': C}));\n      this.place(x, y, g);\n      x = 0;\n      for (const n of this.unicodeChars(data.c, variant)) {\n        x += this.placeChar(n, x, y, g, variant);\n      }\n    } else if (data.unknown) {\n      const char = String.fromCodePoint(n);\n      const text = this.adaptor.append(parent, this.jax.unknownText(char, variant));\n      this.place(x, y, text);\n      return this.jax.measureTextNodeWithCache(text, char, variant).w;\n    }\n    return w;\n  }\n\n  /**\n   * @param {string} variant    The name of the variant being used\n   * @param {string} C          The hex string for the character code\n   * @param {string} path       The data from the character\n   * @return {N}                The <path> or <use> node for the glyph\n   */\n  protected charNode(variant: string, C: string, path: string): N {\n    const cache = this.jax.options.fontCache;\n    return (cache !== 'none' ? this.useNode(variant, C, path) : this.pathNode(C, path));\n  }\n\n  /**\n   * @param {string} C          The hex string for the character code\n   * @param {string} path       The data from the character\n   * @return {N}                The <path> for the glyph\n   */\n  protected pathNode(C: string, path: string): N {\n    return this.svg('path', {'data-c': C, d: path});\n  }\n\n  /**\n   * @param {string} variant    The name of the variant being used\n   * @param {string} C          The hex string for the character code\n   * @param {string} path       The data from the character\n   * @return {N}                The <use> node for the glyph\n   */\n  protected useNode(variant: string, C: string, path: string): N {\n    const use = this.svg('use', {'data-c': C});\n    const id = '#' + this.jax.fontCache.cachePath(variant, C, path);\n    this.adaptor.setAttribute(use, 'href', id, XLINKNS);\n    return use;\n  }\n\n  /*******************************************************************/\n  /**\n   * For debugging\n   */\n\n  public drawBBox() {\n    let {w, h, d}  = this.getBBox();\n    const box = this.svg('g', {style: {\n      opacity: .25\n    }}, [\n      this.svg('rect', {\n        fill: 'red',\n        height: this.fixed(h),\n        width: this.fixed(w)\n      }),\n      this.svg('rect', {\n        fill: 'green',\n        height: this.fixed(d),\n        width: this.fixed(w),\n        y: this.fixed(-d)\n      })\n    ] as N[]);\n    const node = this.element || this.parent.element;\n    this.adaptor.append(node, box);\n  }\n\n  /*******************************************************************/\n  /*\n   * Easy access to some utility routines\n   */\n\n  /**\n   * @param {string} type      The tag name of the HTML node to be created\n   * @param {OptionList} def   The properties to set for the created node\n   * @param {(N|T)[]} content  The child nodes for the created HTML node\n   * @return {N}               The generated HTML tree\n   */\n  public html(type: string, def: OptionList = {}, content: (N | T)[] = []): N {\n    return this.jax.html(type, def, content);\n  }\n\n  /**\n   * @param {string} type      The tag name of the svg node to be created\n   * @param {OptionList} def   The properties to set for the created node\n   * @param {(N|T)[]} content  The child nodes for the created SVG node\n   * @return {N}               The generated SVG tree\n   */\n  public svg(type: string, def: OptionList = {}, content: (N | T)[] = []): N {\n    return this.jax.svg(type, def, content);\n  }\n\n  /**\n   * @param {string} text  The text from which to create an HTML text node\n   * @return {T}  The generated text node with the given text\n   */\n  public text(text: string): T {\n    return this.jax.text(text);\n  }\n\n  /**\n   * @param {number} x   The dimension to display\n   * @param {number=} n  The number of digits to display\n   * @return {string}    The dimension with the given number of digits (minus trailing zeros)\n   */\n  public fixed(x: number, n: number = 1): string {\n    return this.jax.fixed(x * 1000, n);\n  }\n\n}\n"]},"metadata":{},"sourceType":"script"}