{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CommonWrapperFactory = void 0;\n\nvar WrapperFactory_js_1 = require(\"../../core/Tree/WrapperFactory.js\");\n\nvar CommonWrapperFactory = function (_super) {\n  __extends(CommonWrapperFactory, _super);\n\n  function CommonWrapperFactory() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.jax = null;\n    return _this;\n  }\n\n  Object.defineProperty(CommonWrapperFactory.prototype, \"Wrappers\", {\n    get: function () {\n      return this.node;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  CommonWrapperFactory.defaultNodes = {};\n  return CommonWrapperFactory;\n}(WrapperFactory_js_1.AbstractWrapperFactory);\n\nexports.CommonWrapperFactory = CommonWrapperFactory;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;AAeA;AAOUA;;AAPV;AAAA;;AAkBSC,gBAAS,IAAT;;AASR;;AAJCC,wBAAIC,8BAAJ,EAAI,UAAJ,EAAY;SAAZ;AACE,aAAO,KAAKC,IAAZ;AACD,KAFW;qBAAA;;AAAA,GAAZ;AAVcD,sCAAmF,EAAnF;AAchB;AAAC,CA3BD,CAOUE,0CAPV;;AAAaC","names":["__extends","_this","Object","CommonWrapperFactory","node","WrapperFactory_js_1","exports"],"sources":["/home/kinzoku99/Desktop/ProjectIO/frontend/node_modules/mathjax-full/ts/output/common/WrapperFactory.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the OutputWrapperFactory class\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {CommonOutputJax} from './OutputJax.js';\nimport {AbstractWrapperFactory} from '../../core/Tree/WrapperFactory.js';\nimport {CommonWrapper, CommonWrapperClass} from './Wrapper.js';\nimport {CharOptions, DelimiterData, FontData} from './FontData.js';\nimport {MmlNode} from '../../core/MmlTree/MmlNode.js';\n\n/*****************************************************************/\n/**\n *  The OutputWrapperFactory class for creating OutputWrapper nodes\n *\n * @template J  The OutputJax type\n * @template W  The Wrapper type\n * @template C  The WrapperClass type\n * @template CC The CharOptions type\n * @template FD The FontData type\n */\nexport class CommonWrapperFactory<\n  J extends CommonOutputJax<any, any, any, W, CommonWrapperFactory<J, W, C, CC, DD, FD>, FD, any>,\n  W extends CommonWrapper<J, W, C, CC, DD, FD>,\n  C extends CommonWrapperClass<J, W, C, CC, DD, FD>,\n  CC extends CharOptions,\n  DD extends DelimiterData,\n  FD extends FontData<CC, any, DD>\n> extends AbstractWrapperFactory<MmlNode, W, C> {\n\n  /**\n   * The default list of wrapper nodes this factory can create\n   *   (filled in by subclasses)\n   */\n  public static defaultNodes: {[kind: string]: CommonWrapperClass<any, any, any, any, any, any>} = {};\n\n  /**\n   * The output jax associated with this factory\n   */\n  public jax: J = null;\n\n  /**\n   * @return {Object}  The list of node-creation functions\n   */\n  get Wrappers(): Object {\n    return this.node;\n  }\n\n}\n\nexport type AnyWrapperFactory = CommonWrapperFactory<any, any, any, any, any, any>;\n"]},"metadata":{},"sourceType":"script"}