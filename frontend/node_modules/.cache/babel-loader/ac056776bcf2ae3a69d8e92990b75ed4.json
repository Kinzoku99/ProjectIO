{"ast":null,"code":"\"use strict\";\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HTMLDomStrings = void 0;\n\nvar Options_js_1 = require(\"../../util/Options.js\");\n\nvar HTMLDomStrings = function () {\n  function HTMLDomStrings(options) {\n    if (options === void 0) {\n      options = null;\n    }\n\n    var CLASS = this.constructor;\n    this.options = Options_js_1.userOptions(Options_js_1.defaultOptions({}, CLASS.OPTIONS), options);\n    this.init();\n    this.getPatterns();\n  }\n\n  HTMLDomStrings.prototype.init = function () {\n    this.strings = [];\n    this.string = '';\n    this.snodes = [];\n    this.nodes = [];\n    this.stack = [];\n  };\n\n  HTMLDomStrings.prototype.getPatterns = function () {\n    var skip = Options_js_1.makeArray(this.options['skipHtmlTags']);\n    var ignore = Options_js_1.makeArray(this.options['ignoreHtmlClass']);\n    var process = Options_js_1.makeArray(this.options['processHtmlClass']);\n    this.skipHtmlTags = new RegExp('^(?:' + skip.join('|') + ')$', 'i');\n    this.ignoreHtmlClass = new RegExp('(?:^| )(?:' + ignore.join('|') + ')(?: |$)');\n    this.processHtmlClass = new RegExp('(?:^| )(?:' + process + ')(?: |$)');\n  };\n\n  HTMLDomStrings.prototype.pushString = function () {\n    if (this.string.match(/\\S/)) {\n      this.strings.push(this.string);\n      this.nodes.push(this.snodes);\n    }\n\n    this.string = '';\n    this.snodes = [];\n  };\n\n  HTMLDomStrings.prototype.extendString = function (node, text) {\n    this.snodes.push([node, text.length]);\n    this.string += text;\n  };\n\n  HTMLDomStrings.prototype.handleText = function (node, ignore) {\n    if (!ignore) {\n      this.extendString(node, this.adaptor.value(node));\n    }\n\n    return this.adaptor.next(node);\n  };\n\n  HTMLDomStrings.prototype.handleTag = function (node, ignore) {\n    if (!ignore) {\n      var text = this.options['includeHtmlTags'][this.adaptor.kind(node)];\n      this.extendString(node, text);\n    }\n\n    return this.adaptor.next(node);\n  };\n\n  HTMLDomStrings.prototype.handleContainer = function (node, ignore) {\n    this.pushString();\n    var cname = this.adaptor.getAttribute(node, 'class') || '';\n    var tname = this.adaptor.kind(node) || '';\n    var process = this.processHtmlClass.exec(cname);\n    var next = node;\n\n    if (this.adaptor.firstChild(node) && !this.adaptor.getAttribute(node, 'data-MJX') && (process || !this.skipHtmlTags.exec(tname))) {\n      if (this.adaptor.next(node)) {\n        this.stack.push([this.adaptor.next(node), ignore]);\n      }\n\n      next = this.adaptor.firstChild(node);\n      ignore = (ignore || this.ignoreHtmlClass.exec(cname)) && !process;\n    } else {\n      next = this.adaptor.next(node);\n    }\n\n    return [next, ignore];\n  };\n\n  HTMLDomStrings.prototype.handleOther = function (node, _ignore) {\n    this.pushString();\n    return this.adaptor.next(node);\n  };\n\n  HTMLDomStrings.prototype.find = function (node) {\n    var _a, _b;\n\n    this.init();\n    var stop = this.adaptor.next(node);\n    var ignore = false;\n    var include = this.options['includeHtmlTags'];\n\n    while (node && node !== stop) {\n      var kind = this.adaptor.kind(node);\n\n      if (kind === '#text') {\n        node = this.handleText(node, ignore);\n      } else if (include.hasOwnProperty(kind)) {\n        node = this.handleTag(node, ignore);\n      } else if (kind) {\n        _a = __read(this.handleContainer(node, ignore), 2), node = _a[0], ignore = _a[1];\n      } else {\n        node = this.handleOther(node, ignore);\n      }\n\n      if (!node && this.stack.length) {\n        this.pushString();\n        _b = __read(this.stack.pop(), 2), node = _b[0], ignore = _b[1];\n      }\n    }\n\n    this.pushString();\n    var result = [this.strings, this.nodes];\n    this.init();\n    return result;\n  };\n\n  HTMLDomStrings.OPTIONS = {\n    skipHtmlTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code', 'annotation', 'annotation-xml'],\n    includeHtmlTags: {\n      br: '\\n',\n      wbr: '',\n      '#comment': ''\n    },\n    ignoreHtmlClass: 'mathjax_ignore',\n    processHtmlClass: 'mathjax_process'\n  };\n  return HTMLDomStrings;\n}();\n\nexports.HTMLDomStrings = HTMLDomStrings;","map":{"version":3,"mappings":"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","names":["options","CLASS","constructor","Options_js_1","OPTIONS","init","getPatterns","HTMLDomStrings","strings","string","snodes","nodes","stack","skip","ignore","process","skipHtmlTags","RegExp","join","ignoreHtmlClass","processHtmlClass","match","push","node","text","length","extendString","adaptor","value","next","kind","pushString","cname","getAttribute","tname","exec","firstChild","_ignore","stop","include","handleText","hasOwnProperty","handleTag","_a","handleContainer","handleOther","_b","pop","result","includeHtmlTags","br","wbr","exports"],"sources":["/home/kinzoku99/Desktop/ProjectIO/frontend/node_modules/mathjax-full/ts/handlers/html/HTMLDomStrings.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the HTMLDomStrings class\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {userOptions, defaultOptions, OptionList, makeArray} from '../../util/Options.js';\nimport {DOMAdaptor} from '../../core/DOMAdaptor.js';\n\n/**\n *  List of consecutive text nodes and their text lengths\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n */\nexport type HTMLNodeList<N, T> = [N | T, number][];\n\n/*****************************************************************/\n/**\n *  The HTMLDocument class (extends AbstractMathDocument)\n *\n *  A class for extracting the text from DOM trees\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport class HTMLDomStrings<N, T, D> {\n\n  /**\n   * The default options for string processing\n   */\n  public static OPTIONS: OptionList = {\n    skipHtmlTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code', 'annotation', 'annotation-xml'],\n                                        // The names of the tags whose contents will not be\n                                        // scanned for math delimiters\n\n    includeHtmlTags: {br: '\\n', wbr: '', '#comment': ''},\n                                        //  tags to be included in the text (and what\n                                        //  text to replace them with)\n\n    ignoreHtmlClass: 'mathjax_ignore',  // the class name of elements whose contents should\n                                        // NOT be processed by tex2jax.  Note that this\n                                        // is a regular expression, so be sure to quote any\n                                        // regexp special characters\n\n    processHtmlClass: 'mathjax_process' // the class name of elements whose contents SHOULD\n                                        // be processed when they appear inside ones that\n                                        // are ignored.  Note that this is a regular expression,\n                                        // so be sure to quote any regexp special characters\n  };\n\n  /**\n   * The options for this instance\n   */\n  protected options: OptionList;\n\n  /**\n   * The array of strings found in the DOM\n   */\n  protected strings: string[];\n\n  /**\n   * The string currently being constructed\n   */\n  protected string: string;\n\n  /**\n   * The list of nodes and lengths for the string being constructed\n   */\n  protected snodes: HTMLNodeList<N, T>;\n\n  /**\n   * The list of node lists corresponding to the strings in this.strings\n   */\n  protected nodes: HTMLNodeList<N, T>[];\n\n  /**\n   * The container nodes that are currently being traversed, and whether their\n   *  contents are being ignored or not\n   */\n  protected stack: [N | T, boolean][];\n\n  /**\n   * Regular expression for the tags to be skipped\n   *  processing of math\n   */\n  protected skipHtmlTags: RegExp;\n  /**\n   * Regular expression for which classes should stop processing of math\n   */\n  protected ignoreHtmlClass: RegExp;\n  /**\n   * Regular expression for which classes should start processing of math\n   */\n  protected processHtmlClass: RegExp;\n\n  /**\n   * The DOM Adaptor to managing HTML elements\n   */\n  public adaptor: DOMAdaptor<N, T, D>;\n\n  /**\n   * @param {OptionList} options  The user-supplied options\n   * @constructor\n   */\n  constructor(options: OptionList = null) {\n    let CLASS = this.constructor as typeof HTMLDomStrings;\n    this.options = userOptions(defaultOptions({}, CLASS.OPTIONS), options);\n    this.init();\n    this.getPatterns();\n  }\n\n  /**\n   * Set the initial values of the main properties\n   */\n  protected init() {\n    this.strings = [];\n    this.string = '';\n    this.snodes = [];\n    this.nodes = [];\n    this.stack = [];\n  }\n\n  /**\n   * Create the search patterns for skipHtmlTags, ignoreHtmlClass, and processHtmlClass\n   */\n  protected getPatterns() {\n    let skip = makeArray(this.options['skipHtmlTags']);\n    let ignore = makeArray(this.options['ignoreHtmlClass']);\n    let process = makeArray(this.options['processHtmlClass']);\n    this.skipHtmlTags = new RegExp('^(?:' + skip.join('|') + ')$', 'i');\n    this.ignoreHtmlClass = new RegExp('(?:^| )(?:' + ignore.join('|') + ')(?: |$)');\n    this.processHtmlClass = new RegExp('(?:^| )(?:' + process + ')(?: |$)');\n  }\n\n  /**\n   * Add a string to the string array and record its node list\n   */\n  protected pushString() {\n    if (this.string.match(/\\S/)) {\n      this.strings.push(this.string);\n      this.nodes.push(this.snodes);\n    }\n    this.string = '';\n    this.snodes = [];\n  }\n\n  /**\n   * Add more text to the current string, and record the\n   * node and its position in the string.\n   *\n   * @param {N|T} node        The node to be pushed\n   * @param {string} text   The text to be added (it may not be the actual text\n   *                         of the node, if it is one of the nodes that gets\n   *                         translated to text, like <br> to a newline).\n   */\n  protected extendString(node: N | T, text: string) {\n    this.snodes.push([node, text.length]);\n    this.string += text;\n  }\n\n  /**\n   * Handle a #text node (add its text to the current string)\n   *\n   * @param {T} node          The Text node to process\n   * @param {boolean} ignore  Whether we are currently ignoring content\n   * @return {N | T}          The next element to process\n   */\n  protected handleText(node: T, ignore: boolean): N | T {\n    if (!ignore) {\n      this.extendString(node, this.adaptor.value(node));\n    }\n    return this.adaptor.next(node);\n  }\n\n  /**\n   * Handle a BR, WBR, or #comment element (or others in the includeHtmlTags object).\n   *\n   * @param {N} node          The node to process\n   * @param {boolean} ignore  Whether we are currently ignoring content\n   * @return {N | T}          The next element to process\n   */\n  protected handleTag(node: N, ignore: boolean): N | T {\n    if (!ignore) {\n      let text = this.options['includeHtmlTags'][this.adaptor.kind(node)];\n      this.extendString(node, text);\n    }\n    return this.adaptor.next(node);\n  }\n\n  /**\n   * Handle an arbitrary DOM node:\n   *   Check the class to see if it matches the processHtmlClass regex\n   *   If the node has a child and is not marked as created by MathJax (data-MJX)\n   *       and either it is marked as restarting processing or is not a tag to be skipped, then\n   *     Save the next node (if there is one) and whether we are currently ignoring content\n   *     Move to the first child node\n   *     Update whether we are ignoring content\n   *   Otherwise\n   *     Move on to the next sibling\n   *   Return the next node to process and the ignore state\n   *\n   * @param {N} node               The node to process\n   * @param {boolean} ignore       Whether we are currently ignoring content\n   * @return {[N|T, boolean]}      The next element to process and whether to ignore its content\n   */\n  protected handleContainer(node: N, ignore: boolean): [N | T, boolean] {\n    this.pushString();\n    const cname = this.adaptor.getAttribute(node, 'class') || '';\n    const tname = this.adaptor.kind(node) || '';\n    const process = this.processHtmlClass.exec(cname);\n    let next = node as N | T;\n    if (this.adaptor.firstChild(node) && !this.adaptor.getAttribute(node, 'data-MJX') &&\n        (process || !this.skipHtmlTags.exec(tname))) {\n      if (this.adaptor.next(node)) {\n        this.stack.push([this.adaptor.next(node), ignore]);\n      }\n      next = this.adaptor.firstChild(node);\n      ignore = (ignore || this.ignoreHtmlClass.exec(cname)) && !process;\n    } else {\n      next = this.adaptor.next(node);\n    }\n    return [next, ignore];\n  }\n\n  /**\n   * Handle an unknown node type (nodeType other than 1, 3, 8)\n   *\n   * @param {N} node           The node to process\n   * @param {boolean} ignore   Whether we are currently ignoring content\n   * @return {N|T}             The next element to process\n   */\n  protected handleOther(node: N, _ignore: boolean): N | T {\n    this.pushString();\n    return this.adaptor.next(node);\n  }\n\n  /**\n   * Find the strings for a given DOM element:\n   *   Initialize the state\n   *   Get the element where we stop processing\n   *   While we still have a node, and it is not the one where we are to stop:\n   *     If it is a text node, handle it and get the next node\n   *     Otherwise, if it is in the includeHtmlTags list, handle it and get the next node\n   *     Otherwise, handle it as a container and get the next node and ignore status\n   *     If there is no next node, and there are more nodes on the stack:\n   *       Save the current string, and pop the node and ignore status from the stack\n   *   Push the final string\n   *   Get the string array and array of associated DOM nodes\n   *   Clear the internal values (so the memory can be freed)\n   *   Return the strings and node lists\n   *\n   * @param {N} node                       The node to search\n   * @return {[string[], HTMLNodeList[]]}  The array of strings and their associated lists of nodes\n   */\n  public find(node: N | T): [string[], HTMLNodeList<N, T>[]] {\n    this.init();\n    let stop = this.adaptor.next(node);\n    let ignore = false;\n    let include = this.options['includeHtmlTags'];\n\n    while (node && node !== stop) {\n      const kind = this.adaptor.kind(node);\n      if (kind === '#text') {\n        node = this.handleText(node as T, ignore);\n      } else if (include.hasOwnProperty(kind)) {\n        node = this.handleTag(node as N, ignore);\n      } else if (kind) {\n        [node, ignore] = this.handleContainer(node as N, ignore);\n      } else {\n        node = this.handleOther(node as N, ignore);\n      }\n      if (!node && this.stack.length) {\n        this.pushString();\n        [node, ignore] = this.stack.pop();\n      }\n    }\n\n    this.pushString();\n    let result = [this.strings, this.nodes] as [string[], HTMLNodeList<N, T>[]];\n    this.init(); // free up memory\n    return result;\n  }\n\n}\n"]},"metadata":{},"sourceType":"script"}