{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TeXAtom = void 0;\n\nvar MmlNode_js_1 = require(\"../MmlNode.js\");\n\nvar mo_js_1 = require(\"./mo.js\");\n\nvar TeXAtom = function (_super) {\n  __extends(TeXAtom, _super);\n\n  function TeXAtom(factory, attributes, children) {\n    var _this = _super.call(this, factory, attributes, children) || this;\n\n    _this.texclass = MmlNode_js_1.TEXCLASS.ORD;\n\n    _this.setProperty('texClass', _this.texClass);\n\n    return _this;\n  }\n\n  Object.defineProperty(TeXAtom.prototype, \"kind\", {\n    get: function () {\n      return 'TeXAtom';\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TeXAtom.prototype, \"arity\", {\n    get: function () {\n      return -1;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TeXAtom.prototype, \"notParent\", {\n    get: function () {\n      return this.childNodes[0] && this.childNodes[0].childNodes.length === 1;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  TeXAtom.prototype.setTeXclass = function (prev) {\n    this.childNodes[0].setTeXclass(null);\n    return this.adjustTeXclass(prev);\n  };\n\n  TeXAtom.prototype.adjustTeXclass = function (prev) {\n    return prev;\n  };\n\n  TeXAtom.defaults = __assign({}, MmlNode_js_1.AbstractMmlBaseNode.defaults);\n  return TeXAtom;\n}(MmlNode_js_1.AbstractMmlBaseNode);\n\nexports.TeXAtom = TeXAtom;\nTeXAtom.prototype.adjustTeXclass = mo_js_1.MmlMo.prototype.adjustTeXclass;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;;AACA;;AAOA;AAA6BA;;AAwC3B,mBAAYC,OAAZ,EAAiCC,UAAjC,EAA2DC,QAA3D,EAA8E;AAA9E,gBACEC,kBAAMH,OAAN,EAAeC,UAAf,EAA2BC,QAA3B,KAAoC,IADtC;;AA5BUE,qBAAWC,sBAASC,GAApB;;AA8BRF,SAAI,CAACG,WAAL,CAAiB,UAAjB,EAA6BH,KAAI,CAACI,QAAlC;;;AACD;;AA1BDC,wBAAWC,iBAAX,EAAW,MAAX,EAAe;SAAf;AACE,aAAO,SAAP;AACD,KAFc;qBAAA;;AAAA,GAAf;AAQAD,wBAAWC,iBAAX,EAAW,OAAX,EAAgB;SAAhB;AACE,aAAO,CAAC,CAAR;AACD,KAFe;qBAAA;;AAAA,GAAhB;AAQAD,wBAAWC,iBAAX,EAAW,WAAX,EAAoB;SAApB;AACE,aAAO,KAAKC,UAAL,CAAgB,CAAhB,KAAsB,KAAKA,UAAL,CAAgB,CAAhB,EAAmBA,UAAnB,CAA8BC,MAA9B,KAAyC,CAAtE;AACD,KAFmB;qBAAA;;AAAA,GAApB;;AAeOF,kCAAP,UAAmBG,IAAnB,EAAgC;AAC9B,SAAKF,UAAL,CAAgB,CAAhB,EAAmBG,WAAnB,CAA+B,IAA/B;AACA,WAAO,KAAKC,cAAL,CAAoBF,IAApB,CAAP;AACD,GAHM;;AAUAH,qCAAP,UAAsBG,IAAtB,EAAmC;AACjC,WAAOA,IAAP;AACD,GAFM;;AArDOH,qBAAQM,aACjBX,iCAAoBY,QADH,CAAR;AAyDhB;AAAC,CA9DD,CAA6BZ,gCAA7B;;AAAaa;AAkEbR,OAAO,CAACS,SAAR,CAAkBJ,cAAlB,GAAmCK,cAAMD,SAAN,CAAgBJ,cAAnD","names":["__extends","factory","attributes","children","_super","_this","MmlNode_js_1","ORD","setProperty","texClass","Object","TeXAtom","childNodes","length","prev","setTeXclass","adjustTeXclass","__assign","defaults","exports","prototype","mo_js_1"],"sources":["/home/kinzoku99/Desktop/ProjectIO/frontend/node_modules/mathjax-full/ts/core/MmlTree/MmlNodes/TeXAtom.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the TeXAtom node\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {MmlFactory} from '../MmlFactory.js';\nimport {PropertyList} from '../../Tree/Node.js';\nimport {AbstractMmlBaseNode, MmlNode, TEXCLASS} from '../MmlNode.js';\nimport {MmlMo} from './mo.js';\n\n/*****************************************************************/\n/**\n *  Implements the TeXAtom node class (subclass of AbstractMmlBaseNode)\n */\n\nexport class TeXAtom extends AbstractMmlBaseNode {\n\n  /**\n   * @override\n   */\n  public static defaults: PropertyList = {\n    ...AbstractMmlBaseNode.defaults\n  };\n\n  /**\n   * TeX class is ORD\n   */\n  protected texclass = TEXCLASS.ORD;\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'TeXAtom';\n  }\n\n  /**\n   * Inferred mrow with any number of children\n   * @override\n   */\n  public get arity() {\n    return -1;\n  }\n\n  /**\n   * This element is not considered a MathML container\n   * @override\n   */\n  public get notParent() {\n    return this.childNodes[0] && this.childNodes[0].childNodes.length === 1;\n  }\n\n  /**\n   * @override\n   */\n  constructor(factory: MmlFactory, attributes: PropertyList, children: MmlNode[]) {\n    super(factory, attributes, children);\n    this.setProperty('texClass', this.texClass);   // needed for serialization to include the texClass\n  }\n\n  /**\n   * @override\n   */\n  public setTeXclass(prev: MmlNode) {\n    this.childNodes[0].setTeXclass(null);\n    return this.adjustTeXclass(prev);\n  }\n\n  /**\n   * (Replaced below by the version from the MmlMo node)\n   *\n   * @override\n   */\n  public adjustTeXclass(prev: MmlNode) {\n    return prev;\n  }\n\n}\n/**\n *  Use the method from the MmlMo class\n */\nTeXAtom.prototype.adjustTeXclass = MmlMo.prototype.adjustTeXclass;\n"]},"metadata":{},"sourceType":"script"}