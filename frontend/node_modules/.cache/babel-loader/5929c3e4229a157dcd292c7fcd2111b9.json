{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n  return to;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EnvironmentMap = exports.CommandMap = exports.MacroMap = exports.DelimiterMap = exports.CharacterMap = exports.AbstractParseMap = exports.RegExpMap = exports.AbstractSymbolMap = void 0;\n\nvar Symbol_js_1 = require(\"./Symbol.js\");\n\nvar MapHandler_js_1 = require(\"./MapHandler.js\");\n\nvar AbstractSymbolMap = function () {\n  function AbstractSymbolMap(_name, _parser) {\n    this._name = _name;\n    this._parser = _parser;\n    MapHandler_js_1.MapHandler.register(this);\n  }\n\n  Object.defineProperty(AbstractSymbolMap.prototype, \"name\", {\n    get: function () {\n      return this._name;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  AbstractSymbolMap.prototype.parserFor = function (symbol) {\n    return this.contains(symbol) ? this.parser : null;\n  };\n\n  AbstractSymbolMap.prototype.parse = function (_a) {\n    var _b = __read(_a, 2),\n        env = _b[0],\n        symbol = _b[1];\n\n    var parser = this.parserFor(symbol);\n    var mapped = this.lookup(symbol);\n    return parser && mapped ? parser(env, mapped) || true : null;\n  };\n\n  Object.defineProperty(AbstractSymbolMap.prototype, \"parser\", {\n    get: function () {\n      return this._parser;\n    },\n    set: function (parser) {\n      this._parser = parser;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return AbstractSymbolMap;\n}();\n\nexports.AbstractSymbolMap = AbstractSymbolMap;\n\nvar RegExpMap = function (_super) {\n  __extends(RegExpMap, _super);\n\n  function RegExpMap(name, parser, _regExp) {\n    var _this = _super.call(this, name, parser) || this;\n\n    _this._regExp = _regExp;\n    return _this;\n  }\n\n  RegExpMap.prototype.contains = function (symbol) {\n    return this._regExp.test(symbol);\n  };\n\n  RegExpMap.prototype.lookup = function (symbol) {\n    return this.contains(symbol) ? symbol : null;\n  };\n\n  return RegExpMap;\n}(AbstractSymbolMap);\n\nexports.RegExpMap = RegExpMap;\n\nvar AbstractParseMap = function (_super) {\n  __extends(AbstractParseMap, _super);\n\n  function AbstractParseMap() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.map = new Map();\n    return _this;\n  }\n\n  AbstractParseMap.prototype.lookup = function (symbol) {\n    return this.map.get(symbol);\n  };\n\n  AbstractParseMap.prototype.contains = function (symbol) {\n    return this.map.has(symbol);\n  };\n\n  AbstractParseMap.prototype.add = function (symbol, object) {\n    this.map.set(symbol, object);\n  };\n\n  AbstractParseMap.prototype.remove = function (symbol) {\n    this.map.delete(symbol);\n  };\n\n  return AbstractParseMap;\n}(AbstractSymbolMap);\n\nexports.AbstractParseMap = AbstractParseMap;\n\nvar CharacterMap = function (_super) {\n  __extends(CharacterMap, _super);\n\n  function CharacterMap(name, parser, json) {\n    var e_1, _a;\n\n    var _this = _super.call(this, name, parser) || this;\n\n    try {\n      for (var _b = __values(Object.keys(json)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var key = _c.value;\n        var value = json[key];\n\n        var _d = __read(typeof value === 'string' ? [value, null] : value, 2),\n            char = _d[0],\n            attrs = _d[1];\n\n        var character = new Symbol_js_1.Symbol(key, char, attrs);\n\n        _this.add(key, character);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    return _this;\n  }\n\n  return CharacterMap;\n}(AbstractParseMap);\n\nexports.CharacterMap = CharacterMap;\n\nvar DelimiterMap = function (_super) {\n  __extends(DelimiterMap, _super);\n\n  function DelimiterMap() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  DelimiterMap.prototype.parse = function (_a) {\n    var _b = __read(_a, 2),\n        env = _b[0],\n        symbol = _b[1];\n\n    return _super.prototype.parse.call(this, [env, '\\\\' + symbol]);\n  };\n\n  return DelimiterMap;\n}(CharacterMap);\n\nexports.DelimiterMap = DelimiterMap;\n\nvar MacroMap = function (_super) {\n  __extends(MacroMap, _super);\n\n  function MacroMap(name, json, functionMap) {\n    var e_2, _a;\n\n    var _this = _super.call(this, name, null) || this;\n\n    try {\n      for (var _b = __values(Object.keys(json)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var key = _c.value;\n        var value = json[key];\n\n        var _d = __read(typeof value === 'string' ? [value] : value),\n            func = _d[0],\n            attrs = _d.slice(1);\n\n        var character = new Symbol_js_1.Macro(key, functionMap[func], attrs);\n\n        _this.add(key, character);\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    return _this;\n  }\n\n  MacroMap.prototype.parserFor = function (symbol) {\n    var macro = this.lookup(symbol);\n    return macro ? macro.func : null;\n  };\n\n  MacroMap.prototype.parse = function (_a) {\n    var _b = __read(_a, 2),\n        env = _b[0],\n        symbol = _b[1];\n\n    var macro = this.lookup(symbol);\n    var parser = this.parserFor(symbol);\n\n    if (!macro || !parser) {\n      return null;\n    }\n\n    return parser.apply(void 0, __spreadArray([env, macro.symbol], __read(macro.args))) || true;\n  };\n\n  return MacroMap;\n}(AbstractParseMap);\n\nexports.MacroMap = MacroMap;\n\nvar CommandMap = function (_super) {\n  __extends(CommandMap, _super);\n\n  function CommandMap() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  CommandMap.prototype.parse = function (_a) {\n    var _b = __read(_a, 2),\n        env = _b[0],\n        symbol = _b[1];\n\n    var macro = this.lookup(symbol);\n    var parser = this.parserFor(symbol);\n\n    if (!macro || !parser) {\n      return null;\n    }\n\n    if (!parser) {\n      return null;\n    }\n\n    var saveCommand = env.currentCS;\n    env.currentCS = '\\\\' + symbol;\n    var result = parser.apply(void 0, __spreadArray([env, '\\\\' + macro.symbol], __read(macro.args)));\n    env.currentCS = saveCommand;\n    return result || true;\n  };\n\n  return CommandMap;\n}(MacroMap);\n\nexports.CommandMap = CommandMap;\n\nvar EnvironmentMap = function (_super) {\n  __extends(EnvironmentMap, _super);\n\n  function EnvironmentMap(name, parser, json, functionMap) {\n    var _this = _super.call(this, name, json, functionMap) || this;\n\n    _this.parser = parser;\n    return _this;\n  }\n\n  EnvironmentMap.prototype.parse = function (_a) {\n    var _b = __read(_a, 2),\n        env = _b[0],\n        symbol = _b[1];\n\n    var macro = this.lookup(symbol);\n    var envParser = this.parserFor(symbol);\n\n    if (!macro || !envParser) {\n      return null;\n    }\n\n    this.parser(env, macro.symbol, envParser, macro.args);\n    return true;\n  };\n\n  return EnvironmentMap;\n}(MacroMap);\n\nexports.EnvironmentMap = EnvironmentMap;","map":{"version":3,"mappings":"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","names":["_name","_parser","MapHandler_js_1","register","Object","AbstractSymbolMap","symbol","contains","parser","_a","_b","env","parserFor","mapped","lookup","exports","__extends","name","_regExp","_super","_this","RegExpMap","test","Map","AbstractParseMap","map","get","has","object","set","delete","json","keys","_c","key","value","char","attrs","character","Symbol_js_1","add","DelimiterMap","parse","call","CharacterMap","functionMap","func","MacroMap","macro","__spreadArray","__read","args","CommandMap","saveCommand","currentCS","result","EnvironmentMap","envParser"],"sources":["/home/kinzoku99/Desktop/ProjectIO/frontend/node_modules/mathjax-full/ts/input/tex/SymbolMap.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Symbol map classes.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\nimport {Attributes, Args, ParseMethod, ParseInput, ParseResult} from './Types.js';\nimport {Symbol, Macro} from './Symbol.js';\nimport {MapHandler} from './MapHandler.js';\n\n\n/**\n * SymbolMaps are the base components for the input parsers.\n *\n * They provide a contains method that checks if a map is applicable (contains)\n * a particular string. Implementing classes then perform the actual symbol\n * parsing, from simple regular expression test, straight forward symbol mapping\n * to transformational functionality on the parsed string.\n *\n * @interface\n */\nexport interface SymbolMap {\n\n  /**\n   * @return {string} The name of the map.\n   */\n  name: string;\n\n  /**\n   * @return {ParseMethod} The default parsing method.\n   */\n  parser: ParseMethod;\n\n  /**\n   * @param {string} symbol A symbol to parse.\n   * @return {boolean} True if the symbol map applies to the symbol.\n   */\n  contains(symbol: string): boolean;\n\n  /**\n   * @param {string} symbol A symbol to parse.\n   * @return {ParseMethod} A parse method for the symbol.\n   */\n  parserFor(symbol: string): ParseMethod;\n\n  /**\n   * @param {TexParser} env The current parser.\n   * @param {string} symbol A symbol to parse.\n   * @return {ParseResult} The parsed symbol and the rest of the string.\n   */\n  parse([env, symbol]: ParseInput): ParseResult;\n\n}\n\n\n/**\n * Abstract implementation of symbol maps.\n * @template T\n */\nexport abstract class AbstractSymbolMap<T> implements SymbolMap {\n\n  /**\n   * @constructor\n   * @implements {SymbolMap}\n   * @param {string} name Name of the mapping.\n   * @param {ParseMethod} parser The parser for the mappiong.\n   */\n  constructor(private _name: string, private _parser: ParseMethod) {\n    MapHandler.register(this);\n  }\n\n\n  /**\n   * @override\n   */\n  public get name(): string {\n    return this._name;\n  }\n\n\n  /**\n   * @override\n   */\n  public abstract contains(symbol: string): boolean;\n\n\n  /**\n   * @override\n   */\n  public parserFor(symbol: string) {\n    return this.contains(symbol) ? this.parser : null;\n  }\n\n\n  /**\n   * @override\n   */\n  public parse([env, symbol]: ParseInput) {\n    let parser = this.parserFor(symbol);\n    let mapped = this.lookup(symbol);\n    return (parser && mapped) ?\n      parser(env, mapped as any) || true as ParseResult : null;\n  }\n\n\n  public set parser(parser: ParseMethod) {\n    this._parser = parser;\n  }\n\n  public get parser(): ParseMethod {\n    return this._parser;\n  }\n\n\n  /**\n   * @param {string} symbol\n   * @return {T}\n   */\n  public abstract lookup(symbol: string): T;\n\n}\n\n\n\n/**\n * Regular expressions used for parsing strings.\n */\nexport class RegExpMap extends AbstractSymbolMap<string> {\n\n  /**\n   * @constructor\n   * @extends {AbstractSymbolMap}\n   * @param {string} name Name of the mapping.\n   * @param {ParseMethod} parser The parser for the mappiong.\n   * @param {RegExp} regexp The regular expression.\n   */\n  constructor(name: string, parser: ParseMethod, private _regExp: RegExp) {\n    super(name, parser);\n  }\n\n\n  /**\n   * @override\n   */\n  public contains(symbol: string) {\n    return this._regExp.test(symbol);\n  }\n\n\n  /**\n   * @override\n   */\n  public lookup(symbol: string): string {\n    return this.contains(symbol) ? symbol : null;\n  }\n\n}\n\n\n/**\n * Parse maps associate strings with parsing functionality.\n * @constructor\n * @extends {AbstractSymbolMap}\n * @template K\n */\nexport abstract class AbstractParseMap<K> extends AbstractSymbolMap<K> {\n\n  private map: Map<string, K> = new Map<string, K>();\n\n  /**\n   * @override\n   */\n  public lookup(symbol: string): K {\n    return this.map.get(symbol);\n  }\n\n  /**\n   * @override\n   */\n  public contains(symbol: string) {\n    return this.map.has(symbol);\n  }\n\n  /**\n   * Sets mapping for a symbol.\n   * @param {string} symbol The symbol to map.\n   * @param {K} object The symbols value in the mapping's codomain.\n   */\n  public add(symbol: string, object: K) {\n    this.map.set(symbol, object);\n  }\n\n  /**\n   * Removes a symbol from the map\n   * @param {string} symbol The symbol to remove\n   */\n  public remove(symbol: string) {\n    this.map.delete(symbol);\n  }\n\n}\n\n\n/**\n * Maps symbols that can all be parsed with the same method.\n *\n * @constructor\n * @extends {AbstractParseMap}\n */\nexport class CharacterMap extends AbstractParseMap<Symbol> {\n\n  /**\n   * @constructor\n   * @param {string} name Name of the mapping.\n   * @param {ParseMethod} parser The parser for the mapping.\n   * @param {JSON} json The JSON representation of the character mapping.\n   */\n  constructor(name: string, parser: ParseMethod,\n              json: {[index: string]: string | [string, Attributes]}) {\n    super(name, parser);\n    for (const key of Object.keys(json)) {\n      let value = json[key];\n      let [char, attrs] = (typeof(value) === 'string') ? [value, null] : value;\n      let character = new Symbol(key, char, attrs);\n      this.add(key, character);\n    }\n  }\n\n}\n\n\n/**\n * Maps symbols that are delimiters, that are all parsed with the same method.\n *\n * @constructor\n * @extends {CharacterMap}\n */\nexport class DelimiterMap extends CharacterMap {\n\n  /**\n   * @override\n   */\n  public parse([env, symbol]: ParseInput) {\n    return super.parse([env, '\\\\' + symbol]);\n  }\n\n}\n\n\n/**\n * Maps macros that all bring their own parsing method.\n *\n * @constructor\n * @extends {AbstractParseMap}\n */\nexport class MacroMap extends AbstractParseMap<Macro> {\n\n  /**\n   * @constructor\n   * @param {string} name Name of the mapping.\n   * @param {JSON} json The JSON representation of the macro map.\n   * @param {Record<string, ParseMethod>} functionMap Collection of parse\n   *     functions for the single macros.\n   */\n  constructor(name: string,\n              json: {[index: string]: string | Args[]},\n              functionMap: Record<string, ParseMethod>) {\n    super(name, null);\n    for (const key of Object.keys(json)) {\n      let value = json[key];\n      let [func, ...attrs] = (typeof(value) === 'string') ? [value] : value;\n      let character = new Macro(key, functionMap[func as string], attrs);\n      this.add(key, character);\n    }\n  }\n\n\n  /**\n   * @override\n   */\n  public parserFor(symbol: string) {\n    let macro = this.lookup(symbol);\n    return macro ? macro.func : null;\n  }\n\n\n  /**\n   * @override\n   */\n  public parse([env, symbol]: ParseInput) {\n    let macro = this.lookup(symbol);\n    let parser = this.parserFor(symbol);\n    if (!macro || !parser) {\n      return null;\n    }\n    return parser(env, macro.symbol, ...macro.args) || true as ParseResult;\n  }\n\n}\n\n\n/**\n * Maps macros that all bring their own parsing method.\n *\n * @constructor\n * @extends {MacroMap}\n */\nexport class CommandMap extends MacroMap {\n\n  /**\n   * @override\n   */\n  public parse([env, symbol]: ParseInput) {\n    let macro = this.lookup(symbol);\n    let parser = this.parserFor(symbol);\n    if (!macro || !parser) {\n      return null;\n    }\n    if (!parser) {\n      return null;\n    }\n    let saveCommand = env.currentCS;\n    env.currentCS = '\\\\' + symbol;\n    let result = parser(env, '\\\\' + macro.symbol, ...macro.args);\n    env.currentCS = saveCommand;\n    return result || true as ParseResult;\n  }\n\n}\n\n\n/**\n * Maps macros for environments. It has a general parsing method for\n * environments, i.e., one that deals with begin/end, and each environment has\n * its own parsing method returning the content.\n *\n * @constructor\n * @extends {MacroMap}\n */\nexport class EnvironmentMap extends MacroMap {\n\n  /**\n   * @constructor\n   * @param {string} name Name of the mapping.\n   * @param {ParseMethod} parser The parser for the environments.\n   * @param {JSON} json The JSON representation of the macro map.\n   * @param {Record<string, ParseMethod>} functionMap Collection of parse\n   *     functions for the single macros.\n   */\n  constructor(name: string,\n              parser: ParseMethod,\n              json: {[index: string]: string | Args[]},\n              functionMap: Record<string, ParseMethod>) {\n    super(name, json, functionMap);\n    this.parser = parser;\n  }\n\n\n  /**\n   * @override\n   */\n  public parse([env, symbol]: ParseInput) {\n    let macro = this.lookup(symbol);\n    let envParser = this.parserFor(symbol);\n    if (!macro || !envParser) {\n      return null;\n    }\n    this.parser(env, macro.symbol, envParser, macro.args);\n    return true;\n  }\n\n}\n"]},"metadata":{},"sourceType":"script"}