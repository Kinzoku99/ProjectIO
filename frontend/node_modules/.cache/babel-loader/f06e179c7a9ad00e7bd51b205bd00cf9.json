{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SVGTextNode = void 0;\n\nvar MmlNode_js_1 = require(\"../../../core/MmlTree/MmlNode.js\");\n\nvar Wrapper_js_1 = require(\"../Wrapper.js\");\n\nvar TextNode_js_1 = require(\"../../common/Wrappers/TextNode.js\");\n\nvar SVGTextNode = function (_super) {\n  __extends(SVGTextNode, _super);\n\n  function SVGTextNode() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  SVGTextNode.prototype.toSVG = function (parent) {\n    var e_1, _a;\n\n    var text = this.node.getText();\n    var variant = this.parent.variant;\n\n    if (variant === '-explicitFont') {\n      this.adaptor.append(parent, this.jax.unknownText(text, variant));\n    } else {\n      var chars = this.remappedText(text, variant);\n      var x = 0;\n\n      try {\n        for (var chars_1 = __values(chars), chars_1_1 = chars_1.next(); !chars_1_1.done; chars_1_1 = chars_1.next()) {\n          var n = chars_1_1.value;\n          x += this.placeChar(n, x, 0, parent, variant);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (chars_1_1 && !chars_1_1.done && (_a = chars_1.return)) _a.call(chars_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }\n\n    this.element = this.adaptor.lastChild(parent);\n  };\n\n  SVGTextNode.kind = MmlNode_js_1.TextNode.prototype.kind;\n  SVGTextNode.styles = {\n    'mjx-container[jax=\"SVG\"] path[data-c], mjx-container[jax=\"SVG\"] use[data-c]': {\n      'stroke-width': 3\n    }\n  };\n  return SVGTextNode;\n}(TextNode_js_1.CommonTextNodeMixin(Wrapper_js_1.SVGWrapper));\n\nexports.SVGTextNode = SVGTextNode;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;AACA;;AACA;;AAYA;AACAA;;AADA;;AAmCC;;AAfQC,gCAAP,UAAaC,MAAb,EAAsB;;;AACpB,QAAMC,IAAI,GAAI,KAAKC,IAAL,CAAuBC,OAAvB,EAAd;AACA,QAAMC,OAAO,GAAG,KAAKJ,MAAL,CAAYI,OAA5B;;AACA,QAAIA,OAAO,KAAK,eAAhB,EAAiC;AAC/B,WAAKC,OAAL,CAAaC,MAAb,CAAoBN,MAApB,EAA4B,KAAKO,GAAL,CAASC,WAAT,CAAqBP,IAArB,EAA2BG,OAA3B,CAA5B;AACD,KAFD,MAEO;AACL,UAAMK,KAAK,GAAG,KAAKC,YAAL,CAAkBT,IAAlB,EAAwBG,OAAxB,CAAd;AACA,UAAIO,CAAC,GAAG,CAAR;;;AACA,aAAgB,+BAAKC,0BAArB,EAAqB,eAArB,EAAqBA,0BAArB,EAAuB;AAAlB,cAAMC,CAAC,kBAAP;AACHF,WAAC,IAAI,KAAKG,SAAL,CAAeD,CAAf,EAAkBF,CAAlB,EAAqB,CAArB,EAAwBX,MAAxB,EAAgCI,OAAhC,CAAL;AACD;;;;;;;;;;;;AACF;;AACD,SAAKW,OAAL,GAAe,KAAKV,OAAL,CAAaW,SAAb,CAAuBhB,MAAvB,CAAf;AACD,GAbM;;AAdOD,qBAAOkB,sBAASC,SAAT,CAAmBC,IAA1B;AAKApB,uBAAoB;AAChC,mFAA+E;AAC7E,sBAAgB;AAD6D;AAD/C,GAApB;AAwBhB;AAnCA,EACAqB,kCAAmDC,uBAAnD,CADA;;AAAaC","names":["__extends","SVGTextNode","parent","text","node","getText","variant","adaptor","append","jax","unknownText","chars","remappedText","x","chars_1_1","n","placeChar","element","lastChild","MmlNode_js_1","prototype","kind","TextNode_js_1","Wrapper_js_1","exports"],"sources":["/home/kinzoku99/Desktop/ProjectIO/frontend/node_modules/mathjax-full/ts/output/svg/Wrappers/TextNode.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the SVGTextNode wrapper for the TextNode object\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {TextNode} from '../../../core/MmlTree/MmlNode.js';\nimport {SVGWrapper, SVGConstructor} from '../Wrapper.js';\nimport {CommonTextNodeMixin} from '../../common/Wrappers/TextNode.js';\nimport {StyleList} from '../../../util/StyleList.js';\n\n/*****************************************************************/\n/**\n *  The SVGTextNode wrapper for the TextNode object\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\n// @ts-ignore\nexport class SVGTextNode<N, T, D> extends\nCommonTextNodeMixin<SVGConstructor<any, any, any>>(SVGWrapper) {\n\n  /**\n   * The TextNode wrapper\n   */\n  public static kind = TextNode.prototype.kind;\n\n  /**\n   * @override\n   */\n  public static styles: StyleList = {\n    'mjx-container[jax=\"SVG\"] path[data-c], mjx-container[jax=\"SVG\"] use[data-c]': {\n      'stroke-width': 3\n    }\n  };\n\n  /**\n   * @override\n   */\n  public toSVG(parent: N) {\n    const text = (this.node as TextNode).getText();\n    const variant = this.parent.variant;\n    if (variant === '-explicitFont') {\n      this.adaptor.append(parent, this.jax.unknownText(text, variant));\n    } else {\n      const chars = this.remappedText(text, variant);\n      let x = 0;\n      for (const n of chars) {\n        x += this.placeChar(n, x, 0, parent, variant);\n      }\n    }\n    this.element = this.adaptor.lastChild(parent);\n  }\n\n}\n"]},"metadata":{},"sourceType":"script"}