{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FindTeX = void 0;\n\nvar FindMath_js_1 = require(\"../../core/FindMath.js\");\n\nvar string_js_1 = require(\"../../util/string.js\");\n\nvar MathItem_js_1 = require(\"../../core/MathItem.js\");\n\nvar FindTeX = function (_super) {\n  __extends(FindTeX, _super);\n\n  function FindTeX(options) {\n    var _this = _super.call(this, options) || this;\n\n    _this.getPatterns();\n\n    return _this;\n  }\n\n  FindTeX.prototype.getPatterns = function () {\n    var _this = this;\n\n    var options = this.options;\n    var starts = [],\n        parts = [],\n        subparts = [];\n    this.end = {};\n    this.env = this.sub = 0;\n    var i = 1;\n    options['inlineMath'].forEach(function (delims) {\n      return _this.addPattern(starts, delims, false);\n    });\n    options['displayMath'].forEach(function (delims) {\n      return _this.addPattern(starts, delims, true);\n    });\n\n    if (starts.length) {\n      parts.push(starts.sort(string_js_1.sortLength).join('|'));\n    }\n\n    if (options['processEnvironments']) {\n      parts.push('\\\\\\\\begin\\\\s*\\\\{([^}]*)\\\\}');\n      this.env = i;\n      i++;\n    }\n\n    if (options['processEscapes']) {\n      subparts.push('\\\\\\\\([\\\\\\\\$])');\n    }\n\n    if (options['processRefs']) {\n      subparts.push('(\\\\\\\\(?:eq)?ref\\\\s*\\\\{[^}]*\\\\})');\n    }\n\n    if (subparts.length) {\n      parts.push('(' + subparts.join('|') + ')');\n      this.sub = i;\n    }\n\n    this.start = new RegExp(parts.join('|'), 'g');\n    this.hasPatterns = parts.length > 0;\n  };\n\n  FindTeX.prototype.addPattern = function (starts, delims, display) {\n    var _a = __read(delims, 2),\n        open = _a[0],\n        close = _a[1];\n\n    starts.push(string_js_1.quotePattern(open));\n    this.end[open] = [close, display, this.endPattern(close)];\n  };\n\n  FindTeX.prototype.endPattern = function (end, endp) {\n    return new RegExp((endp || string_js_1.quotePattern(end)) + '|\\\\\\\\(?:[a-zA-Z]|.)|[{}]', 'g');\n  };\n\n  FindTeX.prototype.findEnd = function (text, n, start, end) {\n    var _a = __read(end, 3),\n        close = _a[0],\n        display = _a[1],\n        pattern = _a[2];\n\n    var i = pattern.lastIndex = start.index + start[0].length;\n    var match,\n        braces = 0;\n\n    while (match = pattern.exec(text)) {\n      if ((match[1] || match[0]) === close && braces === 0) {\n        return MathItem_js_1.protoItem(start[0], text.substr(i, match.index - i), match[0], n, start.index, match.index + match[0].length, display);\n      } else if (match[0] === '{') {\n        braces++;\n      } else if (match[0] === '}' && braces) {\n        braces--;\n      }\n    }\n\n    return null;\n  };\n\n  FindTeX.prototype.findMathInString = function (math, n, text) {\n    var start, match;\n    this.start.lastIndex = 0;\n\n    while (start = this.start.exec(text)) {\n      if (start[this.env] !== undefined && this.env) {\n        var end = '\\\\\\\\end\\\\s*(\\\\{' + string_js_1.quotePattern(start[this.env]) + '\\\\})';\n        match = this.findEnd(text, n, start, ['{' + start[this.env] + '}', true, this.endPattern(null, end)]);\n\n        if (match) {\n          match.math = match.open + match.math + match.close;\n          match.open = match.close = '';\n        }\n      } else if (start[this.sub] !== undefined && this.sub) {\n        var math_1 = start[this.sub];\n        var end = start.index + start[this.sub].length;\n\n        if (math_1.length === 2) {\n          match = MathItem_js_1.protoItem('', math_1.substr(1), '', n, start.index, end);\n        } else {\n          match = MathItem_js_1.protoItem('', math_1, '', n, start.index, end, false);\n        }\n      } else {\n        match = this.findEnd(text, n, start, this.end[start[0]]);\n      }\n\n      if (match) {\n        math.push(match);\n        this.start.lastIndex = match.end.n;\n      }\n    }\n  };\n\n  FindTeX.prototype.findMath = function (strings) {\n    var math = [];\n\n    if (this.hasPatterns) {\n      for (var i = 0, m = strings.length; i < m; i++) {\n        this.findMathInString(math, i, strings[i]);\n      }\n    }\n\n    return math;\n  };\n\n  FindTeX.OPTIONS = {\n    inlineMath: [['\\\\(', '\\\\)']],\n    displayMath: [['$$', '$$'], ['\\\\[', '\\\\]']],\n    processEscapes: true,\n    processEnvironments: true,\n    processRefs: true\n  };\n  return FindTeX;\n}(FindMath_js_1.AbstractFindMath);\n\nexports.FindTeX = FindTeX;","map":{"version":3,"mappings":"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","names":["__extends","options","_super","_this","getPatterns","FindTeX","starts","parts","subparts","end","env","sub","i","forEach","delims","addPattern","length","push","sort","string_js_1","join","start","RegExp","hasPatterns","display","open","close","endPattern","endp","text","n","pattern","lastIndex","index","match","braces","exec","MathItem_js_1","substr","math","undefined","findEnd","math_1","strings","m","findMathInString","inlineMath","displayMath","processEscapes","processEnvironments","processRefs","FindMath_js_1","exports"],"sources":["/home/kinzoku99/Desktop/ProjectIO/frontend/node_modules/mathjax-full/ts/input/tex/FindTeX.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the TeX version of the FindMath object\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {AbstractFindMath} from '../../core/FindMath.js';\nimport {OptionList} from '../../util/Options.js';\nimport {sortLength, quotePattern} from '../../util/string.js';\nimport {ProtoItem, protoItem} from '../../core/MathItem.js';\n\n/**\n * Shorthand types for data about end delimiters and delimiter pairs\n */\nexport type EndItem = [string, boolean, RegExp];\nexport type Delims = [string, string];\n\n/*****************************************************************/\n/*\n *  Implements the FindTeX class (extends AbstractFindMath)\n *\n *  Locates TeX expressions within strings\n */\n\n/*\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport class FindTeX<N, T, D> extends AbstractFindMath<N, T, D> {\n\n  /**\n   * @type {OptionList}\n   */\n  public static OPTIONS: OptionList = {\n    inlineMath: [              // The start/end delimiter pairs for in-line math\n      //  ['$', '$'],              //  (comment out any you don't want, or add your own, but\n      ['\\\\(', '\\\\)']           //  be sure that you don't have an extra comma at the end)\n    ],\n\n    displayMath: [             // The start/end delimiter pairs for display math\n      ['$$', '$$'],            //  (comment out any you don't want, or add your own, but\n      ['\\\\[', '\\\\]']           //  be sure that you don't have an extra comma at the end)\n    ],\n\n    processEscapes: true,      // set to true to allow \\$ to produce a dollar without\n    //   starting in-line math mode\n    processEnvironments: true, // set to true to process \\begin{xxx}...\\end{xxx} outside\n    //   of math mode, false to prevent that\n    processRefs: true,         // set to true to process \\ref{...} outside of math mode\n  };\n\n  /**\n   * The regular expression for any starting delimiter\n   */\n  protected start: RegExp;\n\n  /**\n   * The end-delimiter data keyed to the opening delimiter string\n   */\n  protected end: {[name: string]: EndItem};\n\n  /**\n   * False if the configuration has no delimiters (so search can be skipped), true otherwise\n   */\n  protected hasPatterns: boolean;\n\n  /**\n   * The index of the \\begin...\\end pattern in the regex match array\n   */\n  protected env: number;\n\n  /**\n   * The index of the \\ref and escaped character patters in the regex match array\n   */\n  protected sub: number;\n\n  /**\n   * @override\n   */\n  constructor(options: OptionList) {\n    super(options);\n    this.getPatterns();\n  }\n\n  /**\n   * Create the patterns needed for searching the strings for TeX\n   *   based on the configuration options\n   */\n  protected getPatterns() {\n    let options = this.options;\n    let starts: string[] = [], parts: string[] = [], subparts: string[] = [];\n    this.end = {};\n    this.env = this.sub = 0;\n    let i = 1;\n    options['inlineMath'].forEach((delims: Delims) => this.addPattern(starts, delims, false));\n    options['displayMath'].forEach((delims: Delims) => this.addPattern(starts, delims, true));\n    if (starts.length) {\n      parts.push(starts.sort(sortLength).join('|'));\n    }\n    if (options['processEnvironments']) {\n      parts.push('\\\\\\\\begin\\\\s*\\\\{([^}]*)\\\\}');\n      this.env = i;\n      i++;\n    }\n    if (options['processEscapes']) {\n      subparts.push('\\\\\\\\([\\\\\\\\$])');\n    }\n    if (options['processRefs']) {\n      subparts.push('(\\\\\\\\(?:eq)?ref\\\\s*\\\\{[^}]*\\\\})');\n    }\n    if (subparts.length) {\n      parts.push('(' + subparts.join('|') + ')');\n      this.sub = i;\n    }\n    this.start = new RegExp(parts.join('|'), 'g');\n    this.hasPatterns = (parts.length > 0);\n  }\n\n  /**\n   * Add the needed patterns for a pair of delimiters\n   *\n   * @param {string[]} starts  Array of starting delimiter strings\n   * @param {Delims} delims    Array of delimiter strings, as [start, end]\n   * @param {boolean} display  True if the delimiters are for display mode\n   */\n  protected addPattern(starts: string[], delims: Delims, display: boolean) {\n    let [open, close] = delims;\n    starts.push(quotePattern(open));\n    this.end[open] = [close, display, this.endPattern(close)];\n  }\n\n  /**\n   * Create the pattern for a close delimiter\n   *\n   * @param {string} end   The end delimiter text\n   * @param {string} endp  The end delimiter pattern (overrides the literal end pattern)\n   * @return {RegExp}      The regular expression for the end delimiter\n   */\n  protected endPattern(end: string, endp?: string): RegExp {\n    return new RegExp((endp || quotePattern(end)) + '|\\\\\\\\(?:[a-zA-Z]|.)|[{}]', 'g');\n  }\n\n  /**\n   * Search for the end delimiter given the start delimiter,\n   *   skipping braced groups, and control sequences that aren't\n   *   the close delimiter.\n   *\n   * @param {string} text            The string being searched for the end delimiter\n   * @param {number} n               The index of the string being searched\n   * @param {RegExpExecArray} start  The result array from the start-delimiter search\n   * @param {EndItem} end            The end-delimiter data corresponding to the start delimiter\n   * @return {ProtoItem<N,T>}        The proto math item for the math, if found\n   */\n  protected findEnd(text: string, n: number, start: RegExpExecArray, end: EndItem): ProtoItem<N, T> {\n    let [close, display, pattern] = end;\n    let i = pattern.lastIndex = start.index + start[0].length;\n    let match: RegExpExecArray, braces: number = 0;\n    while ((match = pattern.exec(text))) {\n      if ((match[1] || match[0]) === close && braces === 0) {\n        return protoItem<N, T>(start[0], text.substr(i, match.index - i), match[0],\n                               n, start.index, match.index + match[0].length, display);\n      } else if (match[0] === '{') {\n        braces++;\n      } else if (match[0] === '}' && braces) {\n        braces--;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Search a string for math delimited by one of the delimiter pairs,\n   *   or by \\begin{env}...\\end{env}, or \\eqref{...}, \\ref{...}, \\\\, or \\$.\n   *\n   * @param {ProtoItem[]} math  The array of proto math items located so far\n   * @param {number} n          The index of the string being searched\n   * @param {string} text       The string being searched\n   */\n  protected findMathInString(math: ProtoItem<N, T>[], n: number, text: string) {\n    let start, match;\n    this.start.lastIndex = 0;\n    while ((start = this.start.exec(text))) {\n      if (start[this.env] !== undefined && this.env) {\n        let end = '\\\\\\\\end\\\\s*(\\\\{' + quotePattern(start[this.env]) + '\\\\})';\n        match = this.findEnd(text, n, start, ['{' + start[this.env] + '}', true, this.endPattern(null, end)]);\n        if (match) {\n          match.math = match.open + match.math + match.close;\n          match.open = match.close = '';\n        }\n      } else if (start[this.sub] !== undefined && this.sub) {\n        let math = start[this.sub];\n        let end = start.index + start[this.sub].length;\n        if (math.length === 2) {\n          match = protoItem<N, T>('', math.substr(1), '', n, start.index, end);\n        } else {\n          match = protoItem<N, T>('', math, '', n, start.index, end, false);\n        }\n      } else {\n        match = this.findEnd(text, n, start, this.end[start[0]]);\n      }\n      if (match) {\n        math.push(match);\n        this.start.lastIndex = match.end.n;\n      }\n    }\n  }\n\n  /**\n   * Search for math in an array of strings and return an array of matches.\n   *\n   * @override\n   */\n  public findMath(strings: string[]) {\n    let math: ProtoItem<N, T>[] = [];\n    if (this.hasPatterns) {\n      for (let i = 0, m = strings.length; i < m; i++) {\n        this.findMathInString(math, i, strings[i]);\n      }\n    }\n    return math;\n  }\n\n}\n"]},"metadata":{},"sourceType":"script"}